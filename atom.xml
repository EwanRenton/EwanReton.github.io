<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ewan Reton]]></title>
  <link href="http://ewanreton.github.io/atom.xml" rel="self"/>
  <link href="http://ewanreton.github.io/"/>
  <updated>2016-05-10T21:53:33+08:00</updated>
  <id>http://ewanreton.github.io/</id>
  <author>
    <name><![CDATA[Ewan Reton]]></name>
    <email><![CDATA[liukedi001@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP性能优化初识]]></title>
    <link href="http://ewanreton.github.io/blog/2016/05/04/php-xing-neng-you-hua/"/>
    <updated>2016-05-04T22:46:21+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/05/04/php-xing-neng-you-hua</id>
    <content type="html"><![CDATA[<blockquote><p>PHP性能优化</p></blockquote>

<h1>一、PHP性能优化问题解析</h1>

<p>PHP的性能问题，占整体项目性能问题的比例不足50%，所以在考虑性能优化项目的时候，不要局限于仅优化PHP。</p>

<p>PHP的性能优化问题的解决方向（困难度从容易到简单）</p>

<pre><code>PHP语言级的性能优化
PHP周边问题的性能优化（开发环境等）
PHP语言自身分析、优化（底层C）
</code></pre>

<h2>压力测试工具简介</h2>

<p><strong>Apache Benchmark（ab）</strong></p>

<p>简介</p>

<pre><code>ab是由Apache提供的压力测试软件。安装Apache服务器时会自带该压测软件。
</code></pre>

<p>如何使用</p>

<pre><code>./ab -n1000 -c100 http://www.baidu.com （目标网址）
-n 请求数
-c 并发数
url 目标压测地址
</code></pre>

<p>结果分析</p>

<pre><code>主要看
Request per second 每秒接受的请求数
Time per request   一个请求的耗时
</code></pre>

<h1>二、PHP语言级的优化</h1>

<p><strong>优化点：少写代码，多用PHP自身能力,多使用PHP内置的函数，变量，常量</strong></p>

<p><strong>性能问题：自写代码冗余较多，可读性不佳，并且性能低</strong></p>

<p>为什么性能低？</p>

<pre><code>我们自己写的代码每次需要编译解析成底层语言，每一次请求都会处理一遍开销很大。
</code></pre>

<hr />

<p><strong>PHP内置函数的性能优劣</strong></p>

<p>情况描述：</p>

<pre><code>PHP内置函数之间依然存在着快慢差异
</code></pre>

<p>多去了解PHP内置函数的时间复杂度</p>

<p>举例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>  <span class="nv">$start</span><span class="o">=</span><span class="nx">current_time</span><span class="p">();</span>
</span><span class='line'>  <span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$arr</span><span class="o">=</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">200000</span><span class="p">);</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="nv">$i</span><span class="o">&lt;</span><span class="mi">200000</span><span class="p">){</span>
</span><span class='line'>      <span class="o">++</span><span class="nv">$i</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">//isset($arr[$i]); //测试结果50多ms</span>
</span><span class='line'>      <span class="nb">array_key_exists</span><span class="p">(</span><span class="nv">$i</span><span class="p">,</span><span class="nv">$arr</span><span class="p">);</span> <span class="c1">//测试结果80多ms</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nv">$end</span><span class="o">=</span><span class="nx">current_time</span><span class="p">();</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s2">&quot;Lost Time:&quot;</span><span class="o">.</span><span class="nb">number_format</span><span class="p">(</span><span class="nv">$end</span><span class="o">-</span><span class="nv">$start</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">  *返回一个微秒级别的时间戳</span>
</span><span class='line'><span class="sd">  */</span>
</span><span class='line'>  <span class="k">function</span> <span class="nf">current_time</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">list</span><span class="p">(</span><span class="nv">$usec</span><span class="p">,</span><span class="nv">$sec</span><span class="p">)</span><span class="o">=</span><span class="nb">explode</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nb">microtime</span><span class="p">());</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">((</span><span class="nx">float</span><span class="p">)</span><span class="nv">$usce</span><span class="o">+</span><span class="p">(</span><span class="nx">float</span><span class="p">)</span><span class="nv">$sec</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>测试结果说明isset比array_key_exists函数更优化。</p>

<hr />

<p><strong>减少PHP魔法函数的使用</strong></p>

<p>情况描述：</p>

<pre><code>PHP提供的魔法函数性能不佳
</code></pre>

<p>举例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">test</span><span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$var</span><span class="o">=</span><span class="s2">&quot;123&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__get</span><span class="p">(</span><span class="nv">$varname</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">var</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="nv">$i</span><span class="o">&lt;</span><span class="mi">10000</span><span class="o">-</span><span class="p">){</span>
</span><span class='line'>  <span class="nv">$i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$test</span><span class="o">=</span><span class="k">new</span> <span class="nx">test</span><span class="p">();</span>
</span><span class='line'>  <span class="nv">$test</span><span class="o">-&gt;</span><span class="na">var</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="c1">//大概80ms</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">test</span><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="nv">$var</span><span class="o">=</span><span class="s2">&quot;123&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//public function __get($varname){</span>
</span><span class='line'>      <span class="c1">//return $this-&gt;var;</span>
</span><span class='line'>  <span class="c1">//}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="nv">$i</span><span class="o">&lt;</span><span class="mi">100000</span><span class="p">){</span>
</span><span class='line'>  <span class="nv">$i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$test</span><span class="o">=</span><span class="k">new</span> <span class="nx">test</span><span class="p">();</span>
</span><span class='line'>  <span class="nv">$test</span><span class="o">-&gt;</span><span class="na">var</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="c1">//大概50ms</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>不使用魔法函数，性能更优化。</p>

<p>PS：</p>

<pre><code>在Linux中可以使用 time php test.php
会输出三个时间，主要关注user为执行时间
</code></pre>

<hr />

<p><strong>产生额外开销的错误抑制符@</strong></p>

<p>情况描述：</p>

<pre><code>@的实际逻辑是在代码开始前结束后增加Opcode 忽略报错。
在@这行前加入Opcode忽略报错，又在这行结束后再加入Opcode，恢复报错。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>  <span class="nb">file_get_contents</span><span class="p">(</span><span class="s2">&quot;XXX&quot;</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>用VLD扩展看Opcode代码：</p>

<pre><code>php -dvld.active=1 -dvld.execute=0 at.php //我们只看代码不执行

有三行代码
加上@符号后
有五行代码
</code></pre>

<p>建议不要使用错误抑制符@，
多使用try catch</p>

<hr />

<p><strong>合理使用内存</strong></p>

<p>情况描述：</p>

<pre><code>PHP有内存回收机制保底，但也要小心使用内存。
</code></pre>

<p>利用unset（）及时释放不适用的内存（注：unset（）出现注销不掉的情况）</p>

<hr />

<p><strong>尽量少的使用正则表达式</strong></p>

<p>情况描述：</p>

<pre><code>正则表达式的回溯开销较大。
</code></pre>

<hr />

<p><strong>避免在循环内做运算</strong></p>

<p>情况描述:</p>

<pre><code>循环内的计算式将会被重复计算
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>  <span class="nv">$str</span><span class="o">=</span><span class="s2">&quot;Hello World!&quot;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$str</span><span class="p">);</span><span class="nv">$i</span><span class="o">++</span><span class="p">){</span><span class="c1">//每次循环都会计算这个字符串的长度</span>
</span><span class='line'>      <span class="c1">//do something</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>改进：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>  <span class="nv">$str</span><span class="o">=</span><span class="s2">&quot;Hello World!&quot;</span>
</span><span class='line'>  <span class="nv">$strlen</span><span class="o">=</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$str</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="nv">$strlen</span><span class="p">;</span><span class="nv">$i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//do something</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>减少计算密集型业务</strong></p>

<p>情况描述：</p>

<pre><code>PHP的语言特性决定了PHP不适合密集型运算的场景。
因为PHP是基于C语言的，所以在处理大型运算的时候开销是比C大很多的。
</code></pre>

<p>适合的场景：</p>

<pre><code>衔接Webserver与后端服务，UI呈现。
</code></pre>

<hr />

<p><strong>务必使用带引号字符串做键值</strong></p>

<p>情况描述：</p>

<pre><code>PHP会将没有引号的键值当做常量，产生查找常量的开销。
</code></pre>

<hr />

<h1>三、PHP周边问题的性能优化</h1>

<p><strong>Linux 运行环境</strong></p>

<p><strong>减少文件类的操作</strong></p>

<p>常见PHP场景的开销次序：</p>

<pre><code>读写内存&lt;&lt;读写数据库（数据库有内存缓存）&lt;读写磁盘&lt;读写网络数据（网络延迟）
</code></pre>

<hr />

<p><strong>优化网络请求</strong></p>

<p>可能的问题：
    1. 对方接口的不确定因素
    2. 网络稳定性</p>

<p>优化：</p>

<pre><code>1. 设置超时时间
    连接超时（２００ｍｓ）
    读超时（８００ｍｓ）
    写超时（５００ｍｓ）
２.　串行请求并行化
    使用curl_multi_*() //取决于最长的连接时间所以不推荐
    使用swoole扩展　　
</code></pre>

<hr />

<p><strong>压缩PHP接口输出</strong></p>

<p>使用Gzip压缩即可</p>

<p>优点：</p>

<pre><code>利于我们的数据输出，Client能更快获取数据
</code></pre>

<p>缺点：</p>

<pre><code>产生cpu额外开销
</code></pre>

<p>可以考虑当数据大于多少时再使用压缩来优化。</p>

<hr />

<p><strong>缓存重复计算的内容</strong></p>

<p>什么情况下：</p>

<pre><code>多次请求，内容不变 //使用模板渲染缓存 如smarty 开启caching
</code></pre>

<hr />

<p><strong>重叠时间窗口思想和旁路方案</strong></p>

<pre><code>在几个任务不强依赖前一个任务的输出或者返回时。可以在上一个任务没完成时就执行下一个任务
</code></pre>

<hr />

<h1>四、PHP性能分析</h1>

<p><strong>用XHPorf进行PHP性能问题的具体分析</strong></p>

<p>XHPorf：源自Facebook的PHP性能优化工具
其他工具：</p>

<pre><code>ab -压力测试
vld -opcode 代码分析
</code></pre>

<p><a href="http://www.imooc.com/video/4275">here</a></p>

<h1>五、PHP性能瓶颈究极办法</h1>

<p>Opcode Cache ： PHP扩展APC，memcache</p>

<p>通过PHP扩展代替原PHP代码中高频逻辑</p>

<p>Runtime优化： HHVM</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octpress自定义配置和主题安装]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/30/config-themes-octpress/"/>
    <updated>2016-04-30T20:57:43+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/30/config-themes-octpress</id>
    <content type="html"><![CDATA[<blockquote><p>Octpress 基本配置</p></blockquote>

<p>在_config.yml文件中。可以直接修改title，author等基本信息。</p>

<pre class="prettyprint text">
# ----------------------- #
#      Main Configs       #
# ----------------------- #

url: http://ewanreton.github.io
title: Ewan Reton 
subtitle: Never be touched by yourself
author: Ewan Reton
simple_search: https://www.baidu.com
description: 

# Default date format is "ordinal" (resulting in "July 22nd 2007")
# You can customize the format as defined in
# http://www.ruby-doc.org/core-1.9.2/Time.html#method-i-strftime
# Additionally, %o will give you the ordinal representation of the day
date_format: "ordinal"

# RSS / Email (optional) subscription links (change if using something like Feedburner)
subscribe_rss: /atom.xml
subscribe_email:
# RSS feeds can list your email address if you like
email: liukedi001@gmail.com
</pre>


<p>下一部分的Jekyll &amp; Plugins 在没有对Octpress进行深入了解时不介意修改。
在下一部分的3rd Party Settings   就是一些部件的配置，我们今天主要的内容就是涉及这一块的配置。</p>

<blockquote><p>使用第三方插件</p></blockquote>

<ul>
<li>增加评论功能</li>
<li>增加社会化分享</li>
<li>自定义404页面</li>
<li>自定义导航</li>
</ul>


<blockquote><p>增加评论</p></blockquote>

<pre><code>默认使用discuss，但是由于discuss在国内使用效果不好所以用国内多说来替代
</code></pre>

<ol>
<li>在多说网站注册过后，在工具->获取代码 将这块代码复制。</li>
<li>在配置文件中添加</li>
</ol>


<pre class="prettyprint text">
    #duoshuo
    duoshuo_comment = true //开启多说
    在sourse 中 找到_layout post.html
</pre>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="o">.</span><span class="nx">disqus_short_name</span> <span class="k">and</span> <span class="nx">page</span><span class="o">.</span><span class="nx">comments</span> <span class="o">==</span> <span class="k">true</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">section</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;comment&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;title&quot;</span><span class="o">&gt;</span><span class="nx">Comments</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;disqus_thread&quot;</span> <span class="nx">aria</span><span class="o">-</span><span class="nx">live</span><span class="o">=</span><span class="s2">&quot;polite&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="o">%</span> <span class="k">include</span> <span class="nx">post</span><span class="o">/</span><span class="nx">disqus_thread</span><span class="o">.</span><span class="nx">html</span> <span class="o">%</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">section</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="k">endif</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<pre class="prettyprint text">
    将其中的site.disqus_short_name and page.comments改为我们刚刚配置的duoshuo_comment
    并将其中引用的文件disqus_thread.html改为duoshuo_comment.html
    如下：
</pre>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">duoshuo_comment</span> <span class="o">==</span> <span class="k">true</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">section</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;comment&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;title&quot;</span><span class="o">&gt;</span><span class="nx">Comments</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;disqus_thread&quot;</span> <span class="nx">aria</span><span class="o">-</span><span class="nx">live</span><span class="o">=</span><span class="s2">&quot;polite&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="o">%</span> <span class="k">include</span> <span class="nx">post</span><span class="o">/</span><span class="nx">duoshuo_comment</span><span class="o">.</span><span class="nx">html</span> <span class="o">%</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">section</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="k">endif</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>并修改duoshuo_comment.html的内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- 多说评论框 start --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ds-thread&quot;</span> <span class="na">data-thread-key=</span><span class="s">&quot;/blog/2016/04/30/config-themes-octpress&quot;</span> <span class="na">data-title=</span><span class="s">&quot;Octpress自定义配置和主题安装&quot;</span> <span class="na">data-url=</span><span class="s">&quot;http://ewanreton.github.io/blog/2016/04/30/config-themes-octpress/&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="c">&lt;!-- 多说评论框 end --&gt;</span>
</span><span class='line'><span class="c">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">duoshuoQuery</span> <span class="o">=</span> <span class="p">{</span><span class="nx">short_name</span><span class="o">:</span><span class="s2">&quot;ewanreton&quot;</span><span class="p">};</span>
</span><span class='line'>  <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">ds</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">ds</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text/javascript&#39;</span><span class="p">;</span><span class="nx">ds</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">ds</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span> <span class="o">==</span> <span class="s1">&#39;https:&#39;</span> <span class="o">?</span> <span class="s1">&#39;https:&#39;</span> <span class="o">:</span> <span class="s1">&#39;http:&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;//static.duoshuo.com/embed.js&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">ds</span><span class="p">.</span><span class="nx">charset</span> <span class="o">=</span> <span class="s1">&#39;UTF-8&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>       <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">ds</span><span class="p">);</span>
</span><span class='line'>  <span class="p">})();</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="c">&lt;!-- 多说公共JS代码 end --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>社会化分享</p></blockquote>

<p>同上一样，先在_config.yml中添加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">#jiashare</span>
</span><span class='line'><span class="nx">jia_share</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>打开source->_include->post->sharing.html</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;sharing&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="o">.</span><span class="nx">facebook_like</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;addthis_button_facebook_like&quot;</span> <span class="nx">fb</span><span class="o">:</span><span class="nx">like</span><span class="o">:</span><span class="nx">layout</span><span class="o">=</span><span class="s2">&quot;button_count&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="k">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="o">.</span><span class="nx">twitter_tweet_button</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;addthis_button_tweet&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="k">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="o">.</span><span class="nx">google_plus_one</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;addthis_button_google_plusone&quot;</span> <span class="nx">g</span><span class="o">:</span><span class="nx">plusone</span><span class="o">:</span><span class="nx">size</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="k">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加代码。如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;sharing&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="o">.</span><span class="nx">facebook_like</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;addthis_button_facebook_like&quot;</span> <span class="nx">fb</span><span class="o">:</span><span class="nx">like</span><span class="o">:</span><span class="nx">layout</span><span class="o">=</span><span class="s2">&quot;button_count&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="k">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="o">.</span><span class="nx">twitter_tweet_button</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;addthis_button_tweet&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="k">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="o">.</span><span class="nx">google_plus_one</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;addthis_button_google_plusone&quot;</span> <span class="nx">g</span><span class="o">:</span><span class="nx">plusone</span><span class="o">:</span><span class="nx">size</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="k">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="o">.</span><span class="nx">jia_share</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="k">include</span> <span class="nx">post</span><span class="o">/</span><span class="nx">jia_share</span><span class="o">.</span><span class="nx">html</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="k">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>并创建jia_share.html</p>

<figure class='code'><figcaption><span>这段代码在jiathis网站获取</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- JiaThis Button BEGIN --&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;jiathis_style_32x32&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;jiathis_button_qzone&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;jiathis_button_tsina&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;jiathis_button_tqq&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;jiathis_button_weixin&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;jiathis_button_renren&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.jiathis.com/share&quot;</span> <span class="na">class=</span><span class="s">&quot;jiathis jiathis_txt jtico jtico_jiathis&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;jiathis_counter_style&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://v3.jiathis.com/code/jia.js&quot;</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">&lt;!-- JiaThis Button END --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>自定义404页面</p></blockquote>

<p>直接打开source下的404.markdown进行编辑即可</p>

<blockquote><p>自定义导航</p></blockquote>

<p>新建一个页面 rake new_page[&lsquo;about me&rsquo;];</p>

<p>在source->_inlcude->custom->navigation.html</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;main&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;/&quot;</span><span class="o">&gt;</span><span class="nx">Blog</span><span class="o">&lt;/</span><span class="nx">a</span><span class="o">&gt;&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;/blog/archives&quot;</span><span class="o">&gt;</span><span class="nx">Archives</span><span class="o">&lt;/</span><span class="nx">a</span><span class="o">&gt;&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;main&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;/&quot;</span><span class="o">&gt;</span><span class="nx">Blog</span><span class="o">&lt;/</span><span class="nx">a</span><span class="o">&gt;&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;/blog/archives&quot;</span><span class="o">&gt;</span><span class="nx">Archives</span><span class="o">&lt;/</span><span class="nx">a</span><span class="o">&gt;&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;/aboutme&quot;</span><span class="o">&gt;</span><span class="nx">About</span> <span class="nx">Me</span><span class="o">&lt;/</span><span class="nx">a</span><span class="o">&gt;&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>安装使用主题</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'> <span class="nx">到GitHub上找主题文件</span>
</span><span class='line'> <span class="nx">git</span> <span class="k">clone</span> <span class="nx">git：</span><span class="c1">//github.com/tommy351/Octopress-Theme-Slash.git .themes/slash //会在theme主题下生成对应名称的文件夹</span>
</span><span class='line'> <span class="nx">rake</span> <span class="nx">install</span> <span class="p">[</span><span class="s1">&#39;主题名称&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong>
    在上面安装主题前记得备份，因为安装主题过后你之前配置的信息都会被重置（如评论和分享）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress代码高亮问题（Windows10）]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/30/octopress-code-highlight/"/>
    <updated>2016-04-30T00:57:01+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/30/octopress-code-highlight</id>
    <content type="html"><![CDATA[<blockquote><p>首先我要用祭出一段代码。。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s2">&quot;Octopress 的代码高亮真的真的有坑！！！&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>之前在写博客的时候就有发现，我的用markdown语法写出来的代码好像是和别人的不一样。后来发现是我的代码没有用高亮。人家也是一个有追求的PHPer（尴尬脸）。我就查markdown语法啊。
语法是这样给我说的</p>

<p><strong>markdown 语法实现代码高亮有两种方法</strong></p>

<pre><code>1  ```[language] [title] [url] [link text]
     code snippet
   ```
2 {\% codeblock [title] [lang:language] [url] [link text] \%}
    code snippet
{\% endcodeblock \%}
</code></pre>

<p>唉，原来这么简单。改代码走起->rake generate ->reke deploy</p>

<p>去看看我可爱的带颜色的代码呢。</p>

<p>！！！！！
为什么我的博客一片空白了！！！</p>

<p>然后我去度娘，去google。。</p>

<p>终于找到跟我一样懵逼的小伙伴<a href="http://www.tuicool.com/articles/myqIba">戳过去同情他</a></p>

<hr />

<blockquote><p>按照这个小伙伴的思路我开始装Python</p></blockquote>

<p>我装的是<a href="https://www.python.org/downloads/release/python-2711/">Python2.7.11</a> 选择 Windows x86-64 MSI installer下载。然后一直下一步安装。</p>

<blockquote><p>安装完成后添加环境变量
<a href="http://www.blogjava.net/lishunli/archive/2012/03/18/372115.html">这个博客可以参考</a>
鼠标右击我的电脑，选择属性，再选择高级系统设置，右下角有一个环境变量，点进去</p></blockquote>

<p><img src="https://pic1.zhimg.com/6afe9ded178646e6c71e0c3fd908bdb8_b.jpg" alt="1" /></p>

<p>找到path项，选择编辑，把你的Python安装路径(如：C:\Python27)输入进去，注意要用一个 ; 符号与前面的路径分开，再点确定就可以了。完事后可以运行cmd，输入python，如下显示就是成功了
<img src="https://pic4.zhimg.com/7c56fca865253473857066067a0c053b_b.jpg" alt="2" /></p>

<blockquote><p>这个时候突然发现了另一篇博文</p></blockquote>

<p>这个博文看起来要简单点<a href="http://www.cnblogs.com/oec2003/archive/2013/05/27/3100896.html">传送门</a></p>

<blockquote><p>按照下一篇博文的方法</p></blockquote>

<pre class="prettyprint text">
安装Python
安装Python,也是一路next就可以，博客的代码高亮用到了Python的Pygments模块，在Python中安装第三方库需要使用easy_install，在下面地址下载跟Python相对应的安装程序安装后就可以使用easy_install了。

https://pypi.python.org/pypi/setuptools
easy_install会安装在Python安装目录的Scripts目录中，例如我的Python目录是C:\Python27，所以需要将C:\Python27\Scripts目录加入到环境变量中才能在命令提示符中使用easy_install命令。

在命令提示符中输入如下命令就可以安装Pygments了。

easy_install pygments
</pre>


<p><a href="https://pypi.python.org/pypi/setuptools">https://pypi.python.org/pypi/setuptools</a>去找到Windows (simplified)又懵逼了。它给了一段代码需要自己编译运行<a href="https://bootstrap.pypa.io/ez_setup.py">ez_setup.py</a>新建文本文档将网页上的代码全部粘贴下来，保存重命名为ez_setup.py</p>

<pre class="prettyprint text">
 Win+R
 cmd
 进到你刚刚保存的那文件的路径
 python ez_setup.py //安装easy_install
 等到安装完成过后
 将C:\Python27\Scripts目录加入到环境变量中前面的C:\Python27\和你之前添加的Python的环境变量一样
 easy_install pygments
 等到这一步完成后，基本就算大工告成了
</pre>


<p> 如果你还是出现相同问题的话，那请找网管重启机器。</p>

<hr />

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>  <span class="k">echo</span><span class="s2">&quot;不出意外的话你的问题也应该解决了。</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">echo</span><span class="s2">&quot;你看我是不是一段有颜色的代码啊！&quot;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h1>后记</h1>

<blockquote><p>在解决上述问题的过程中，了解到另一种代码高亮的方法</p></blockquote>

<p><a href="http://jingyan.baidu.com/article/67508eb4e660ed9cca1ce4ec.html">请戳这里</a></p>

<p>使用google-code-prettify可以用来很方便地对网页中的程序代码进行高亮显示,从而在视觉上使得网页上的代码看得比较舒服,这对网站站长来说是很重要的。</p>

<p>有两种方法来启用google-code-prettify,下面简要介绍一下步骤。</p>

<blockquote><p>方法一</p></blockquote>

<p>(1) 从<a href="https://code.google.com/p/google-code-prettify/downloads/list%E4%B8%AD%E4%B8%8B%E8%BD%BD%E6%88%96%E8%80%85%E4%BB%8Ehttp://www.colafile.com/file/145953">https://code.google.com/p/google-code-prettify/downloads/list%E4%B8%AD%E4%B8%8B%E8%BD%BD%E6%88%96%E8%80%85%E4%BB%8Ehttp://www.colafile.com/file/145953</a> 中打包下载pretty.css以及pretty.js,并保存到本地服务器的相应目录中来引用</p>

<p>(2) 引用pretty.css以及pretty.js,然后在网页中引用,引用方法为</p>

<pre><code>&lt;link href="你保存的目录/prettify.css" type="text/css" rel="stylesheet" /&gt;

&lt;script type="text/javascript" src="你保存的目录/prettify.js"&gt;&lt;/script&gt;
</code></pre>

<p>(3)</p>

<pre><code>&lt;body&gt;标签改为&lt;body onload="prettyPrint()"&gt;
</code></pre>

<p>(4) 将源代码用标签</p>

<pre><code>&lt;pre class="prettyprint"&gt;这是你的代码&lt;/pre&gt;
</code></pre>

<p>包含起来,例如</p>

<pre><code>&lt;pre class="prettyprint"&gt;

#include "x.h"

main(){

 print("hello world!");

}

&lt;/pre&gt;
</code></pre>

<p>相应的显示效果为:</p>

<h2><img src="http://hiphotos.baidu.com/exp/pic/item/0fb505d5ad6eddc4ef4d78d73bdbb6fd52663331.jpg" alt="3" /></h2>

<blockquote><p>方法二</p></blockquote>

<p>(1) 到网址 <a href="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js">https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js</a> 中或者从<a href="http://www.colafile.com/file/145957">http://www.colafile.com/file/145957</a> 下载run_prettify.js文件</p>

<p>(2) 引用run_prettify.js文件,方法为</p>

<pre><code>&lt;script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js"&gt;&lt;/script&gt;
</code></pre>

<p>或者</p>

<pre><code>&lt;script src="你保存的目录/run_prettify.js"&gt;&lt;/script&gt;
</code></pre>

<p>(3) 将源代码用标签</p>

<pre><code>&lt;pre class="prettyprint"&gt;这是你的代码&lt;/pre&gt;
</code></pre>

<p>包含起来,例如</p>

<pre><code>&lt;pre class="prettyprint"&gt;

#include "x.h"

main(){

    print("hello world!");

}

&lt;/pre&gt;
</code></pre>

<p>相应的显示效果为:</p>

<p><img src="http://hiphotos.baidu.com/exp/pic/item/72ccb7773912b31b40ea01058418367adbb4e1de.jpg" alt="4" /></p>

<p>如果你有更高的使用要求，可以到<a href="https://code.google.com/p/google-code-prettify/wiki/GettingStarted">https://code.google.com/p/google-code-prettify/wiki/GettingStarted</a>这个网页中看更高级的使用方法</p>

<h1>但是</h1>

<p>这种方法在使用过程中，当是PHP代码时：如</p>

<pre><code>&lt;pre class="prettyprint php"&gt;
    &lt;?php
        echo "test!";
    ?&gt;
&lt;/pre&gt;
</code></pre>

<p>这样在实际的显示过程中只有块黑色的代码块，代码并没解析出来。</p>

<p>改成如下格式就能正常实现代码高亮效果。</p>

<pre><code>    &lt;pre class="prettyprint php"&gt;
        //去掉了PHP的开始和结束符
        echo "test!";

    &lt;/pre&gt;
</code></pre>

<p>我没有去具体研究这个原理，不过我推测是因为PHP的开始副 &lt;?  和pre的开始结束符产生了混乱不能正确匹配，从而导致解析失败。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决 Octopress 警告 Layout Nil Requested]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/29/fix-octopress-build-warning-layout-nil-requested/"/>
    <updated>2016-04-29T23:08:07+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/29/fix-octopress-build-warning-layout-nil-requested</id>
    <content type="html"><![CDATA[<blockquote><p>给Octopress换了主题过后重新generate会出警告Layout Nil Requested。</p></blockquote>

<p>主要原因是对于 nill 值无法判断导致的问题，只要将有出现错误的档案將 nill 改成 null 即可</p>

<p>Fix this error by replacing from file:</p>

<blockquote><p>layout: nil</p></blockquote>

<p>with:</p>

<blockquote><p>layout: null</p></blockquote>

<p>in files:</p>

<ul>
<li>source/atom.xml</li>
<li>source/_includes/custom/category_feed.xml</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP高性能日志SeasLog]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/29/php-seaslog/"/>
    <updated>2016-04-29T09:59:55+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/29/php-seaslog</id>
    <content type="html"><![CDATA[<blockquote><p>PHP高性能日志SeasLog</p></blockquote>

<h1>一、什么是SeasLog</h1>

<p>SeasLog是一个C语言编写的PHP扩展，提供一组规范标准的功能函数，在PHP项目中方便、规范、高效地写日志，以及快速地读取和查询日志。</p>

<h1>二、为什么需要日志系统</h1>

<ol>
<li>了解系统运行情况</li>
<li>记录用户操作信息</li>
<li>收集需要</li>
</ol>


<h1>三、为什么选择SeasLog</h1>

<ol>
<li>高性能 带有缓冲池功能。</li>
<li>无需配置</li>
<li>功能完善，使用简单

<h1>四、SeasLog安装</h1>

<p> 到<a href="http://pecl.php.net/">pecl</a>搜索seaslog并下载
 解压后
 可自行编译。</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd seaslog //进到解压目录
</span><span class='line'>$ phpize
</span><span class='line'>$ ./configure --with-php-config=/path/to/php-config //path to 为你的PHP安装目录
</span><span class='line'>$ make && make install
</span><span class='line'>当然，使用PECL管理工具会更方便：
</span><span class='line'>$ pecl install seaslog</span></code></pre></td></tr></table></div></figure>


<h2>seaslog.ini的配置</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; configuration for php SeasLog module 
</span><span class='line'>extension = seaslog.so 
</span><span class='line'>seaslog.default_basepath = /log/seaslog-test    ;默认log根目录 
</span><span class='line'>seaslog.default_logger = default                ;默认logger目录 
</span><span class='line'>seaslog.disting_type = 1                            ;是否以type分文件 1是 0否(默认) 
</span><span class='line'>seaslog.disting_by_hour = 1                      ;是否每小时划分一个文件 1是 0否(默认) 
</span><span class='line'>seaslog.use_buffer = 1                              ;是否启用buffer 1是 0否(默认) 
</span><span class='line'>seaslog.buffer_size = 100                         ;buffer中缓冲数量 默认0(不使用buffer_size) 
</span><span class='line'>seaslog.level = 0                                       ;记录日志级别 默认0(所有日志)</span></code></pre></td></tr></table></div></figure>


<p><strong>需要将这里面的数据写到php.ini中去</strong></p>

<pre><code>seaslog.disting_type = 1 开启以type分文件，即log文件区分info\warn\erro
seaslog.disting_by_hour = 1 开启每小时划分一个文件
seaslog.use_buffer = 1 开启buffer。默认关闭。当开启此项时，日志预存于内存，当请求结束时(或异常退出时)一次写入文件。
seaslog.buffer_size = 100 设置缓冲数量为100. 默认为0,即无缓冲数量限制.当buffer_size大于0时,缓冲量达到该值则写一次文件.
seaslog.level = 3 记录的日志级别.默认为0,即所有日志均记录。当level为1时,关注debug以上级别(包括debug)，以此类推。level大于8时，所有日志均不记录。
</code></pre>

<h2>默认常量有哪些</h2>

<p>遵循PSR-3标准，SeasLog 共将日志分成8个级别</p>

<pre><code>SEASLOG_DEBUG "debug"
SEASLOG_INFO "info"
SEASLOG_NOTICE "notice"
SEASLOG_WARNING "warning"
SEASLOG_ERROR "error"
SEASLOG_CRITICAL "critical"
SEASLOG_ALERT "alert"
SEASLOG_EMERGENCY "emergency"
</code></pre>

<h2>都提供哪些方法</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>&lt;?php 
</span><span class='line'>/** 
</span><span class='line'> * @author neeke@php.net 云智慧 
</span><span class='line'> */ 
</span><span class='line'> 
</span><span class='line'>class SeasLog 
</span><span class='line'>{ 
</span><span class='line'>    public function __construct() 
</span><span class='line'>    { 
</span><span class='line'>        #SeasLog init 
</span><span class='line'>    } 
</span><span class='line'> 
</span><span class='line'>    public function __destruct() 
</span><span class='line'>    { 
</span><span class='line'>        #SeasLog distroy 
</span><span class='line'>    } 
</span><span class='line'> 
</span><span class='line'>    /** 
</span><span class='line'>     * 设置basePath 
</span><span class='line'>     * @param $basePath 
</span><span class='line'>     * @return bool 
</span><span class='line'>     */ 
</span><span class='line'>    static public function setBasePath($basePath) 
</span><span class='line'>    { 
</span><span class='line'>        return TRUE; 
</span><span class='line'>    } 
</span><span class='line'> 
</span><span class='line'>    /** 
</span><span class='line'>     * 获取basePath 
</span><span class='line'>     * @return string 
</span><span class='line'>     */ 
</span><span class='line'>    static public function getBasePath() 
</span><span class='line'>    { 
</span><span class='line'>        return 'the base_path'; 
</span><span class='line'>    } 
</span><span class='line'> 
</span><span class='line'>    /** 
</span><span class='line'>     * 设置模块目录 
</span><span class='line'>     * @param $module 
</span><span class='line'>     * @return bool 
</span><span class='line'>     */ 
</span><span class='line'>    static public function setLogger($module) 
</span><span class='line'>    { 
</span><span class='line'>        return TRUE; 
</span><span class='line'>    } 
</span><span class='line'> 
</span><span class='line'>    /** 
</span><span class='line'>     * 获取最后一次设置的模块目录 
</span><span class='line'>     * @return string 
</span><span class='line'>     */ 
</span><span class='line'>    static public function getLastLogger() 
</span><span class='line'>    { 
</span><span class='line'>        return 'the lastLogger'; 
</span><span class='line'>    } 
</span><span class='line'> 
</span><span class='line'>    /** 
</span><span class='line'>     * 统计所有类型（或单个类型）行数 
</span><span class='line'>     * @param string $level 
</span><span class='line'>     * @param string $log_path 
</span><span class='line'>     * @param null $key_word 
</span><span class='line'>     * @return array | long 
</span><span class='line'>     */ 
</span><span class='line'>    static public function analyzerCount($level = 'all',$log_path = '*',$key_word = NULL) 
</span><span class='line'>    { 
</span><span class='line'>        return array(); 
</span><span class='line'>    } 
</span><span class='line'> 
</span><span class='line'>    /** 
</span><span class='line'>     * 以数组形式，快速取出某类型log的各行详情 
</span><span class='line'>     * @param $level 
</span><span class='line'>     * @param string $log_path 
</span><span class='line'>     * @param null $key_word 
</span><span class='line'>     * @param int $start 
</span><span class='line'>     * @param int $limit 
</span><span class='line'>     * @return array 
</span><span class='line'>     */ 
</span><span class='line'>    static public function analyzerDetail($level = SEASLOG_INFO,$log_path = '*',$key_word = NULL, $start = 1,$limit = 20) 
</span><span class='line'>    { 
</span><span class='line'>        return array(); 
</span><span class='line'>    } 
</span><span class='line'> 
</span><span class='line'>    /** 
</span><span class='line'>     * 获得当前日志buffer中的内容 
</span><span class='line'>     * @return array 
</span><span class='line'>     */ 
</span><span class='line'>    static public function getBuffer() 
</span><span class='line'>    { 
</span><span class='line'>        return array(); 
</span><span class='line'>    } 
</span><span class='line'> 
</span><span class='line'>    /** 
</span><span class='line'>     * 记录debug日志 
</span><span class='line'>     * @param $message 
</span><span class='line'>     * @param array $content 
</span><span class='line'>     * @param string $module 
</span><span class='line'>     */ 
</span><span class='line'>    static public function debug($message,array $content = array(),$module = '') 
</span><span class='line'>    { 
</span><span class='line'>        #$level = SEASLOG_DEBUG 
</span><span class='line'>    } 
</span><span class='line'> 
</span><span class='line'>    /** 
</span><span class='line'>     * 记录info日志 
</span><span class='line'>     * @param $message 
</span><span class='line'>     * @param array $content 
</span><span class='line'>     * @param string $module 
</span><span class='line'>     */ 
</span><span class='line'>    static public function info($message,array $content = array(),$module = '') 
</span><span class='line'>    { 
</span><span class='line'>        #$level = SEASLOG_INFO 
</span><span class='line'>    } 
</span><span class='line'> 
</span><span class='line'>    /** 
</span><span class='line'>     * 记录notice日志 
</span><span class='line'>     * @param $message 
</span><span class='line'>     * @param array $content 
</span><span class='line'>     * @param string $module 
</span><span class='line'>     */ 
</span><span class='line'>    static public function notice($message,array $content = array(),$module = '') 
</span><span class='line'>    { 
</span><span class='line'>        #$level = SEASLOG_NOTICE 
</span><span class='line'>    } 
</span><span class='line'> 
</span><span class='line'>    /** 
</span><span class='line'>     * 记录warning日志 
</span><span class='line'>     * @param $message 
</span><span class='line'>     * @param array $content 
</span><span class='line'>     * @param string $module 
</span><span class='line'>     */ 
</span><span class='line'>    static public function warning($message,array $content = array(),$module = '') 
</span><span class='line'>    { 
</span><span class='line'>        #$level = SEASLOG_WARNING 
</span><span class='line'>    } 
</span><span class='line'> 
</span><span class='line'>    /** 
</span><span class='line'>     * 记录error日志 
</span><span class='line'>     * @param $message 
</span><span class='line'>     * @param array $content 
</span><span class='line'>     * @param string $module 
</span><span class='line'>     */ 
</span><span class='line'>    static public function error($message,array $content = array(),$module = '') 
</span><span class='line'>    { 
</span><span class='line'>        #$level = SEASLOG_ERROR 
</span><span class='line'>    } 
</span><span class='line'> 
</span><span class='line'>    /** 
</span><span class='line'>     * 记录critical日志 
</span><span class='line'>     * @param $message 
</span><span class='line'>     * @param array $content 
</span><span class='line'>     * @param string $module 
</span><span class='line'>     */ 
</span><span class='line'>    static public function critical($message,array $content = array(),$module = '') 
</span><span class='line'>    { 
</span><span class='line'>        #$level = SEASLOG_CRITICAL 
</span><span class='line'>    } 
</span><span class='line'> 
</span><span class='line'>    /** 
</span><span class='line'>     * 记录alert日志 
</span><span class='line'>     * @param $message 
</span><span class='line'>     * @param array $content 
</span><span class='line'>     * @param string $module 
</span><span class='line'>     */ 
</span><span class='line'>    static public function alert($message,array $content = array(),$module = '') 
</span><span class='line'>    { 
</span><span class='line'>        #$level = SEASLOG_ALERT 
</span><span class='line'>    } 
</span><span class='line'> 
</span><span class='line'>    /** 
</span><span class='line'>     * 记录emergency日志 
</span><span class='line'>     * @param $message 
</span><span class='line'>     * @param array $content 
</span><span class='line'>     * @param string $module 
</span><span class='line'>     */ 
</span><span class='line'>    static public function emergency($message,array $content = array(),$module = '') 
</span><span class='line'>    { 
</span><span class='line'>        #$level = SEASLOG_EMERGENCY 
</span><span class='line'>    } 
</span><span class='line'> 
</span><span class='line'>    /** 
</span><span class='line'>     * 通用日志方法 
</span><span class='line'>     * @param $level 
</span><span class='line'>     * @param $message 
</span><span class='line'>     * @param array $content 
</span><span class='line'>     * @param string $module 
</span><span class='line'>     */ 
</span><span class='line'>    static public function log($level,$message,array $content = array(),$module = '') 
</span><span class='line'>    { 
</span><span class='line'> 
</span><span class='line'>    } 
</span><span class='line'>} </span></code></pre></td></tr></table></div></figure>


<h2>在项目中如何使用</h2>

<blockquote><p>获取与设置basePatn</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> *静态方法可以不实例化直接使用
</span><span class='line'> *
</span><span class='line'> */
</span><span class='line'>$basePath_1 = SeasLog::getBasePath(); 
</span><span class='line'> 
</span><span class='line'>SeasLog::setBasePath('/log/base_test'); 
</span><span class='line'>$basePath_2 = SeasLog::getBasePath(); 
</span><span class='line'> 
</span><span class='line'>var_dump($basePath_1,$basePath_2); 
</span><span class='line'> 
</span><span class='line'>/* 
</span><span class='line'>string(19) "/log/seaslog-ciogao" 
</span><span class='line'>string(14) "/log/base_test" 
</span><span class='line'>*/ </span></code></pre></td></tr></table></div></figure>


<p>直接使用 SeasLog::getBasePath()，将获取php.ini(seaslog.ini)中设置的seaslog.default_basepath 的值。</p>

<p>使用 SeasLog::getBasePath() 函数，将改变 seaslog_get_basepath() 的取值。</p>

<blockquote><p>设置logger与获取lastLogger</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$lastLogger_1 = SeasLog::getLastLogger(); 
</span><span class='line'> 
</span><span class='line'>SeasLog::setLogger('testModule/app1'); 
</span><span class='line'>$lastLogger_2 = SeasLog::getLastLogger(); 
</span><span class='line'> 
</span><span class='line'>var_dump($lastLogger_1,$lastLogger_2); 
</span><span class='line'>/* 
</span><span class='line'>string(7) "default" 
</span><span class='line'>string(15) "testModule/app1" 
</span><span class='line'>*/ </span></code></pre></td></tr></table></div></figure>


<p>与basePath相类似的，
直接使用 SeasLog::getLastLogger()，将获取php.ini(seaslog.ini)中设置的seaslog.default_logger 的值。</p>

<p>使用 SeasLog::setLogger() 函数，将改变 SeasLog::getLastLogger() 的取值。</p>

<h2>SeasLog Logger的使用</h2>

<blockquote><p>获取与设置basePath</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$basePath_1 = SeasLog::getBasePath();
</span><span class='line'>
</span><span class='line'>SeasLog::setBasePath('/log/base_test');
</span><span class='line'>$basePath_2 = SeasLog::getBasePath();
</span><span class='line'>
</span><span class='line'>var_dump($basePath_1,$basePath_2);
</span><span class='line'>
</span><span class='line'>/*
</span><span class='line'>string(19) "/log/seaslog-ciogao"
</span><span class='line'>string(14) "/log/base_test"
</span><span class='line'>*/</span></code></pre></td></tr></table></div></figure>


<p>直接使用 SeasLog::getBasePath()，将获取php.ini(seaslog.ini)中设置的 seaslog.default_basepath 的值。</p>

<p>使用 SeasLog::setBasePath() 函数，将改变 SeasLog::getBasePath() 的取值。</p>

<blockquote><p>设置logger与获取lastLogger</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$lastLogger_1 = SeasLog::getLastLogger();
</span><span class='line'>
</span><span class='line'>SeasLog::setLogger('testModule/app1');
</span><span class='line'>$lastLogger_2 = SeasLog::getLastLogger();
</span><span class='line'>
</span><span class='line'>var_dump($lastLogger_1,$lastLogger_2);
</span><span class='line'>/*
</span><span class='line'>string(7) "default"
</span><span class='line'>string(15) "testModule/app1"
</span><span class='line'>*/</span></code></pre></td></tr></table></div></figure>


<p>与basePath相类似的，</p>

<p>直接使用 SeasLog::getLastLogger()，将获取php.ini(seaslog.ini)中设置的 seaslog.default_logger 的值。</p>

<p>使用 SeasLog::setLogger() 函数，将改变 SeasLog::getLastLogger() 的取值。
快速写入log</p>

<p>上面已经设置过了basePath与logger，于是log记录的目录已经产生了，</p>

<p>log记录目录 = basePath / logger / {fileName}.log log文件名，以 年月日 分文件，如今天是2014年02月18日期，那么 {fileName} = 20140218;
还记得 php.ini 中设置的 seaslog.disting_type 吗？</p>

<p>默认的 seaslog.disting_type = 0，如果今天我使用了 SeasLog ，那么将产生最终的log文件：</p>

<p>*　LogFile = basePath / logger / 20140218.log
如果 seaslog.disting_type = 1，则最终的log文件将是这样的三个文件</p>

<ul>
<li><p>infoLogFile = basePath / logger / INFO.20140218.log</p></li>
<li><p>warnLogFile = basePath / logger / WARN.20140218.log</p></li>
<li><p>erroLogFile = basePath / logger / ERRO.20140218.log</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SeasLog::log(SEASLOG_ERROR,'this is a error test by ::log');
</span><span class='line'>
</span><span class='line'>SeasLog::debug('this is a {userName} debug',array('{userName}' =&gt; 'neeke'));
</span><span class='line'>
</span><span class='line'>SeasLog::info('this is a info log');
</span><span class='line'>
</span><span class='line'>SeasLog::notice('this is a notice log');
</span><span class='line'>
</span><span class='line'>SeasLog::warning('your {website} was down,please {action} it ASAP!',array('{website}' =&gt; 'github.com','{action}' =&gt; 'rboot'));
</span><span class='line'>
</span><span class='line'>SeasLog::error('a error log');
</span><span class='line'>
</span><span class='line'>SeasLog::critical('some thing was critical');
</span><span class='line'>
</span><span class='line'>SeasLog::alert('yes this is a {messageName}',array('{messageName}' =&gt; 'alertMSG'));
</span><span class='line'>
</span><span class='line'>SeasLog::emergency('Just now, the house next door was completely burnt out! {note}',array('{note}' =&gt; 'it`s a joke'));
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>/*
</span><span class='line'>这些函数同时也接受第3个参数为logger的设置项
</span><span class='line'>注意，当last_logger == 'default'时等同于:
</span><span class='line'>SeasLog::setLogger('test/new/path');
</span><span class='line'>SeasLog::error('test error 3');
</span><span class='line'>如果已经在前文使用过SeasLog::setLogger()函数，第3个参数的log只在此处临时使用，不影响下文。
</span><span class='line'>*/</span></code></pre></td></tr></table></div></figure>


<blockquote><p>log格式统一为： {type} | {pid} | {timeStamp} |{dateTime} | {logInfo}</p></blockquote>

<pre><code>error | 23625 | 1406422432.786 | 2014:07:27 08:53:52 | this is a error test by log
debug | 23625 | 1406422432.786 | 2014:07:27 08:53:52 | this is a neeke debug
info | 23625 | 1406422432.787 | 2014:07:27 08:53:52 | this is a info log
notice | 23625 | 1406422432.787 | 2014:07:27 08:53:52 | this is a notice log
warning | 23625 | 1406422432.787 | 2014:07:27 08:53:52 | your github.com was down,please rboot it ASAP!
error | 23625 | 1406422432.787 | 2014:07:27 08:53:52 | a error log
critical | 23625 | 1406422432.787 | 2014:07:27 08:53:52 | some thing was critical
emergency | 23625 | 1406422432.787 | 2014:07:27 08:53:52 | Just now, the house next door was completely burnt out! it is a joke
</code></pre>

<h2>SeasLog Analyzer的使用</h2>

<blockquote><p>快速统计某类型log的count值</p></blockquote>

<p>SeasLog在扩展中使用管道调用shell命令 grep -wc快速地取得count值，并返回值(array || int)给PHP。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$countResult_1 = SeasLog::analyzerCount();
</span><span class='line'>$countResult_2 = SeasLog::analyzerCount(SEASLOG_WARNING);
</span><span class='line'>$countResult_3 = SeasLog::analyzerCount(SEASLOG_ERROR,date('Ymd',time()));
</span><span class='line'>
</span><span class='line'>var_dump($countResult_1,$countResult_2,$countResult_3);
</span><span class='line'>/*
</span><span class='line'>array(8) {
</span><span class='line'>  ["debug"]=&gt;
</span><span class='line'>  int(3)
</span><span class='line'>  ["info"]=&gt;
</span><span class='line'>  int(3)
</span><span class='line'>  ["notice"]=&gt;
</span><span class='line'>  int(3)
</span><span class='line'>  ["warning"]=&gt;
</span><span class='line'>  int(3)
</span><span class='line'>  ["error"]=&gt;
</span><span class='line'>  int(6)
</span><span class='line'>  ["critical"]=&gt;
</span><span class='line'>  int(3)
</span><span class='line'>  ["alert"]=&gt;
</span><span class='line'>  int(3)
</span><span class='line'>  ["emergency"]=&gt;
</span><span class='line'>  int(3)
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int(7)
</span><span class='line'>
</span><span class='line'>int(1)
</span><span class='line'>
</span><span class='line'>*/</span></code></pre></td></tr></table></div></figure>


<blockquote><p>获取某类型log列表</p></blockquote>

<p>SeasLog在扩展中使用管道调用shell命令 grep -w快速地取得列表，并返回array给PHP。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$detailErrorArray_inAll   = SeasLog::analyzerDetail(SEASLOG_ERROR);
</span><span class='line'>$detailErrorArray_today   = SeasLog::analyzerDetail(SEASLOG_ERROR,date('Ymd',time()));
</span><span class='line'>
</span><span class='line'>var_dump($detailErrorArray_inAll,$detailErrorArray_today);
</span><span class='line'>
</span><span class='line'>/*
</span><span class='line'>SeasLog::analyzerDetail(SEASLOG_ERROR) == SeasLog::analyzerDetail(SEASLOG_ERROR,'*');
</span><span class='line'>取当前模块下所有level为 SEASLOG_ERROR 的信息列表:
</span><span class='line'>array(6) {
</span><span class='line'> [0] =&gt;
</span><span class='line'>  string(66) "error | 8568 | 1393172042.717 | 2014:02:24 00:14:02 | test error 3 "
</span><span class='line'>  [1] =&gt;
</span><span class='line'>  string(66) "error | 8594 | 1393172044.104 | 2014:02:24 00:14:04 | test error 3 "
</span><span class='line'>  [2] =&gt;
</span><span class='line'>  string(66) "error | 8620 | 1393172044.862 | 2014:02:24 00:14:04 | test error 3 "
</span><span class='line'>  [3] =&gt;
</span><span class='line'>  string(66) "error | 8646 | 1393172045.989 | 2014:02:24 00:14:05 | test error 3 "
</span><span class='line'>  [4] =&gt;
</span><span class='line'>  string(66) "error | 8672 | 1393172047.882 | 2014:02:24 00:14:07 | test error 3 "
</span><span class='line'>  [5] =&gt;
</span><span class='line'>  string(66) "error | 8698 | 1393172048.736 | 2014:02:24 00:14:08 | test error 3 "
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>SeasLog::analyzerDetail(SEASLOG_ERROR,date('Ymd',time()));
</span><span class='line'>只取得当前模块下，当前一天内,level为SEASLOG_ERROR 的信息列表:
</span><span class='line'>array(2) {
</span><span class='line'>  [0] =&gt;
</span><span class='line'>  string(66) "error | 8568 | 1393172042.717 | 2014:02:24 00:14:02 | test error 3 "
</span><span class='line'>  [1] =&gt;
</span><span class='line'>  string(66) "error | 8594 | 1393172044.104 | 2014:02:24 00:14:04 | test error 3 "
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>同理，取当月
</span><span class='line'>$detailErrorArray_mouth = SeasLog::analyzerDetail(SEASLOG_ERROR,date('Ym',time()));
</span><span class='line'>
</span><span class='line'>*/</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP无限级分类]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/29/wu-xian-ji-fen-lei/"/>
    <updated>2016-04-29T09:36:19+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/29/wu-xian-ji-fen-lei</id>
    <content type="html"><![CDATA[<blockquote><p>PHP无限级分类主要有两种实现方式，通过递归和全路径实现</p></blockquote>

<h1>一、递归实现</h1>

<pre><code>在数据库中存储如下格式的表：
</code></pre>

<table>
<thead>
<tr>
<th>ID</th>
<th style="text-align:center;">pid</th>
<th style="text-align:center;">catename</th>
<th style="text-align:center;">cateorder</th>
<th style="text-align:right;">createtime</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td style="text-align:center;">0</td>
<td style="text-align:center;">新闻</td>
<td style="text-align:center;">0</td>
<td style="text-align:right;">0</td>
</tr>
<tr>
<td>2</td>
<td style="text-align:center;">0</td>
<td style="text-align:center;">图片</td>
<td style="text-align:center;">0</td>
<td style="text-align:right;">0</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">国内新闻</td>
<td style="text-align:center;">0</td>
<td style="text-align:right;">0</td>
</tr>
<tr>
<td>4</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">国际新闻</td>
<td style="text-align:center;">0</td>
<td style="text-align:right;">0</td>
</tr>
<tr>
<td>5</td>
<td style="text-align:center;">3</td>
<td style="text-align:center;">北京新闻</td>
<td style="text-align:center;">0</td>
<td style="text-align:right;">0</td>
</tr>
<tr>
<td>6</td>
<td style="text-align:center;">4</td>
<td style="text-align:center;">美国新闻</td>
<td style="text-align:center;">0</td>
<td style="text-align:right;">0</td>
</tr>
<tr>
<td>7</td>
<td style="text-align:center;">2</td>
<td style="text-align:center;">美女图片</td>
<td style="text-align:center;">0</td>
<td style="text-align:right;">0</td>
</tr>
<tr>
<td>8</td>
<td style="text-align:center;">2</td>
<td style="text-align:center;">风景图片</td>
<td style="text-align:center;">0</td>
<td style="text-align:right;">0</td>
</tr>
</tbody>
</table>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>create table deepcate
</span><span class='line'>(
</span><span class='line'>id int(10) unsigned   not null  auto_increment primary key,
</span><span class='line'>pid   int(11) unsigned    not null,
</span><span class='line'>catename  varchar(30) not null,
</span><span class='line'>cateorder int(11) unsigned    default 0,
</span><span class='line'>createtime    int(10) not null
</span><span class='line'>);
</span><span class='line'>
</span><span class='line'>insert into deepcate(pid,catename,cateorder,createtime)values(0,'新闻',0,0);
</span><span class='line'>insert into deepcate(pid,catename,cateorder,createtime)values(0,'图片',0,0);
</span><span class='line'>insert into deepcate(pid,catename,cateorder,createtime)values(1,'国内新闻',0,0);
</span><span class='line'>insert into deepcate(pid,catename,cateorder,createtime)values(1,'国际新闻',0,0);
</span><span class='line'>insert into deepcate(pid,catename,cateorder,createtime)values(3,'北京新闻',0,0);
</span><span class='line'>insert into deepcate(pid,catename,cateorder,createtime)values(4,'美国新闻',0,0);
</span><span class='line'>insert into deepcate(pid,catename,cateorder,createtime)values(2,'美女图片',0,0);
</span><span class='line'>insert into deepcate(pid,catename,cateorder,createtime)values(2,'风景图片',0,0);
</span><span class='line'>insert into deepcate(pid,catename,cateorder,createtime)values(7,'日韩明星',0,0);
</span><span class='line'>insert into deepcate(pid,catename,cateorder,createtime)values(9,'日本AV',0,0);
</span><span class='line'>
</span><span class='line'>select * from deepcate;</span></code></pre></td></tr></table></div></figure>


<blockquote><p>php 代码实现</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>header("Content-Type:text/html;Charset=UTF-8");
</span><span class='line'>// php无限分类下拉列表的代码实现
</span><span class='line'>include_once('db.inc.php') ;
</span><span class='line'>
</span><span class='line'>function getList($pid=0,&$result=array(),$spac=0)
</span><span class='line'>{
</span><span class='line'>    $spac=$spac+2;
</span><span class='line'>    $sql=" SELECT * FROM deepcate WHERE pid=$pid ";
</span><span class='line'>    $res=mysql_query($sql);
</span><span class='line'>   
</span><span class='line'>    while($row=mysql_fetch_assoc($res)){
</span><span class='line'>        $row['catename']=str_repeat('&nbsp;&nbsp;',$spac).'|--'.$row['catename'];
</span><span class='line'>        $result[]=$row;
</span><span class='line'>        getList($row['id'],$result,$spac);
</span><span class='line'>    }
</span><span class='line'>    return $result;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>function displayCate($pid=0,$selected=0){
</span><span class='line'>     $rs=getList($pid);
</span><span class='line'>     $str="";
</span><span class='line'>     $str.="&lt;select name='cate'&gt;";
</span><span class='line'>    foreach($rs as $v){
</span><span class='line'>        if($v['id']==$selected){
</span><span class='line'>            $selected="selected";
</span><span class='line'>        }
</span><span class='line'>       $str.="&lt;option {$selected}&gt;";
</span><span class='line'>       $str.= $v['catename'];
</span><span class='line'>       $str.= "&lt;/option&gt;";
</span><span class='line'>    }
</span><span class='line'>    return $str.= "&lt;/select&gt;";
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>echo displayCate();
</span><span class='line'>
</span><span class='line'>echo "&lt;hr/&gt;&lt;hr/&gt;";
</span><span class='line'>function getCatePath($cid,&$result){
</span><span class='line'>    $sql="SELECT * FROM deepcate WHERE id=$cid ";
</span><span class='line'>    $rs=mysql_query($sql);
</span><span class='line'>    $row=mysql_fetch_assoc($rs);
</span><span class='line'>    if($row){
</span><span class='line'>        $result[]=$row;
</span><span class='line'>        getCatePath($row['pid'],$result);
</span><span class='line'>    }
</span><span class='line'>    krsort($result);
</span><span class='line'>    return $result;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>function displayCatePath($cid,$url="deepcate.php?cid="){
</span><span class='line'>    $res=getCatePath($cid,$result);
</span><span class='line'>    $str="";
</span><span class='line'>    foreach($res as $v){
</span><span class='line'>        $str.= "&lt;a href='{$url}{$v['id']}'&gt;{$v['catename']}&lt;/a&gt;&gt;&gt;";
</span><span class='line'>    }return $str;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>echo displayCatePath(10);</span></code></pre></td></tr></table></div></figure>


<h1>二、全路径实现</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use imooc;
</span><span class='line'>create table  likecate
</span><span class='line'>(
</span><span class='line'>id    int(11) not null  auto_increment primary key,
</span><span class='line'>path  varchar(200)    not null,
</span><span class='line'>catename  varchar(30) not null,
</span><span class='line'>cateorder int(11) not null    default 0,
</span><span class='line'>createtime    int(11) not null
</span><span class='line'>);
</span><span class='line'>
</span><span class='line'>insert into likecate(path,catename,cateorder,createtime)values('','手机',0,0);
</span><span class='line'>insert into likecate(path,catename,cateorder,createtime)values('1','功能手机',0,0);
</span><span class='line'>insert into likecate(path,catename,cateorder,createtime)values('1,2','老人手机',0,0);
</span><span class='line'>insert into likecate(path,catename,cateorder,createtime)values('1,2','儿童手机',0,0);
</span><span class='line'>insert into likecate(path,catename,cateorder,createtime)values('1','智能手机',0,0);
</span><span class='line'>insert into likecate(path,catename,cateorder,createtime)values('1,5','andriod手机',0,0);
</span><span class='line'>insert into likecate(path,catename,cateorder,createtime)values('1,5','ios手机',0,0);
</span><span class='line'>insert into likecate(path,catename,cateorder,createtime)values('1,5','winphoto手机',0,0);
</span><span class='line'>insert into likecate(path,catename,cateorder,createtime)values('1,2,4','色盲手机',0,0);
</span><span class='line'>insert into likecate(path,catename,cateorder,createtime)values('1,2,3','大字手机',0,0);
</span><span class='line'>
</span><span class='line'>select * from likecate;
</span><span class='line'>
</span><span class='line'>select id,catename,path,concat(path,',',id) as fullpath from likecate where 1 order by fullpath asc;
</span><span class='line'>
</span><span class='line'>#结果显示如图
</span><span class='line'>+----+--------------+-------+----------+
</span><span class='line'>| id | catename     | path  | fullpath |
</span><span class='line'>+----+--------------+-------+----------+
</span><span class='line'>|  1 | 手机         |       | ,1       |
</span><span class='line'>|  2 | 功能手机     | 1     | 1,2      |
</span><span class='line'>|  3 | 老人手机     | 1,2   | 1,2,3    |
</span><span class='line'>| 10 | 大字手机     | 1,2,3 | 1,2,3,10 |
</span><span class='line'>|  4 | 儿童手机     | 1,2   | 1,2,4    |
</span><span class='line'>|  9 | 色盲手机     | 1,2,4 | 1,2,4,9  |
</span><span class='line'>|  5 | 智能手机     | 1     | 1,5      |
</span><span class='line'>|  6 | andriod手机  | 1,5   | 1,5,6    |
</span><span class='line'>|  7 | ios手机      | 1,5   | 1,5,7    |
</span><span class='line'>|  8 | winphoto手机 | 1,5   | 1,5,8    |
</span><span class='line'>+----+--------------+-------+----------+</span></code></pre></td></tr></table></div></figure>


<blockquote><p>php代码实现</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>header("Content-Type:text/html;Charset=UTF-8");
</span><span class='line'>//递归无限分类原理
</span><span class='line'>include_once ('db.inc.php');
</span><span class='line'> 
</span><span class='line'>function likecate(){
</span><span class='line'>    $sql="select id,catename,path,concat(path,',',id) as fullpath from likecate where 1 order by fullpath asc";
</span><span class='line'>    $res=mysql_query($sql);
</span><span class='line'>    $result=array();
</span><span class='line'>    while($row=mysql_fetch_assoc($res)){
</span><span class='line'>        $deep=count(explode(',',trim($row['fullpath'],',')));
</span><span class='line'>         
</span><span class='line'>        $row['catename']=str_repeat('&nbsp;&nbsp;',$deep*4).'|--'.$row['catename'];
</span><span class='line'>        $result[]=$row;
</span><span class='line'>    }
</span><span class='line'>    return $result;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'> 
</span><span class='line'>$res=likecate();
</span><span class='line'>echo "&lt;select name='cate'&gt;";
</span><span class='line'>foreach($res as $v){
</span><span class='line'>    echo "&lt;option&gt;{$v['catename']}&lt;/option&gt;";
</span><span class='line'>}
</span><span class='line'>echo "&lt;/select&gt;";
</span><span class='line'> 
</span><span class='line'>echo "&lt;hr/&gt;&lt;hr/&gt;";
</span><span class='line'>function getPathCate($cateid){
</span><span class='line'>    $sql="select *,concat(path,',',id)fullpath from likecate where id=$cateid";
</span><span class='line'>    $res=mysql_query($sql);
</span><span class='line'>    $row=mysql_fetch_assoc($res);
</span><span class='line'>    $ids=$row['fullpath'];
</span><span class='line'>    $sql="select * from likecate where id in($ids) order by id asc";
</span><span class='line'>    $res=mysql_query($sql);
</span><span class='line'>    $result=array();
</span><span class='line'>    while($row=mysql_fetch_assoc($res)){
</span><span class='line'>        $result[]=$row;
</span><span class='line'>    }
</span><span class='line'>    return $result;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>function displayCatePath($cateid,$link='likecate.php?cid='){
</span><span class='line'>    $res=getPathCate($cateid);
</span><span class='line'>    $str="";
</span><span class='line'>    foreach($res as $v){
</span><span class='line'>        $str.="&lt;a href='{$link}'&gt;{$v['catename']}&lt;/a&gt;&gt;";
</span><span class='line'>    }
</span><span class='line'>    return $str;
</span><span class='line'>}  
</span><span class='line'> 
</span><span class='line'>echo displayCatePath(4,'likecate.php?p=1&cid=');</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我也是一个有颜色的代码了]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/29/test/"/>
    <updated>2016-04-29T09:36:19+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/29/test</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>this is a php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s2">&quot;11&quot;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<pre class="prettyprint text">
$ rake generate
## Generating Site with Jekyll
unchanged sass/screen.scss
Configuration file: /Users/Neo/Octopress/_config.yml
            Source: source
       Destination: public
      Generating...
     Build Warning: Layout 'nil'
       requested in blog/categories/ubuntu/atom.xml does not exist.
     Build Warning: Layout 'nil'
       requested in blog/categories/octopress/atom.xml does not exist.
     Build Warning: Layout 'nil'
       requested in blog/categories/java/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/environment/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/homebrew/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/android/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/eclipse/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/ubuntu/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/octopress/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/java/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/environment/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/homebrew/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/android/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/eclipse/atom.xml does not exist.
                    done.
 Auto-regeneration: disabled. Use --watch to enable.
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux-MYSQL-常用命令]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/28/linux-mysql-code/"/>
    <updated>2016-04-28T01:24:16+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/28/linux-mysql-code</id>
    <content type="html"><![CDATA[<blockquote><p>Linux 下Mysql 常用命令总结</p></blockquote>

<h1>一、linux下mysql的基本命令：</h1>

<pre><code>1. linux下启动mysql的命令：
mysqladmin start
/ect/init.d/mysql start (前面为mysql的安装路径)
/usr/local/mysql/bin/mysqld_safe --user=mysql &amp;      启动
2. linux下重启mysql的命令：
mysqladmin restart
/ect/init.d/mysql restart (前面为mysql的安装路径)
3. linux下关闭mysql的命令：
mysqladmin shutdown
/ect/init.d/mysql shutdown (前面为mysql的安装路径)

4. 连接本机上的mysql：
进入目录mysql\bin，再键入命令mysql -uroot -p， 回车后提示输入密码。
退出mysql命令：exit（回车）

5. 修改mysql密码：
mysqladmin -u用户名 -p旧密码 password 新密码
或进入mysql命令行SET PASSWORD FOR root=PASSWORD("root");

6. 增加新用户。（注意：mysql环境中的命令后面都带一个分号作为命令结束符）
grant select on 数据库.* to 用户名@登录主机 identified by "密码"
如增加一个用户test密码为123，让他可以在任何主机上登录， 并对所有数据库有查询、插入、修改、删除的权限。首先用以root用户连入mysql，然后键入以下命令：
grant select,insert,update,delete on *.* to " Identified by "123";
</code></pre>

<h1>二、有关mysql数据库方面的操作</h1>

<blockquote><p>必须首先登录到mysql中，有关操作都是在mysql的提示符下进行，而且每个命令以分号结束</p></blockquote>

<pre><code>1. 显示数据库列表。
    show databases;
2. 显示库中的数据表：
    use mysql； ／／打开库
    show tables;
3. 显示数据表的结构：
    describe 表名;
4. 建库：
    create database 库名;

    GBK: create database test2 DEFAULT CHARACTER SET gbk COLLATE gbk_chinese_ci;
    UTF8: CREATE DATABASE `test2` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
5. 建表：
    use 库名；
    create table 表名(字段设定列表)；
6. 删库和删表:
    drop database 库名;
    drop table 表名；
7. 将表中记录清空：
    delete from 表名;
    truncate table  表名;
8. 显示表中的记录：
    select * from 表名;
9. 编码的修改
    如果要改变整个mysql的编码格式：  
    启动mysql的时候，mysqld_safe命令行加入  
    --default-character-set=gbk 
    如果要改变某个库的编码格式：在mysql提示符后输入命令  
    alter database db_name default character set gbk;

10. 重命名表
    alter table t1 rename t2;
11. 查看sql语句的效率
    explain &lt; table_name &gt;
    例如：explain select * from t3 where id=3952602;
12. 用文本方式将数据装入数据库表中(例如D:/mysql.txt)

    mysql&gt; LOAD DATA LOCAL INFILE "D:/mysql.txt" INTO TABLE MYTABLE;
</code></pre>

<h1>三、数据的导入导出(1)</h1>

<pre><code>1. 文本数据转到数据库中
    文本数据应符合的格式：字段数据之间用tab键隔开，null值用来代替。
    例：1 name duty 2006-11-23
    数据传入命令 load data local infile "文件名" into table 表名;

2. 导出数据库和表
    mysqldump --opt news &gt; news.sql（将数据库news中的所有表备份到news.sql文件，news.sql是一个文本文件，文件名任取。）
    mysqldump --opt news author article &gt; author.article.sql（将数据库news中的author表和article表备份到author.article.sql文件， author.article.sql是一个文本文件，文件名任取。）
    mysqldump --databases db1 db2 &gt; news.sql（将数据库dbl和db2备份到news.sql文件，news.sql是一个文本文件，文件名任取。）
    mysqldump -h host -u user -p pass --databases dbname &gt; file.dump
    就是把host上的以名字user，口令pass的数据库dbname导入到文件file.dump中
    mysqldump --all-databases &gt; all-databases.sql（将所有数据库备份到all-databases.sql文件，all-databases.sql是一个文本文件，文件名任取。）

3. 导入数据
    mysql &lt; all-databases.sql（导入数据库）
    mysql&gt;source news.sql;（在mysql命令下执行，可导入表）
</code></pre>

<h1>四、数据的导入导出(2)</h1>

<pre><code>一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：
    1、导出数据和表结构：
    mysqldump -u用户名 -p密码 数据库名 &gt; 数据库名.sql
    #/usr/local/mysql/bin/   mysqldump -uroot -p abc &gt; abc.sql
</code></pre>

<p>敲回车后会提示输入密码</p>

<pre><code>    2、只导出表结构
    mysqldump -u用户名 -p密码 -d 数据库名 &gt; 数据库名.sql
    #/usr/local/mysql/bin/   mysqldump -uroot -p -d abc &gt; abc.sql
</code></pre>

<p>注：/usr/local/mysql/bin/  &mdash;>  mysql的data目录</p>

<pre><code>二、导入数据库
    1、首先建空数据库
    mysql&gt;create database abc;

    2、导入数据库
    方法一：
        （1）选择数据库
        mysql&gt;use abc;
        （2）设置数据库编码
        mysql&gt;set names utf8;
        （3）导入数据（注意sql文件的路径）
        mysql&gt;source /home/abc/abc.sql;
    方法二：
        mysql -u用户名 -p密码 数据库名 &lt; 数据库名.sql
        #mysql -uabc_f -p abc &lt; abc.sql

        建议使用第二种方法导入。
</code></pre>

<p>注意：有命令行模式，有sql命令</p>

<h1>五、常用操作</h1>

<h2>连接MySQL</h2>

<pre><code>格式： mysql -h主机地址 -u用户名 －p用户密码

1、例1：连接到本机上的MYSQL。

首先在打开DOS窗口，然后进入目录 mysqlbin，再键入命令mysql -uroot -p，
回车后提示你输密码，如果刚安装好MYSQL，超级用户root是没有密码的，
故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql&gt;。

2、例2：连接到远程主机上的MYSQL。假设远程主机的IP为：110.110.110.110，
用户名为root,密码为abcd123。则键入以下命令：

mysql -h110.110.110.110 -uroot -pabcd123

（注:u与root可以不用加空格，其它也一样）

3、退出MYSQL命令： exit （回车）。
</code></pre>

<h2>修改密码</h2>

<pre><code>格式：mysqladmin -u用户名 -p旧密码 password 新密码

1、例1：给root加个密码ab12。首先在DOS下进入目录mysqlbin，然后键入以下命令：

mysqladmin -uroot -password ab12

注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。

2、例2：再将root的密码改为djg345。

mysqladmin -uroot -pab12 password djg345
</code></pre>

<h2>增加新用户。</h2>

<blockquote><p>（注意：和上面不同，下面的因为是MySQL环境中的命令，所以后面都带一个分号作为命令结束符）</p></blockquote>

<pre><code>格式：grant select on 数据库.* to 用户名@登录主机 identified by \"密码\"

例1、增加一个用户test1密码为abc，让他可以在任何主机上登录，
并对所有数据库有查询、插入、修改、删除的权限。首先用以root用户连入MySQL，然后键入以下命令：
grant select,insert,update,
delete on *.* to test1@\"%\" Identified by \"abc\";

但例1增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以
在internet上的任何一台电脑上登录你的MySQL数据库并对你的数据可以为所欲为了，
解决办法见例2。

例2、增加一个用户test2密码为abc,让他只可以在localhost上登录，
并可以对数据库mydb进行查询、插入、修改、删除的操作 
（localhost指本地主机，即MySQL数据库所在的那台主机），
这样用户即使用知道test2的密码，他也无法从internet上直接访问数据 库，
只能通过MySQL主机上的web页来访问。

grant select,insert,update,
delete on mydb.* to test2@localhost identified by \"abc\";

如果你不想test2有密码，可以再打一个命令将密码消掉。

grant select,insert,update,delete on mydb
.* to test2@localhost identified by \"\";
</code></pre>

<h2>整理</h2>

<pre><code>启动：net start mySql;
进入：mysql -u root -p/mysql -h localhost -u root -p databaseName;
列出数据库：show databases;
选择数据库：use databaseName;
列出表格：show tables；
显示表格列的属性：show columns from tableName；
建立数据库：source fileName.txt;
匹配字符：可以用通配符_代表任何一个字符，％代表任何字符串;
增加一个字段：alter table tabelName add column fieldName dateType;
增加多个字段：alter table tabelName add column fieldName1 dateType,add columns fieldName2 dateType;
多行命令输入:注意不能将单词断开;当插入或更改数据时，不能将字段的字符串展开到多行里，否则硬回车将被储存到数据中;
增加一个管理员帐户：grant all on *.* to user@localhost identified by "password";
每条语句输入完毕后要在末尾填加分号';'，或者填加'\g'也可以；
查询时间：select now();
查询当前用户：select user();
查询数据库版本：select version();
查询当前使用的数据库：select database();
</code></pre>

<p>1、删除student_course数据库中的students数据表：</p>

<pre><code>rm -f student_course/students.*
</code></pre>

<p>2、备份数据库：(将数据库test备份)</p>

<pre><code>mysqldump -u root -p test&gt;c:\test.txt
备份表格：(备份test数据库下的mytable表格)
mysqldump -u root -p test mytable&gt;c:\test.txt
将备份数据导入到数据库：(导回test数据库)
mysql -u root -p test
</code></pre>

<p>3、创建临时表：(建立临时表zengchao)</p>

<pre><code>create temporary table zengchao(name varchar(10));
</code></pre>

<p>4、创建表是先判断表是否存在</p>

<pre><code>create table if not exists students(……);
</code></pre>

<p>5、从已经有的表中复制表的结构</p>

<pre><code>create table table2 select * from table1 where 1&lt;&gt;1;
</code></pre>

<p>6、复制表</p>

<pre><code>create table table2 select * from table1;
</code></pre>

<p>7、对表重新命名</p>

<pre><code>alter table table1 rename as table2;
</code></pre>

<p>8、修改列的类型</p>

<pre><code>alter table table1 modify id int unsigned;//修改列id的类型为int unsigned
alter table table1 change id sid int unsigned;//修改列id的名字为sid，而且把属性修改为int unsigned
</code></pre>

<p>9、创建索引</p>

<pre><code>alter table table1 add index ind_id (id);
create index ind_id on table1 (id);
create unique index ind_id on table1 (id);//建立唯一性索引
</code></pre>

<p>10、删除索引</p>

<pre><code>drop index idx_id on table1;
alter table table1 drop index ind_id;
</code></pre>

<p>11、联合字符或者多个列(将列id与":&ldquo;和列name和&rdquo;=&ldquo;连接)</p>

<pre><code>select concat(id,':',name,'=') from students;
</code></pre>

<p>12、limit(选出10到20条)&lt;第一个记录集的编号是0></p>

<pre><code>select * from students order by id limit 9,10;
</code></pre>

<p>13、MySQL不支持的功能</p>

<pre><code>事务，视图，外键和引用完整性，存储过程和触发器
</code></pre>

<p>14、MySQL会使用索引的操作符号</p>

<pre><code>&lt;,&lt;=,&gt;=,&gt;,=,between,in,不带%或者_开头的like
</code></pre>

<p>15、使用索引的缺点</p>

<pre><code>1)减慢增删改数据的速度；
2）占用磁盘空间；
3）增加查询优化器的负担；
当查询优化器生成执行计划时，会考虑索引，太多的索引会给查询优化器增加工作量，导致无法选择最优的查询方案；
</code></pre>

<p>16、分析索引效率</p>

<pre><code>方法：在一般的SQL语句前加上explain；
分析结果的含义：
1）table：表名；
2）type：连接的类型，(ALL/Range/Ref)。其中ref是最理想的；
3）possible_keys：查询可以利用的索引名；
4）key：实际使用的索引；
5）key_len：索引中被使用部分的长度（字节）；
6）ref：显示列名字或者"const"（不明白什么意思）；
7）rows：显示MySQL认为在找到正确结果之前必须扫描的行数；
8）extra：MySQL的建议；
</code></pre>

<p>17、使用较短的定长列</p>

<pre><code>1）尽可能使用较短的数据类型；
2）尽可能使用定长数据类型；
a）用char代替varchar，固定长度的数据处理比变长的快些；
b）对于频繁修改的表，磁盘容易形成碎片，从而影响数据库的整体性能；
c）万一出现数据表崩溃，使用固定长度数据行的表更容易重新构造。使用固定长度的数据行，每个记录的开始位置都是固定记录长度的倍数，可以很容易被检测到，但是使用可变长度的数据行就不一定了；
d）对于MyISAM类型的数据表，虽然转换成固定长度的数据列可以提高性能，但是占据的空间也大；
</code></pre>

<p>18、使用not null和enum</p>

<pre><code>尽量将列定义为not null，这样可使数据的出来更快，所需的空间更少，而且在查询时，MySQL不需要检查是否存在特例，即null值，从而优化查询；
如果一列只含有有限数目的特定值，如性别，是否有效或者入学年份等，在这种情况下应该考虑将其转换为enum列的值，MySQL处理的更快，因为所有的enum值在系统内都是以标识数值来表示的；
</code></pre>

<p>19、使用optimize table</p>

<pre><code>对于经常修改的表，容易产生碎片，使在查询数据库时必须读取更多的磁盘块，降低查询性能。具有可变长的表都存在磁盘碎片问题，这个问题对blob数据类型更为突出，因为其尺寸变化非常大。可以通过使用optimize table来整理碎片，保证数据库性能不下降，优化那些受碎片影响的数据表。 optimize table可以用于MyISAM和BDB类型的数据表。实际上任何碎片整理方法都是用mysqldump来转存数据表，然后使用转存后的文件并重新建数据表；
</code></pre>

<p>20、使用procedure analyse()</p>

<pre><code>可以使用procedure analyse()显示最佳类型的建议，使用很简单，在select语句后面加上procedure analyse()就可以了；例如：
select * from students procedure analyse();
select * from students procedure analyse(16,256);
第二条语句要求procedure analyse()不要建议含有多于16个值，或者含有多于256字节的enum类型，如果没有限制，输出可能会很长；
</code></pre>

<p>21、使用查询缓存</p>

<pre><code>1）查询缓存的工作方式：
第一次执行某条select语句时，服务器记住该查询的文本内容和查询结果，存储在缓存中，下次碰到这个语句时，直接从缓存中返回结果；当更新数据表后，该数据表的任何缓存查询都变成无效的，并且会被丢弃。
2）配置缓存参数：
变量：query_cache _type，查询缓存的操作模式。有3中模式，0：不缓存；1：缓存查询，除非与 select sql_no_cache开头；2：根据需要只缓存那些以select sql_cache开头的查询； query_cache_size：设置查询缓存的最大结果集的大小，比这个值大的不会被缓存。
</code></pre>

<p>22、调整硬件</p>

<pre><code>1）在机器上装更多的内存；
2）增加更快的硬盘以减少I/O等待时间；
寻道时间是决定性能的主要因素，逐字地移动磁头是最慢的，一旦磁头定位，从磁道读则很快；
3）在不同的物理硬盘设备上重新分配磁盘活动；
如果可能，应将最繁忙的数据库存放在不同的物理设备上，这跟使用同一物理设备的不同分区是不同的，因为它们将争用相同的物理资源（磁头）。
</code></pre>

<h2>删除MySQL数据库</h2>

<p>1、创建数据库</p>

<pre><code>mysql&gt; create database drop_database;
Query OK, 1 row affected (0.00 sec)
</code></pre>

<p>2、删除一个已经确定存在的数据库</p>

<pre><code>mysql&gt; drop database drop_database;
Query OK, 0 rows affected (0.00 sec)
</code></pre>

<p>3、删除一个不确定存在的数据库</p>

<pre><code>mysql&gt; drop database drop_database;
ERROR 1008 (HY000): Can't drop database 'drop_database'; database doesn't exist
//发生错误，不能删除'drop_database'数据库，该数据库不存在。
mysql&gt; drop database if exists drop_database;
Query OK, 0 rows affected, 1 warning (0.00 sec)//产生一个警告说明此数据库不存在
mysql&gt; create database drop_database;
Query OK, 1 row affected (0.00 sec)
mysql&gt; drop database if exists drop_database;//if exists 判断数据库是否存在，不存在也不产生错误
Query OK, 0 rows affected (0.00 sec)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[腾讯云服务器Centos6.5 LNMP环境搭建]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/28/qqyuncontos-huan-jing-da-jian/"/>
    <updated>2016-04-28T01:01:35+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/28/qqyuncontos-huan-jing-da-jian</id>
    <content type="html"><![CDATA[<blockquote><p>今天开始搭建前几天买的腾讯云服务器的LNMP环境</p></blockquote>

<h1>一、通过putty.exe连接到云服务器</h1>

<pre><code>下载并打开这个软件后只需要输入云服务器的外网IP其他默认即可
然后用你的用户名和密码登录云服务器。
</code></pre>

<h1>二、CentOS环境下通过YUM安装软件</h1>

<pre><code>1. 切换到root权限
2. yum install [nginx][php][php-fpm][mariadb][mariadb-server][mysql][mysql-server] 或者yum -y mysql mysql-server nginx php php-fpm
3. 系统会自动搜索相关的软件包和依赖关系，并且在界面中提示用户确认搜索到的软件包是否合适，如下图所示：
</code></pre>

<p><img src="http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/Yum_2.png" alt="sd" /></p>

<pre><code>4. 输入“Y”确认后，开始安装软件，安装完成后会提示“Complete”.
5. 软件安装完成后，可通过命令 rpm -ql 查看软件包具体的安装目录。以查看nginx的安装目录为例：
#rpm -ql nginx
6.可通过命令 rpm -q 查看软件包的版本信息。以查看nginx的版本为例：
#rpm -q nginx
</code></pre>

<p><img src="http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/YaST_6.png" alt="sd" />
<img src="http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/YaST_5.png" alt="sd" /></p>

<h1>三、CentOS环境下通过YUM安装软件</h1>

<h2>1. 配置nginx</h2>

<pre><code>1. 启动nginx服务。
    命令如下：
    [root@VM_185_51 /]# service nginx restart

2. 测试nginx服务是否正常运行。
如果最后显示：`index.html' saved ，说明nginx服务正常。
[root@VM_185_51 /]# wget http://127.0.0.1
--2013-02-20 17:07:26-- http://127.0.0.1/
Connecting to 127.0.0.1:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 151 [text/html]
Saving to: `index.html'
100%[==========================================================================================&gt;] 151 --.-K/s in 0s 
2013-02-20 17:07:26 (37.9 MB/s) - `index.html' saved [151/151]

3. 在浏览器中，通过CentOS云服务器公网IP查看nginx服务是否正常运行。
如果显示如下，说明nginx安装配置成功。
</code></pre>

<p><img src="http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/Q_lnmp_1.png" alt="sd" /></p>

<h2>2. 配置PHP</h2>

<pre><code>1. 启动php-fpm。
    [root@VM_185_51 /]# service php-fpm start

2. 修改php-fpm和nginx的配置，实现nginx和php联动。
    （1）查看php-fpm默认配置。
    [root@VM_185_51 /]# cat /etc/php-fpm.d/www.conf |grep -i 'listen ='
    listen = 127.0.0.1:9000
    （2）php-fpm的默认配置的监听端口为9000，现在只用修改配置，将php解析的请求转发到127.0.0.0:9000处理即可。
    修改nginx配置，修改命令如下：
[root@VM_185_51 /]# vim /etc/nginx/conf.d/default.conf
修改完成后实际配置如下，红色文字为修改过的部分：
server {
 listen       80;
 root   /usr/share/nginx/html;
 server_name  localhost;
 #charset koi8-r;
 #access_log  /var/log/nginx/log/host.access.log  main;
 location / {
     index  index.html index.htm;
  }
 #error_page  404              /404.html;
 # redirect server error pages to the static page /50x.html
 #
 error_page   500 502 503 504  /50x.html;
  location = /50x.html {
     root   /usr/share/nginx/html;
  }
# proxy the PHP scripts to Apache listening on 127.0.0.1:80
#
#location ~ \.php$ {
#    proxy_pass   http://127.0.0.1;
#}
# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
#
  location ~ \.php$ {
  fastcgi_pass   127.0.0.1:9000;
  fastcgi_index   index.php;
  fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
  include        fastcgi_params;
 }
# deny access to .htaccess files, if Apache's document root
# concurs with nginx's one
#
#location ~ /\.ht {
#    deny  all;
#}
}
修改完成后，按“Esc”键，输入“:wq”，保存文件并返回。
通过下面的命令，查看配置是否正确：
[root@VM_185_51 /]# cat /etc/nginx/conf.d/default.conf
3. 配置生效
    重启nginx，使配置生效。
    命令如下：
    [root@VM_185_51 /]# service nginx restart
    Stopping nginx: [ OK ]
    Starting nginx: [ OK ]
4. 环境配置验证
    1. 在web目录下创建index.php。
    命令如下：
    [root@VM_185_51 /]# vim /usr/share/nginx/html/index.php
    index.php文件的内容如下：
    &lt;?php
    echo "&lt;title&gt;Test Page&lt;/title&gt;";
    echo "hello world";
    ?&gt;
2. 在浏览器中，通过CentOS云服务器公网IP查看环境配置是否成功。
如果页面可以显示“hello world”，说明配置成功。
</code></pre>

<p><img src="http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/Q_lnmp_2.png" alt="sd" /></p>

<h1>四、Windows机器通过WinSCP上传文件</h1>

<blockquote><p>WinSCP是一个Windows环境下使用SSH的开源图形化SFTP客户端，同时支持SCP协议。它的主要功能就是在本地与远程计算机间安全的复制文件。与使用FTP上传代码相比，通过WinSCP可以直接使用服务器账户密码访问服务器，无需在服务器端做任何配置。下载地址：<a href="http://winscp.net/eng/docs/lang:chs">官方下载</a> <a href="http://dl.pconline.com.cn/html_2/1/86/id=7244&amp;pn=0.html">太平洋下载中心下载</a></p></blockquote>

<p>安装完成后启动WinSCP，界面如下。按图示填写信息并登录。
<img src="http://mccdn.qcloud.com/img56b024e2768ad.png" alt="sd" /></p>

<blockquote><p>字段填写说明：</p></blockquote>

<ul>
<li>协议：SFTP或者SCP均可</li>
<li>主机名：云服务器的公网IP（登录云服务器控制台可查看云服务器的公网IP）</li>
<li>用户名：云服务器的系统用户名（SUSE/CentOS/Debian：root，Windows：Administrator，Ubuntu：ubuntu）</li>
<li>密码：云服务器的用户名对应的密码</li>
<li>端口：默认22</li>
</ul>


<p> 信息填写完毕之后点击登录，界面如下:</p>

<p><img src="http://mccdn.qcloud.com/img56b0272d4ed3a.png" alt="sd" /></p>

<p>登录成功之后，鼠标选中本地文件，拖拽到右侧的远程站点，即可将文件上传到Linux云服务器
<img src="http://mccdn.qcloud.com/img56b027728e1ec.png" alt="sd" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx下PHP环境搭建1]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/26/nginx-php-huan-jing/"/>
    <updated>2016-04-26T22:53:05+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/26/nginx-php-huan-jing</id>
    <content type="html"><![CDATA[<blockquote><p>Nginx下PHP环境搭建1</p></blockquote>

<h1>一、需要准备的包</h1>

<ul>
<li>libiconv-1.7.tar.gz</li>
<li>libmcrypt-2.5.7.tar.gz</li>
<li>mcrypt-2.6.8.tar.gz</li>
<li>mhash-0.9.3.tar.gz</li>
<li>php-5.5.34.tar.bz2</li>
</ul>


<h1>二、具体安装</h1>

<hr />

<ol>
<li><p>libiconv</p>

<ol>
<li>tar -zvxf libiconv-1.7.tar.gz</li>
<li>cd libiconv-1.7</li>
<li>./configure &ndash;prefix=/usr/local</li>
<li>make</li>
<li>make install</li>
</ol>
</li>
<li><p>libmcrypt</p>

<ol>
<li>tar -zvxf libmcrypt-2.5.7.tar.gz</li>
<li>cd libmcrypt-2.5.7</li>
<li>./configure</li>
<li>make</li>
<li>make install</li>
<li>/sbin/ldconfig   //共享链接库</li>
<li>./configure &ndash;enable-ltdl-install //内键指令</li>
<li>make</li>
<li>make install</li>
</ol>
</li>
<li><p>mhash</p>

<ol>
<li>tar -zvxf mhash-0.9.3.tar.gz</li>
<li>cd mhash-0.9.3</li>
<li>./configure</li>
<li>make</li>
<li>make install</li>
<li>ln -s /usr/local/lib/libmcrypt.la /usr/lib/ibmcrypt.la</li>
<li>ln -s /usr/local/lib/libmcrypt.la.so.4 /usr/lib/libmcrypt.la.so.4</li>
<li>ln -s /usr/local/lib/libmcrypt.la.so.4.4.8 /usr/lib/libmcrypt.la.so.4.4.8</li>
<li>ln -s /usr/local/lib/libmhash.a /usr/lib/libmhash.a</li>
<li>ln -s /usr/local/lib/libmhash.la /usr/lib/libmhash.la</li>
<li>ln -s /usr/local/lib/libmhash.so /usr/lib/libmhash.so</li>
<li>ln -s /usr/local/lib/libmhash.so.2 /usr/lib/libmhash.so.2</li>
<li>ln -s /usr/local/lib/libmhash.so.2.0.1 /usr/lib/libmhash.so.2.0.1</li>
</ol>
</li>
<li><p>mcrypt</p>

<ol>
<li>tar -zxvf mcrypt-2.6.8.tar.gz</li>
<li>cd mcrypt-2.6.8</li>
<li>/sbin/ldconfig</li>
<li>./configure</li>
<li>若报错则找不到LIBMCRYPT则

<ol>
<li>export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH</li>
<li>./configure -with-libmcryp-prefix=/usr/local</li>
</ol>
</li>
<li>make

<ol>
<li>报错打开报错的文件 vi /usr/local/include/mutils.h</li>
<li>找到报错的那行看是哪个文件引入失败(mhash_config.h)</li>
<li>find / -name mhash_config.h 在系统中找到该文件</li>
<li>cp /home/Ewan/下载/mhash-0.9.3/mhash_config.h /usr/local/include 拷贝到include文件下</li>
<li>make</li>
</ol>
</li>
<li>make install</li>
</ol>
</li>
<li><p>php-5.5.34.tar.bz2</p>

<ol>
<li>tar -jxvf php-5.5.34.tar.bz2</li>
<li>cd php-5.5.34</li>
<li>./configure &ndash;prefix=/usr/local/php &ndash;enable-fastcgi &ndash;enable-fpm

<ol>
<li>报错 yum install libxml2 libxml2-devel</li>
<li>./configure &ndash;prefix=/usr/local/php &ndash;enable-fastcgi &ndash;enable-fpm</li>
</ol>
</li>
<li>make ZEND_EXTRA_LIBS=&lsquo;-liconv&rsquo;</li>
<li>make install

<ol>
<li>报错 vi /etc/ld.so.conf</li>
<li>输入 /usr/local/lib</li>
<li>make install</li>
<li>如果还是出错 /sbin/ldconfig -v</li>
<li>make install</li>
<li>cp php.ini-dist /usr/local/php/etc/php.ini</li>
</ol>
</li>
</ol>
</li>
<li><p>mysql (5.5版本以下)</p>

<ol>
<li>groupadd mysql //添加组</li>
<li>useradd mysql -g mysql //添加用户</li>
<li>tar -zxvf mysql-x.x.x</li>
<li>cd mysql-x.x.x</li>
<li>./configure &ndash;prefix=/usr/local/mysql &ndash;with-mysqld-ldflags=-all-static &ndash;with-client-ldflags=-all-static &ndash;with-readline &ndash;with-ssl</li>
<li>/usr/local/mysql/bin/mysql_install_db &ndash;user//初始化数据库</li>
<li>cp ./support-files/mysql.server /etc/init.d/mysql //复制启动项到系统中</li>
<li>cp ./support-files/my-medium.cnf /etc/my.cnf</li>
<li>chmod 755 /etc/init.d/mysql(755 分别代表文件拥有者，同组者，其他人的权限 rwx 7为111 可读可写可执行)</li>
<li>cd /usr/local/mysql</li>
<li>chown -R mysql . //将拥有者更改为mysql用户</li>
<li>chgrp -R mysql . //归到mysql组</li>
<li>/usr/local/mysql/bin/mysqladmin -u root password &lsquo;abc123&rsquo; //设置数据库密码</li>
<li>报错 不能连接到local mysql</li>
<li>ps -ef|grep mysql //找到mysql对应的进程号</li>
<li>kill -9 xxxx //杀死进程</li>
<li>/usr/local/mysql/bin/mysql_install_db &ndash;user//初始化数据库</li>
<li>service mysql start //启动MYSQL</li>
<li>/usr/local/mysql/bin/mysqladmin -u root password &lsquo;abc123&rsquo; //设置数据库密码</li>
<li>/usr/local/mysql/bin/mysql -u root -p //测试输入的密码</li>
<li>进入到mysql 后可以\q退出</li>
</ol>
</li>
<li>安装mysql（5.5版本）
  <a href="http://www.mysql.com/">下载Mysql5.5.4</a></li>
</ol>


<p><img src="http://shp.qpic.cn/txdiscuz_pic/0/_bbs_qcloud_com_forum_201503_10_171832lw4gbxwhq9z9vmho.png/0" alt="1" /></p>

<p><img src="http://shp.qpic.cn/txdiscuz_pic/0/_bbs_qcloud_com_forum_201503_10_171836mubv0eb5010ewbjv.png/0" alt="1" /></p>

<pre><code>1. tar zxvf mysql-5.5.40.tar.gz
2. cd mysql-5.5.4
3. yum install ncurses-devel cmake bison-devel libaio-devel gcc-c++ bison -y 
    *  mysql5.5 版本之后，预编译的 configure命令改为了 cmake, 需要手动安装一下 cmake命令
5.  cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci-- Library mysqlclient depends on OSLIBS -lpthread;m;rt;dl-- Configuring done-- Generating done-- Build files have been written to: /root/mysql-5.5.40 ————预编译无报错，成功。
*  make 
    *  [100%] Building CXX object mysql-test/lib/My/SafeProcess/CMakeFiles/my_safe_process.dir/safe_process.cc.oLinking CXX executable my_safe_process[100%] Built target my_safe_process————无报错，make正常。
*   make install -- Installing: /usr/local/mysql/man/man1/mysql_fix_extensions.1 -- Installing: /usr/local/mysql/man/man1/mysqldumpslow.1 -- Installing: /usr/local/mysql/man/man1/mysql_secure_installation.1 -- Installing: /usr/local/mysql/man/man8/mysqld.8 ————无报错，make install正常。
*    groupadd mysql ————创建mysql组
*     useradd -g mysql mysql ————在mysql组中创建mysql用户
* cp /usr/local/mysql/support-files/my-medium.cnf /etc/my.cnf ————默认没有mysql的配置文件，将源码包中的配置文件拷贝到etc下的配置文件中。
*  /usr/local/mysql/scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data ————初始化数据库，指定用户为mysql，家目录为/usr/local/mysql，数据库目录为/usr/local/mysql/data
* chown -R root /usr/local/mysql/ ————改变目录的所有者
* chown -R mysql /usr/local/mysql/data ————改变目录的所有者
* chgrp -R mysql /usr/local/mysql/ ————改变目录的所属组
*  export PATH=$PATH:/usr/local/mysql/bin ————将/usr/local/mysql/bin下的命令放到环境变量中
*   /usr/local/mysql/bin/mysqld_safe --user=mysql &amp; ————启动mysql
* mysql 
    *  Welcome to the MySQL monitor.  Commands end with ; or \g.
         Your MySQL connection id is 1
</code></pre>

<blockquote><p>ps:在实际的操作过程中上面在10步初始化数据库时有可能会error这时可以考虑用</p></blockquote>

<pre><code> ps -ef|grep mysql //找到mysql对应的进程号
 kill -9 xxxx //杀死进程
</code></pre>

<blockquote><p>然后执行</p></blockquote>

<pre><code> chown -R root /usr/local/mysql/ ————改变目录的所有者
 chown -R mysql /usr/local/mysql/data ————改变目录的所有者
 chgrp -R mysql /usr/local/mysql/ ————改变目录的所属组
 export PATH=$PATH:/usr/local/mysql/bin ————将/usr/local/mysql/bin下的命令放到环境变量中
 /usr/local/mysql/scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data ————初始化数据库，指定用户为mysql，家目录为/usr/local/mysql，数据库目录为/usr/local/mysql/data
 /usr/local/mysql/bin/mysqld_safe &amp; 启动Mysql 或者
 /usr/local/mysql/bin/mysqld_safe --user=mysql &amp; ————启动mysql
 在执行以下操作
</code></pre>

<h2>Mysql启动、停止的方法</h2>

<pre><code>/usr/local/mysql/bin/mysqld_safe --user=mysql &amp;      启动
mysqladmin –uroot –pxxx  shutdown                  停止
tail -f /var/log/mysqld.log                        查看mysql的错误日志
</code></pre>

<h3>修改 mysql监听地址为127.0.0.1</h3>

<pre><code>netstat -ntulp
tcp        0      0 0.0.0.0:3306                0.0.0.0:*                   LISTEN      28253/mysqld       
tcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN      1889/sshd    
</code></pre>

<p>默认是监听的0.0.0.0</p>

<pre><code>vi /etc/my.cnf
添加一列
[mysqld]
port            = 3306
socket          = /tmp/mysql.socK
bind-address=127.0.0.1
# mysqladmin -uroot -p shutdow
# /usr/local/mysql/bin/mysqld_safe --user=mysql &amp;
保存并退出
 netstat -ntulp
tcp        0      0 127.0.0.1:3306              0.0.0.0:*                   LISTEN      29103/mysqld   
</code></pre>

<p>————修改成功</p>

<h2>修改 mysql的root密码</h2>

<pre><code>use mysql
update user set Password=PASSWORD('新密码') where User='root' and Host='localhost';
flush privileges;flush privileges;
# mysql -uroot -p
Enter password:
mysql&gt;
</code></pre>

<p>————修改新密码成功</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux常用命令]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/26/linux-chang-yong-min-ling/"/>
    <updated>2016-04-26T18:55:40+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/26/linux-chang-yong-min-ling</id>
    <content type="html"><![CDATA[<blockquote><p>Linux 命令总结</p></blockquote>

<h1>一、常用目录作用</h1>

<ul>
<li>/ 根目录</li>
<li>/bin 命令保存目录（普通用户可以读取的命令）</li>
<li>/boot 启动目录，启动相关文件</li>
<li>/dev  设备文件保存目录</li>
<li>/etc  配置文件目录</li>
<li>/home 普通用户家目录</li>
<li>/lib  系统库保存目录</li>
<li>/mnt  系统挂载目录</li>
<li>/media    挂载目录</li>
<li>/root 超级用户的家目录</li>
<li>/tmp  临时目录</li>
<li>/sbin 命令保存目录（超级用户才能使用）</li>
<li>/proc 直接写入内存</li>
<li>/sys  ~</li>
<li><p>/usr  系统软件资源目录</p>

<ul>
<li>/usr/bin  系统命令（普通用户）</li>
<li>/usr/sbin 系统命令（超级用户）</li>
</ul>
</li>
<li><p>/var  系统相关文档</p></li>
</ul>


<hr />

<h1>二、常用基本命令</h1>

<h2>2.1 目录和文件处理命令</h2>

<ul>
<li><p>mkdir [选项] [目录名] 创建目录</p>

<ul>
<li>-p 递归创建</li>
</ul>
</li>
<li><p>rm [选项] [目录名] 删除</p>

<ul>
<li>-r 删除目录</li>
<li>-f 强制</li>
</ul>
</li>
<li><p>mv [原文件或目录] [目标目录] 剪切或改名</p>

<ul>
<li>没有选项 剪切文件和目录使用相同命令</li>
</ul>
</li>
<li>cp [选项] [原文件或目录] [目标目录]

<ul>
<li>-r 复制目录</li>
<li>-p 连带文件属性复制</li>
<li>-d 若源文件是连接文件，则赋值连接属性</li>
<li>-a 相当于-pdr</li>
</ul>
</li>
<li><p>cd</p>

<ul>
<li>~ 进入家目录</li>
<li><ul>
<li>进入上次目录</li>
</ul>
</li>
<li>.. 进入上级目录</li>
<li>. 进入当前目录</li>
</ul>
</li>
<li><p>pwd 显示当前所在位置</p></li>
<li><p>ls [选项] [目录]</p>

<ul>
<li>-l 长格式 详细信息</li>
<li>-h 人性化显示大小 如-lh 会把大小变成能看懂的格式如128k</li>
<li>-a 显示所有文件</li>
<li>-d 查看目录属性</li>
<li>-i 显示inode id号</li>
</ul>
</li>
</ul>


<h2>2.2链接命令</h2>

<ul>
<li><p>硬链接 不推荐 ln  [原文件] [目标文件]</p>

<ul>
<li>拥有相同的i节点和存储block块，可以看做是同一个文件。相当于一个文件的两个接入。</li>
<li>可以通过i节点识别</li>
<li>不能跨分区</li>
<li>不能针对目录使用</li>
</ul>
</li>
<li><p>软链接</p>

<ul>
<li>类似Windows快捷方式</li>
<li>软链接拥有自己的I节点和Block块，但是数据中只保存原文件的文件名和节点号，并没有实际文件数据</li>
<li>lrwxrwxrwx l 软链接 软链接的权限都为 rwxrwxrwx、</li>
<li>修改任意文件，另一个都改变</li>
<li>删除原文件，软链接不能使用</li>
</ul>
</li>
<li>ln -s [原文件] [目标文件] 软链接 （原文件一定要写绝对路径）</li>
</ul>


<h2>2.3 文件搜索命令</h2>

<ul>
<li>配置文件 /etc/updatedb.conf

<ul>
<li>PRUNE_BIND_MOUNTS=&ldquo;yes&rdquo; #开启器搜索限制</li>
<li>PRUNEFS = #搜索时不搜索的文件系统</li>
<li>PRUNENAMES = #搜索时不搜索的文件系统</li>
<li>PRUNEPATHS = # 搜索时不搜多的路径</li>
</ul>
</li>
<li><p>locate [文件名] 在后台数据库按文件名搜索，搜索速度较快</p>

<ul>
<li>/var/lib/mlocate #locate命令搜索的数据库</li>
<li>updatadb 强制更新数据库（默认一天一更新）</li>
</ul>
</li>
<li><p>whereis [选项] [命令] 搜索命令的命令 输出命令位置和帮助文档位置  只能查系统命令</p>

<ul>
<li>-b 只看命令所在位置</li>
<li>-m 只看帮助文档所在位置</li>
</ul>
</li>
<li><p>which [命令] 找到命令和别命</p></li>
<li><p>find [搜索范围] [搜索文件]</p>

<ul>
<li>find / -name install.log</li>
<li>避免大范围搜索，非常消耗系统资源</li>
<li>*匹配任意内容</li>
<li>？匹配任意一个字符</li>
<li>[]任意中括号之内的一个内容</li>
<li>find / -iname install.log 不区分大小写</li>
<li>find / -user root 按所有者搜索</li>
<li>find / -user -nouser 搜索没有所有者的文件</li>
<li><p>find /var/log -mtime +10 查找十天前修改的文件</p>

<ul>
<li>atime 文件访问时间 -10 十天内</li>
<li>ctime 改变文件属性  10 十天当天</li>
<li>mtime 修改文件内容 +10 十天前</li>
</ul>
</li>
<li><p>find . -size 25k 查找当前目录25k的文件</p>

<ul>
<li>-25 小于25k</li>
<li>+25 大于25k</li>
</ul>
</li>
<li><p>find . -inum xxx 查找当前目录i节点为XX的文件</p></li>
<li>find /etc -size +20k -a -50k  ect下大于20k小于50k的问价

<ul>
<li>-a  and 逻辑与</li>
<li>-o  or  逻辑或</li>
</ul>
</li>
<li>find /etc -size +20k -a -50k -exec ls -lh {} \;将查找到的文件LS出来

<ul>
<li>-exec/-ok 命令 {} \ ; 对搜索结果执行操作、</li>
</ul>
</li>
</ul>
</li>
<li><p>grep [选项] 字符串 文件名 在文件中匹配符合条件的字符串</p>

<ul>
<li>-i 忽略大小写</li>
<li>-v 排除指定字符串</li>
</ul>
</li>
</ul>


<h2>2.4帮助命令</h2>

<ul>
<li><p>man  命令</p>

<ul>
<li>man一共有1-9级 man -f 命令 查看命令有几个帮助级别</li>
<li>man [1-9] 命令 查看现有级别的帮助</li>
</ul>
</li>
<li><p>&ndash;help    或许选项帮助</p>

<ul>
<li>ls &ndash;help 获取选项</li>
</ul>
</li>
<li>help shell内部命令 获取shell内部命令帮助

<ul>
<li>用 whereis cd 来看是否为内部命令，没有执行文件则为内部命令</li>
<li>如 help cd</li>
</ul>
</li>
<li>info 详细命令帮助 太复杂 不常用

<h1>2.5压缩与解压缩命令</h1></li>
<li>常用压缩格式：.zip .gz .bz2 .tar.gz .tar.bz2</li>
<li>zip [目标文件] [源文件]

<ul>
<li>zip -r [压缩目录名] [源目录]</li>
<li>unzip [压缩文件] 解压缩</li>
</ul>
</li>
<li>gzip [源文件] 生成.gz文件 #源文件消失

<ul>
<li>gzip -c 源文件 > 压缩文件 #压缩为.gz 源文件不消失</li>
<li>gzip -r 压缩目录下所有子文件 但是不能压缩目录</li>
<li>gzip -d 压缩包 #解压缩</li>
<li>gunzip 压缩包 #解压缩</li>
</ul>
</li>
<li>bz2 不能压缩目录

<ul>
<li>bzip2 源文件  #不保留源文件</li>
<li>bzip2 -k 源文件  #保留源文件</li>
<li>bzip2 -d 压缩包  #-k保留源文件</li>
<li>bunzip2  压缩包  #-k保留源文件</li>
</ul>
</li>
<li><p>tar -jcvf 压缩包名.tar.bz2 源文件</p>

<ul>
<li>-z 压缩为.tar.gz</li>
<li>-c 打包</li>
<li>-v 显示打包过程</li>
<li>-f 指定打包后的文件名</li>
</ul>
</li>
<li><p>tar -jxvf 压缩包名.tar.bz2 加 -C 指定解压缩位置</p>

<ul>
<li>-z 解压缩.tar.gz

<h1>2.6关机重启命令</h1></li>
</ul>
</li>
<li><p>shutdown [选项] [时间] &amp; #加&amp;表示在后台运行</p>

<ul>
<li>-c 取消前一个关机命令</li>
<li>-h 关机</li>
<li>-r 重启</li>
</ul>
</li>
<li><p>poweroff</p></li>
<li><p>reboot</p></li>
<li><p>init 【0-6】</p>

<ul>
<li>0 关机</li>
<li>1 单用户</li>
<li>2 不完全多用户，不含NFS</li>
<li>3 完全多用户</li>
<li>4 未分配</li>
<li>5 图形界面</li>
<li>6 重启</li>
</ul>
</li>
</ul>


<h1>2.7挂载命令</h1>

<ul>
<li>mount #查看系统已挂载的设备</li>
<li>mount -a #根据配置文件/etc/fstab 的内容 下的设备自动挂载</li>
<li><p>mount [-t 文件系统] [-o 特殊选项] 设备文件名 挂载点</p>

<ul>
<li>-t ext3 ext4 iso9660（光盘）</li>
</ul>
</li>
<li><p>挂载光盘</p>

<ol>
<li>mkdir /mnt/cdroom</li>
<li>mount -t iso9660 /dev/sr0 /mnt/cdrom/ 其中-t在这里可省略因为系统知道sr0为光盘，知道它的文件系统。</li>
<li>umount 设备文件名或挂载点 #卸载 必须卸载！！！</li>
</ol>
</li>
<li><p>挂载U盘</p>

<ol>
<li>fdisk -l 查看系统中已经识别的硬盘</li>
<li>mount -t vfat /dec/sdbx/mnt/usb/ #sdbX通过上一条命令查看可知</li>
<li>Linux默认不支持NTFS文件系统，需要下载ntfs-3g安装可以挂载ntfs但是也只能读。</li>
</ol>
</li>
</ul>


<h1>2.8其他常用命令</h1>

<ul>
<li>用户登录查看

<ul>
<li>w  #查看登录登录用户的信息 输出一些信息 包括占用cpu等</li>
<li>who</li>
<li>输出 用户名 登录登录终端 登录时间和IP</li>
<li>last 查询登录日志 /var/log/wtmp</li>
<li>lastlog 查看每个用户的最后登录信息/var/log/lastlog</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OAuth]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/25/oauth/"/>
    <updated>2016-04-25T22:42:34+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/25/oauth</id>
    <content type="html"><![CDATA[<blockquote><p>开放式授权OAuth -Open Authorization</p></blockquote>

<h1>一、什么是OAuth</h1>

<p>OAUTH协议为用户资源的授权提供了一个安全的、开放而又简易的标准。与以往的授权方式不同之处是OAUTH的授权不会使第三方触及到用户的帐号信息（如用户名与密码），即第三方无需使用用户的用户名与密码就可以申请获得该用户资源的授权，因此OAUTH是安全的。oAuth是Open Authorization的简写。</p>

<h1>二、OAuth协议简介</h1>

<ul>
<li>OAuth 1.0 2007年年末 有漏洞</li>
<li>OAuth 2.0 2010年年初</li>
</ul>


<h1>三、三个重要步骤</h1>

<ol>
<li><p>请求OAuth登录页面</p>

<ul>
<li>Request Token URL -未授权的令牌请求服务器 XX网请求QQ登录页面时使用的带有特定参数的URL</li>
<li><a href="http://graph.qq.com/oauth/...?...&amp;client_id=*100490398&amp;...&amp;redirect_url=http://www.xxx.com/...">http://graph.qq.com/oauth/...?...&amp;client_id=*100490398&amp;...&amp;redirect_url=http://www.xxx.com/...</a></li>
<li>client_id APPID</li>
<li>client_secret APPKEY</li>
</ul>
</li>
<li><p>用户使用QQ号登录并授权</p>

<ul>
<li>验证用户密码成功后重定向到指定的url，此时可以通过$_GET[&lsquo;code&rsquo;]来获取</li>
</ul>
</li>
<li>返回登录结果

<ul>
<li>拿到加了密的code过后还需要请求 User Authorization URL -用户授权的令牌请求服务地址 用户QQ登录授权之后请求的一个带有特定参数的URL</li>
<li>用来提高安全性。</li>
<li>请求过后会得到一个响应数据，包含一些基本的账号信息。</li>
<li>code有生命周期（一般为几秒钟）并且只能使用一次。</li>
<li>请求成功过后可以拿到Access Token</li>
</ul>
</li>
</ol>


<h1>四、Access Token</h1>

<p>Access Token -用户通过第三方应用访问OAuth接口的令牌</p>

<ul>
<li>在请求API时会动态生成URL 并且都离不开 Access Token</li>
<li>Access Token具有较长生命周期（十天半个月）</li>
<li>Access Token过期过后可以选择重新登录或者在请求API时使用need_refresh_token（各个平台不同）=true 来刷新Access Token</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识Nginx]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/25/nginx/"/>
    <updated>2016-04-25T21:11:48+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/25/nginx</id>
    <content type="html"><![CDATA[<blockquote><p>今天接触到了新的服务器软件Nginx，为以后在Linux下搭建LNMP环境打下基础</p></blockquote>

<h1>一、常用的服务器软件</h1>

<ul>
<li>1 IIS：只能在Windows下运行性能不如Linux一类服务器</li>
<li>2 Tomcat： 面向Java的重量级服务器</li>
<li>3 Nginx：轻量级服务器，能支持较高的并发连接</li>
<li>4 Apache：稳定，开源，跨平台，但是高并发支持较弱</li>
</ul>


<h1>二、Nginx的优缺点</h1>

<ul>
<li>优点：可以实现高并发，部署简单，内存消耗较少，成本低等</li>
<li>缺点：rewrite功能不够强大，模块没有Apache多。</li>
</ul>


<h1>三、Nginx环境的搭建</h1>

<ol>
<li><p>Linux：</p>

<ul>
<li><a href="http://nginx.org/">Nginx官网</a>下载安装包</li>
<li>tar -zxvf nginx-1.9.15.tar.gz 解压</li>
<li>进入解压后的文件夹 ./configure</li>
<li>make</li>
<li>make install</li>
<li>cd /usr/local 在该文件下看到Nginx则安装成功</li>
</ul>
</li>
<li><p>Windows：</p>

<ul>
<li><a href="http://nginx.org/">Nginx官网</a>下载Windows安装包</li>
<li>解压即可</li>
</ul>
</li>
<li><p>常见错误：</p>

<ol>
<li>C compiler not found

<ul>
<li>进入root权限</li>
<li>yum -y install gcc gcc-c++ autoconf automake</li>
</ul>
</li>
<li><p>requires the PCRE library</p>

<ul>
<li>进入root权限</li>
<li>yum -y install pcre pcre-devel</li>
</ul>
</li>
<li><p>requires the zlib library</p>

<ul>
<li>进入root权限</li>
<li>yum -y install zlib zlib-devel</li>
</ul>
</li>
</ol>
</li>
</ol>


<h1>四、启动服务</h1>

<ul>
<li><p>Linux：</p>

<ul>
<li>/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</li>
</ul>
</li>
<li><p>Windows:</p>

<ul>
<li>运行nginx.exe</li>
</ul>


<p>  打开浏览器访问Localhost，能访问则启动成功。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信公众号开发]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/25/wei-xin-gong-zhong-hao-kai-fa/"/>
    <updated>2016-04-25T14:19:37+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/25/wei-xin-gong-zhong-hao-kai-fa</id>
    <content type="html"><![CDATA[<h1>微信公众号开发</h1>

<blockquote><p>上星期突然突发奇想，想弄个微信公众号来玩。然后再网上找了一些教程过就开始了。</p></blockquote>

<hr />

<h2>一、前期准备</h2>

<h3>1.1一个<a href="https://mp.weixin.qq.com/">微信公众号</a></h3>

<h3>1.2<a href="http://sae.sina.com.cn">SAE</a> 用来放你的代码</h3>

<hr />

<h2>二、开始开发</h2>

<h3>2.1公众号的分类</h3>

<pre><code>公众号分为服务号，订阅号，和企业号三种
简单的来说：
订阅号：你关注了过后会放进订阅号那个分类里的一些列号，每天能推送消息但是不能主动给你发消息（除非你在某个时间段内给它发了消息）
服务号：关注了过后和你的微信好友是在同级的，它可以给你发消息。
企业号：微信的新儿子，主要客户是面向企业。
我们这里主要说订阅号，订阅号又会分为几种，每种订阅号的API接口调用权限也是不同的。
</code></pre>

<h3>2.2SAE</h3>

<pre><code>在申请好SAE后，进入到控制台，创建新应用输入二级域名等一些列信息过后，运行环境选择你对应的开发语言，我选择的是PHP5.3然后选择空应用，创建。
回到控制台，你会看到你刚刚新建的应用，点进去过后选择代码管理，你可以看到你的GIT仓库地址，之后你把你的代码push到这个仓库就可以了。
</code></pre>

<h3>2.3下载官方接口程序文件</h3>

<pre><code>在微信公众平台左侧找到开发-&gt;开发者工具-&gt;进入开发者文档-&gt;开始开发-&gt;接入指南-&gt;第二步最后有一个PHP实例代码下载。将它下载下来。
</code></pre>

<h3>2.4公众号的配置</h3>

<pre><code>在申请完公众号后，登陆过后在管理页面的左边功能里有群发功能，自动回复等，这些操作是不需要涉及到代码的，我们不再多讲，我们主要讲的是开发者模式下的开发。
首先，在左侧菜单最后找到开发-&gt;基本配置-&gt;启用服务器配置-&gt;分别填写URL，Token，EncodingAESKey。其中URL就是你在SAE控制台应用名字下面那个URL http://xxx.applinzi.com Token 在你下载的代码中去找（默认为weixin，你也可以自己修改，只要他们保持一致即可。）EncodingAESKey选择随机生成即可。消息加解密方式，默认就行。提交过后我们的公众号就配置好了。
</code></pre>

<h3>2.5 Hello World !程序测试</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>/**
</span><span class='line'>  * wechat php test
</span><span class='line'>  */
</span><span class='line'>
</span><span class='line'>//define your token
</span><span class='line'>define("TOKEN", "weixin");
</span><span class='line'>$wechatObj = new wechatCallbackapiTest();
</span><span class='line'>if($_GET['echostr'])
</span><span class='line'>{
</span><span class='line'>    $wechatObj-&gt;valid();
</span><span class='line'>}else
</span><span class='line'>{
</span><span class='line'>    $wechatObj-&gt;responseMsg();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>class wechatCallbackapiTest
</span><span class='line'>{
</span><span class='line'>  public function valid()
</span><span class='line'>    {
</span><span class='line'>        $echoStr = $_GET["echostr"];
</span><span class='line'>
</span><span class='line'>        //valid signature , option
</span><span class='line'>        if($this-&gt;checkSignature()){
</span><span class='line'>          echo $echoStr;
</span><span class='line'>          exit;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public function responseMsg()
</span><span class='line'>    {
</span><span class='line'>      //get post data, May be due to the different environments
</span><span class='line'>      $postStr = $GLOBALS["HTTP_RAW_POST_DATA"];
</span><span class='line'>
</span><span class='line'>          //extract post data
</span><span class='line'>      if (!empty($postStr)){
</span><span class='line'>                /* libxml_disable_entity_loader is to prevent XML eXternal Entity Injection,
</span><span class='line'>                   the best way is to check the validity of xml by yourself */
</span><span class='line'>                libxml_disable_entity_loader(true);
</span><span class='line'>                  $postObj = simplexml_load_string($postStr, 'SimpleXMLElement', LIBXML_NOCDATA);
</span><span class='line'>                $fromUsername = $postObj-&gt;FromUserName;
</span><span class='line'>                $toUsername = $postObj-&gt;ToUserName;
</span><span class='line'>                $keyword = trim($postObj-&gt;Content);
</span><span class='line'>                $time = time();
</span><span class='line'>                $textTpl = "&lt;xml&gt;
</span><span class='line'>                          &lt;ToUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/ToUserName&gt;
</span><span class='line'>                          &lt;FromUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/FromUserName&gt;
</span><span class='line'>                          &lt;CreateTime&gt;%s&lt;/CreateTime&gt;
</span><span class='line'>                          &lt;MsgType&gt;&lt;![CDATA[%s]]&gt;&lt;/MsgType&gt;
</span><span class='line'>                          &lt;Content&gt;&lt;![CDATA[%s]]&gt;&lt;/Content&gt;
</span><span class='line'>                          &lt;FuncFlag&gt;0&lt;/FuncFlag&gt;
</span><span class='line'>                          &lt;/xml&gt;";             
</span><span class='line'>  if(!empty( $keyword ))//判断用户发送的信息不为空则回复Hello Wordld！
</span><span class='line'>                {
</span><span class='line'>                      $msgType = "text";
</span><span class='line'>                  $contentStr = "Hello World!";
</span><span class='line'>                  $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);
</span><span class='line'>                  echo $resultStr;
</span><span class='line'>                }else{
</span><span class='line'>                  echo "Input something...";
</span><span class='line'>                }
</span><span class='line'>
</span><span class='line'>        }else {
</span><span class='line'>          echo "";
</span><span class='line'>          exit;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>      
</span><span class='line'>  private function checkSignature()
</span><span class='line'>  {
</span><span class='line'>        // you must define TOKEN by yourself
</span><span class='line'>        if (!defined("TOKEN")) {
</span><span class='line'>            throw new Exception('TOKEN is not defined!');
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        $signature = $_GET["signature"];
</span><span class='line'>        $timestamp = $_GET["timestamp"];
</span><span class='line'>        $nonce = $_GET["nonce"];
</span><span class='line'>              
</span><span class='line'>      $token = TOKEN;
</span><span class='line'>      $tmpArr = array($token, $timestamp, $nonce);
</span><span class='line'>        // use SORT_STRING rule
</span><span class='line'>      sort($tmpArr, SORT_STRING);
</span><span class='line'>      $tmpStr = implode( $tmpArr );
</span><span class='line'>      $tmpStr = sha1( $tmpStr );
</span><span class='line'>      
</span><span class='line'>      if( $tmpStr == $signature ){
</span><span class='line'>          return true;
</span><span class='line'>      }else{
</span><span class='line'>          return false;
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<pre><code>将代码push到SAE上过后，给公众号发任意消息就能收到HelloWorld！回复。

实现了HelloWorld！实例，还有很多的回复图文，根据关键字实现多客服接入，以及一些其他的API功能调用，这些都可以参考官方的开发者文档。
</code></pre>

<h2>三、进阶知识</h2>

<h3>3.1公众平台测试账号</h3>

<pre><code>由于我们自己的订阅号很多API不能使用，就需要通过测试账号（可以调用所有的API）来调用其他API
</code></pre>

<h3>3.2access_token</h3>

<pre><code>公众号的全局唯一票据，公众号调用各接口时都需要使用access_token
</code></pre>

<h3>3.3网页授权接口</h3>

<pre><code>通过网页授权接口来获取用户的openID(用户关注某一个公众号的唯一标示，且关注不同的公众号openid是不同的)和基本信息。
</code></pre>

<h3>3.4JSSDK</h3>

<pre><code>可在网页中调用手机拍照，语言，选图等系统功能。
</code></pre>

<h3>3.5模板消息</h3>

<pre><code>模板消息可以主动给用户发送信息并且不受时间限制
</code></pre>

<p>除了以上功能外，微信公众平台还有很多的API接口可以调用，用以实现不同的功能，但是基本常用的API在开发文档上都有详细的教程，或者到baidu API 去检索你需要的功能。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIT+Octopress搭建个人博客]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/18/git-plus-octopressda-jian-ge-ren-bo-ke/"/>
    <updated>2016-04-18T23:13:10+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/18/git-plus-octopressda-jian-ge-ren-bo-ke</id>
    <content type="html"><![CDATA[<h1>GIT+Octopress搭建个人博客</h1>

<blockquote><p>新博客的第一篇博客</p></blockquote>

<p>很久以前就想自己搭个博客，今天终于开工了。在网上找了很多的教程和各种各样的框架，wordpress，jekyll等，最后选择了Octopress+Git搭建。</p>

<h2>一、环境搭建</h2>

<h3><a href="https://git-scm.com/download/">GIT</a>:版本管理工具，将代码托管到GIT。</h3>

<h3><a href="http://rubyinstaller.org/">Ruby+DevKit</a> ：生成静态页面</h3>

<h3><a href="http://jingyan.baidu.com/article/ca41422fe209271eaf99ed7c.html">MarkDownPad</a>：Windows下MarkDown语法编辑器</h3>

<h4>安装与配置</h4>

<pre><code>GIT和Markdown安装直接点击下一步就可以了。
在安装好git过后，桌面或其他位置点击右键GIT Bash 来配置Github账号（需要先注册GITHUB账号）
</code></pre>

<hr />

<p>1.1配置GITHUB</p>

<pre><code>```
git config --global user_name "XXXX"//你的github账号
git config --global user_email "XXXX"//你的邮箱
ssh-keygen -t rsa -C "YOUR_EMAIL"
```
</code></pre>

<p>下面回车默认为空即可</p>

<p>然后在将你系统盘（大多为C盘）->用户->当前用户（就是你装系统的时候给电脑取的名字）->.ssh文件夹下有id_rsa和id_rsa.pub两个文件打开后者全选复制。
添加到你的GITHUB的SSH KEYs （GITHUB登录后的setting里面）</p>

<p>回到你的bash</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -T git@github.com</span></code></pre></td></tr></table></div></figure>


<p>来测试SSH keYS,提示HI XXX! 则成功</p>

<hr />

<p>1.2配置RUBY</p>

<pre><code>一直下一步在选择安装路径的时候记得勾选第二个选项添加到你的系统路径。  
安装完成后继续安装DevKit，一直下一步即可，记得选择安装目录。
</code></pre>

<p>进到DevKit安装目录，打开Bash</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby dk.rb init
</span><span class='line'>ruby dk.rb install</span></code></pre></td></tr></table></div></figure>


<hr />

<p>1.3安装Octopress</p>

<pre><code>去到你要保存Octopress的位置打开Bash
git clone git：//github.com/imathis/octopress.git octopress//获取Octopress
cd octopress
gem sources -a https://ruby.taobao.org//添加国内RUBY软件源。在WINDOWS系统下有可能会失败 提示SSL错误。
</code></pre>

<p>建议使用
$ bundle config mirror.<a href="https://rubygems.org">https://rubygems.org</a> <a href="https://gems.ruby-china.org">https://gems.ruby-china.org</a>
<a href="https://gems.ruby-china.org/">参考网址</a></p>

<hr />

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundler
</span><span class='line'>bundler install
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<p>以上步奏完成并无ERROR则环境搭建成功</p>

<p>rake genreate //生成静态页面</p>

<p>rake preview //这行代码会在本地打开4000端口作为测试</p>

<p>你可以打开浏览器 输入 localhost：4000 来访问你的站点。</p>

<h4>生成博客与单页面</h4>

<hr />

<p>1.新建博客</p>

<pre><code>rake new_post["title"] //生成名为title的博客
</code></pre>

<hr />

<p>2.新建单页面</p>

<pre><code> rake new_page[test]//会生成source/test/index.markdown
 rake new_page[test/page.html]//会生成source/test/page.html
</code></pre>

<p>需要使用markdown语法来书写博客</p>

<hr />

<p>3.生成并本地预览</p>

<pre><code>rake generate
rake preview //http://localhost:4000
</code></pre>

<h4>部署网站到GITHUB</h4>

<hr />

<p>1.新建仓库</p>

<pre><code>username.github.io
</code></pre>

<hr />

<p>2.与本地Octopress 目录绑定</p>

<pre><code>rake setup_github_pages//这里会需要你输入你的GITHUB地址，请输入：git@github.com:yourname/yourname.github.com.git (将yourname替换成你的github登录名)
</code></pre>

<p>注意:这一步不要输入提示中提示的以io结束的地址。
    rake deploy</p>

<p>成功过后就可以通过访问
username.github.io 来访问你的个人博客了</p>

<hr />

<p>PS： 第一次用自己搭的博客写博客，markdown语法用起来也不太熟悉。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/18/jikexueyuan/"/>
    <updated>2016-04-18T15:18:17+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/18/jikexueyuan</id>
    <content type="html"><![CDATA[<h1>Hello World！</h1>

<h2>So Nice To Meet You！</h2>

<p><strong>The New Blog of Ewan Reton</strong></p>

<ul>
<li>PHP

<ul>
<li>sql</li>
</ul>
</li>
<li>HTML</li>
</ul>

]]></content>
  </entry>
  
</feed>
