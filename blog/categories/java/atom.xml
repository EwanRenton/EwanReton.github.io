<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Ewan Reton]]></title>
  <link href="http://ewanreton.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://ewanreton.github.io/"/>
  <updated>2016-08-05T23:19:21+08:00</updated>
  <id>http://ewanreton.github.io/</id>
  <author>
    <name><![CDATA[Ewan Reton]]></name>
    <email><![CDATA[liukedi001@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JSP九大内置对象详解]]></title>
    <link href="http://ewanreton.github.io/blog/2016/06/17/jsp-object/"/>
    <updated>2016-06-17T15:15:51+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/06/17/jsp-object</id>
    <content type="html"><![CDATA[<h1>内置对象简介</h1>

<blockquote><p>JSP 内置对象是 Web 容器创建的一组对象，不需使用 new 关键字就可以直接使用的内置对象。</p></blockquote>

<pre><code class="java">    &lt;%
        int[] value = {10,20,30};
        for(int i : value){ //Java 中for循环的增强形式
            out.println(value[i]); //out 为 JSP 中的内置对象
        }
    %&gt;
</code></pre>

<h1>九大内置对象</h1>

<ol>
<li>五大常用的内置对象：out、request、reponse、session、application</li>
<li>不常用的内置对象：Page、pageContext、exception、config</li>
</ol>


<h2>缓冲区</h2>

<ul>
<li>缓冲区：Buffer,所谓缓冲区就是内存的一块区域用来保存临时的数据。举个例子，刚煮好的一大锅米饭，一粒一粒吃会吃得很慢，而我们就会选择把米饭乘到碗里，一碗一碗吃岂不痛快。淡然，也可以把勺子当做容器，将米饭在不同的容器中传递，最后通过勺子吃掉，在这里勺子就可以看做缓冲区，多个字节在不同的缓冲区传递</li>
</ul>


<h2>out 内置对象</h2>

<ul>
<li>out 对象是JspWriter类实例，是向客户端输出内容常用的对象</li>
<li><p>常用方法如下</p>

<ol>
<li>void println() 向客户端打印字符串</li>
<li>void flush() 将缓冲区的内容输出到客户端</li>
<li>void clear() 清楚缓存区的内容，如果在 flush 之后则调用会抛出异常</li>
<li>void clearBuffer() 清楚缓冲区的内容，如果在 flush 之后调用不会出现异常</li>
<li>int getBufferSize() 返回缓冲区字节数大小，若不设设置缓冲区则为0</li>
<li>int getRemaining() 返回缓冲区还剩余多少字节可用</li>
<li>boolean isAutoFlush() 返回缓冲区满时，是自动清空还是抛出异常

<h2>request 内置对象</h2></li>
</ol>
</li>
<li><p>客户端的请求信息被封装在 request 对象中，通过它才能了解到客户的需求，然后做出相应。它是 HttpServletRequest类的实例。request 具有请求域，即在完成用户请求前，该对象一直有效。</p></li>
<li>常见的方法

<ol>
<li>请求方法名：request.getMethod</li>
<li>请求的资源：request.getRequestURL</li>
<li>请求使用的协议：request.getProtocol</li>
<li>请求使用的服务器 IP：request.getServerName</li>
<li>请求的服务器端口：request.getServerPort</li>
<li>客户端的 IP 地址：request.getRemoteAddr</li>
<li>客户端的主机名：request.getRemoteHost</li>
<li>获取表单提交的值：request.getParameter</li>
<li>返回请求者的MIME类型：request.getContentType</li>
<li>获取表单提交的多个值：request.getParameterValues</li>
<li>web 组件之间共享信息,储存：request.setAttribute</li>
<li>web 组件之间共享信息,获取：request.getAttribute</li>
</ol>
</li>
<li>下面以一个录入注册例子简单理解 request</li>
</ul>


<p>先是 用户注册 register.jsp，这里只要是创建了一个表单，有用户名、密码、爱好几个注册内容块。
<code>java register.jsp
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;录入注册信息&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;用户注册&lt;/h1&gt;
    &lt;hr&gt;
    &lt;form action="do_register.jsp" methed="post"&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td&gt;用户名：&lt;/td&gt;
                &lt;td&gt;&lt;input type="text" name = "userName"&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;密码&lt;/td&gt;
                &lt;td&gt;&lt;input type="password" name = "passWord"&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;爱好：&lt;/td&gt;
                &lt;td&gt;
                    &lt;input type="checkbox" name="favorite" value="Java"&gt;Java
                    &lt;input type="checkbox" name="favorite" value="Android"&gt;Android
                    &lt;input type="checkbox" name="favorite" value="JavaWeb"&gt;JavaWeb
                    &lt;input type="checkbox" name="favorite" value="PHP"&gt;PHP
                    &lt;input type="checkbox" name="favorite" value="IOS"&gt;IOS
                &lt;/td&gt;
            &lt;/tr&gt;
                &lt;td colspan="2"&gt; &lt;input type = "submit" value = "提交"&gt; &lt;/td&gt;
        &lt;/table&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code>
再是处理注册信息 do_register.jsp，这里主要是通过request 来处理注册的信息</p>

<pre><code class="java do_register.jsp">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"%&gt;

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;处理注册信息&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
        &lt;%
            String userName = request.getParameter("userName");
            String passWord = request.getParameter("passWord");
            //利用out内置对象输出
            out.println(userName);
            out.println("&lt;br&gt;");
            out.println(passWord);
        %&gt;&lt;br&gt;
        &lt;%
            String favorite[] = request.getParameterValues("favorite");
            out.print("&lt;br&gt;");
            for(int i=0; i&lt;favorite.length; i++){
                out.println(favorite[i]+" &amp;nbsp");
            }
        %&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>reponse 内置对象</h2>

<ul>
<li>reponse 对象包含了响应客户端请求的有关信息，但在 jsp 中很少直接使用到它。他是 HttpServletResponse 类的实例。reponse 对象具有页面作用域，即方位一个页面时，该页面内的 reponse 对象只能对这次访问有效，其他页面的 reponse 对象对当前页面无效。</li>
<li>常用方法如下

<ol>
<li>String getCharacterEncoding() 返回响应用的何种字符编码</li>
<li>void setContentType(String type) 设置响应的MIME类型</li>
<li>PrintWriter getWriter() 返回可以向客户端输出字符的一个对象（注意与内置对象out的区别：一般情况下，PrintWriter 的输出都会在内置对象out之前显示，即使PrintWriter 代码靠后，但是可以在out 之后调用flush 方法可以解决）</li>
<li>sendRedirect(java.lang.String location) 重新定向客户端的请求</li>
</ol>
</li>
</ul>


<pre><code class="java">&lt;%@page import="java.io.PrintWriter"%&gt;
&lt;%@ page language="java" contentType="text/html; charset=UTF-8"%&gt;

&lt;%
    //设置响应的MIME类型
    response.setContentType("text/html;charset=utf-8");
    out.println("&lt;h1&gt;reponse内置对象&lt;/h1&gt;");
    out.println("&lt;br&gt;");
    //out.flush();//将缓冲区内容输出到客户端，避免先显示 PrintWriter 输出
    PrintWriter outer = response.getWriter();
    outer.println("这是reponse对象生成的输出流");
    //请求重定向到register 代码2, 此时将flush()注释掉不然会抛出异常
    response.sendRedirect("register.jsp");
%&gt;
</code></pre>

<ul>
<li>请求重定向：客户端行为，response.sedRedirect(),从本质上讲等同于两次请求，前一次的请求对象不会保存，地址栏的的URL会发生改变。可以这么理解,你先乘车去了A公司，但是A公司的人说这个事不归他们管，让你去去B公司；然后你就从A公司退了出来，自己乘车去了B公司。</li>
<li>请求转发：服务器行为，request.getRequestDispatcher().forworder(req,resp);适宜次请求，转发后请求对象会保存，地址栏的URL地址不会改变。一样也可以这样理解，你去A公司办事，A公司看了以后发现这件事该归B公司管，但是并没有把你退回来，而是A公司自己去联系了B公司，让B公司办好后，送了过来</li>
</ul>


<h2>session 内置对象</h2>

<ul>
<li>session 对象是 HttpSession 类的实例</li>
<li>session 表示客户端与服务器的一次会话，在服务的内存在保存着不同用户的 session 对象。</li>
<li>Web 中的 session 指的是用户在游览某个网站时，从进入网站到关闭游览器所经过的这段时间，也就是用户游览这个网站的所花费的时间，session 实际上就是一个特定的时间概念</li>
<li>session 对象是在第一个JSP页面被装载时自动创建的，完成会话期的管理</li>
<li>当一个客户访问一个服务器时，可能会在服务器的几个页面之间来回切换，此时服务器就应该有某种方法来知道这是同一个用户</li>
<li>常用方法

<ol>
<li>long getCreationTime() 返回 session 的创建时间</li>
<li>String getId() 返回 session 创建时JSP引擎为它创建的唯一ID号</li>
<li>Object setAttribute(String name,Object value) 使用指定名称将对象绑定到此会话</li>
<li>Object getAttribute(String name) 返回与此会话中的指定名称绑定在一起时的对象，若无则返回null</li>
<li>String[] getValueNames() 返回一个包含此session中所有可用属性的数组</li>
<li>int getMaxInactiveInterval() 返回两次请求间隔时间多长时间此session被取消</li>
</ol>
</li>
</ul>


<p> 结合以下代码理解</p>

<pre><code class="java">&lt;%@page import="java.text.SimpleDateFormat,java.util.*"%&gt;
&lt;%@ page language="java" contentType="text/html; charset=UTF-8"%&gt;

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;session内置对象&lt;/title&gt;
&lt;/head&gt;
  &lt;h1&gt;session内置对象&lt;/h1&gt;
  &lt;hr&gt;
  &lt;%
      SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日 HH:mm:ss");
      session.setAttribute("userName", "admin");
      session.setAttribute("otherName", "otherUser");
      //设置当前session最大生命期限   单位是秒
    session.setMaxInactiveInterval(5);//10秒钟
  %&gt;
      session 创建时间：&lt;%= sdf.format(new Date(session.getCreationTime())) %&gt;&lt;br&gt;
      获取session的ID：&lt;%=session.getId() %&gt;&lt;br&gt;
      从 session 中获取用户名：&lt;%= session.getAttribute("userName") %&gt;&lt;br&gt;
    获取所有可用属性的值：&lt;%
                        String str[] = session.getValueNames();
                        for(int i=0;i&lt;str.length;i++)
                        {
                            out.println(str[i]+" &amp;nbsp");
                        }
                    %&gt;&lt;br&gt;

    &lt;a href="reponse.jsp" target="_blank"&gt;跳转到response.jsp&lt;/a&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>session 的生命周期</h2>

<ul>
<li>创建：当客户端第一次访问某个JSP或者 Servlet 时候，服务器会为当前会话创建一个 session ID，每次客户端向服务器发送请求时，都会将此 ID 携带过去与服务器进行校检。</li>
<li>活动：某次会话当中通过超链接打开得新页面属于同一次会话；只要当前全部会话页面没有全部关闭，重新打开的新的游览器窗口访问同一个项目资源属于同一个会话；除非将本次会话的所有页面全部关闭，再次访问就会创建新的session ID。注意事项，原有会话还会存在，只是这个旧的session ID 任然存在于服务器，只不过再也没有客户端携带者它来向服务器访问了。</li>
<li>销毁：Session 的三种销毁方式，调用 session.invalidate() 方法；session 过期（超时）；服务器重新启动。</li>
</ul>


<h2>application 内置对象</h2>

<ul>
<li>application 对象实现了用户间的数据共享，可存放全局变量</li>
<li>application 开始于服务器的启动，终止于服务器的关闭</li>
<li>在用户的前后连接和不同用户之间的连接中，可以对 application 同一属性进行操作</li>
<li>在任何地方对 application 对象进行操作，都将影响到其他用户对此的访问</li>
<li>服务器的启动和关闭决定了 application 的声明周期</li>
<li>application 对象是 ServletContext 类的实例</li>
<li>常用方法

<ol>
<li>void setAttribute(String name,Object value) 使用指定的名称将对象绑定到会话</li>
<li>Object getAttribute(String name) 返回与会话名称绑在一起的对象，如果没有对象绑定在此名称下，则返回 null</li>
<li>Enumeration getAttributeNames() 返回所有可用属性名的枚举类型</li>
<li>String getServerInfo() 返回 JSP(SERVLET) 引擎名及版本号</li>
</ol>
</li>
</ul>


<pre><code class="java">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"
    import="java.util.*"
%&gt;

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;application.jsp&lt;/title&gt;
&lt;/head&gt;
  &lt;%
      application.setAttribute("name", "小明");
      application.setAttribute("age", "10");
  %&gt;
      名字是：&lt;%=application.getAttribute("name") %&gt;&lt;br&gt;
      获取application所有属性：&lt;%
          Enumeration attribute =  application.getAttributeNames();
          while(attribute.hasMoreElements())
              out.println(attribute.nextElement());
      %&gt;&lt;br&gt;
      当前引擎名及版本号：&lt;%=application.getServerInfo() %&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>Page 内置对象</h2>

<ul>
<li>Page 对象就是指向当前JSP页面本身，有点像类中的 this，它是 java.long.Object 类的实例</li>
<li>常用方法

<ol>
<li>class getClass() 返回此 Object 的类</li>
<li>int hashCode() 返回此 Objcet 的 hash 码</li>
<li>boolean equals(Object obj) 判断此 Object 是否与指定的 Object 对象相等</li>
<li>void copy(Object obj) 把此 Object 拷贝到指定的 Object 对象中</li>
<li>Object clone() 克隆此 Object 对象</li>
<li>String toString() 把此 Object 对象转换成 String 类的对象</li>
<li>void notify() 唤醒一个等待的线程</li>
<li>void notifyAll() 唤醒所有等待的线程</li>
<li>void wait(int timeout) 使一个线程处于等待直到 timeout 结束或被唤醒</li>
<li>void wait() 是一个线程处于等待直到被唤醒</li>
</ol>
</li>
</ul>


<p>通过观察以上的方法基本上都是 Object 类中方法的实现，以下就选择常用的 toString 方法实验</p>

<pre><code class="java">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"%&gt;

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Page.jsp&lt;/title&gt;
&lt;/head&gt;
      当前page页面对象字符串描述:&lt;%=page.toString() %&gt;&lt;br&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>打印的为：</p>

<pre><code>当前page页面对象字符串描述:org.apache.jsp.InnerObject.Page_jsp@526f75ab
</code></pre>

<h2>PageContext 内置对象</h2>

<ul>
<li>pageContext 对象提供了对JSP页面内所有的对象及名字空间的访问，也就是说他可以访问到本页所在的 SESSION .也可以取本页面所在的</li>
<li>application 的某一属性值</li>
<li>它相当于页面中所有功能的集大成者,它的本类名也叫 pageContext</li>
<li>常用方法

<ol>
<li>JspWriter getOut() 返回当前客户端响应被使用的</li>
<li>JspWriter 流（out）</li>
<li>HttpSession getSession() 返回当前客户端响应被使用的 HttpSession 对象（session）</li>
<li>Object getPage() 返回当前页面的 Object 对象（page）</li>
<li>ServletRequest getRequest() 返回当前页的 ServletRequest 对象（request）</li>
<li>ServletResponse() 返回当前页面的 ServletResponse 对象（response）</li>
<li>void setAttribute(String name,Object attribute) 设置属性及属性值</li>
<li>Object getAttribute(String name，int scope) 在指定范围内获取属性的值</li>
<li>int getAttributeScope(String name) 返回某属性的作用范围</li>
<li>void forward(String relativeUrlPath) 返回当前页面重导另一个页面</li>
<li>void include(String relativeUrlPath) 在当前位置包含另一文件</li>
</ol>
</li>
</ul>


<h2>Config 内置对象</h2>

<ul>
<li>Config 对象是在一个Servlet 初始化时，JSP 引擎向它传递信息用的，此信息包括 Servlet 初始化时所需要用到的参数（通常属性名和属性值构成）以及服务器有关信息（通过传递一个ServletContext 对象）</li>
<li>常用方法

<ol>
<li>ServletContext getServletContext() 返回有关服务器相关信息的ServletContext 对象</li>
<li>String getInitParameter(String name) 返回初始化参数的值</li>
<li>Enumeration getInitParameterNames() 返回 Servlet 初始化所需所有参数的枚举</li>
</ol>
</li>
</ul>


<h2>Exception 内置对象</h2>

<ul>
<li>Exception 对象是一个异常对象，当一个页面运行中发生了异常，就产生了这个对象。如果一个 Jsp 页面要引用此对象，就必须 isErrorPage 设为 true ,否则无法编译。它实际上市 java.lang,Throwable 的对象</li>
<li>常用方法

<ol>
<li>String getMessage() 返回描述异常消息</li>
<li>String toString() 返回有关异常的简短描述消息</li>
<li>void printStackTrace() 显示异常及其栈轨迹</li>
<li>Throwable FillInStackTrace() 重写异常的执行栈轨迹</li>
</ol>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsp三个编译指令和七个动作指令]]></title>
    <link href="http://ewanreton.github.io/blog/2016/06/16/jsp-bianyizhiling-dongzuozhiling/"/>
    <updated>2016-06-16T12:53:01+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/06/16/jsp-bianyizhiling-dongzuozhiling</id>
    <content type="html"><![CDATA[<blockquote><p>最近开始学习JSP的相关知识，先作为一个入门的了解。</p></blockquote>

<h1>三个编译指令</h1>

<ol>
<li>page指令</li>
</ol>


<p>page指令用户定义JSP页面中的全局属性，它的语法格式如下：</p>

<pre><code class="java">    &lt;%page
    {language="java"}
    {extends="package.class"}
    {import="{package.class|package.*},..."}
    {session="true | false"}
    {buffer="none | 8kb | sizekb"}
    { false"}
    {isThreadSafe="true | false"}
    {info="text"}
    {errorPage="relativeURL"}
    {contentType="mimeType [;charset=characterSet]" | "text/html ; charset=ISO-8859-1"}
    {isErrorPage="true | false"}
    {pageEncoding="charset=characrerSet | ISO-8859-1"}
    %&gt; 
</code></pre>

<p> page指令对整个页面有效，包括静态的包含文件，但page指令不能用于被动态包含的文件，例如使用<code>&lt;jsp:include&gt;</code>包含的文件。在一个JSP页面中可以使用多个page指令，但page指令中的属性只能出现一次(import属性除外)。</p>

<ol>
<li>include指令</li>
</ol>


<p>include指令用于在JSP页面中包含其他文件，它的语法格式如下：</p>

<pre><code class="java">    &lt;% include file="路径名"&gt;
</code></pre>

<p>include指令仅有一个属性file，其值为文件的相对路径。include指令包含的过程是静态的，包含的文件可以是JSP、HTML或者Inc文件等。</p>

<ol>
<li>taglib指令</li>
</ol>


<p>taglib指令允许用户使用标签库自定义新的标签，它的语法格式如下：</p>

<pre><code class="java">    &lt;% taglib uri="taglibURI" prefix="tabPrefix"%&gt;
</code></pre>

<p>taglib指令中的uri属性用于根据标签的前缀对自定义的标签进行唯一的命名，其值可以食相对路径，就对路径或标签库描述文件。属性prefix制定了标签的前缀。</p>

<h1>七个动作指令</h1>

<blockquote><p>动作指令与编译指令不间，编译指令是通知 Servlet 引擎的处理消息，而动作指令只是运行时的脚本动作。编译指令在将JSP 编译成 Servlet 时起作用:处理指令通常可替换成 Java脚本，是 JSP脚本的标准化写法。</p></blockquote>

<p> JSP7 个 动作指令如下 ：</p>

<ul>
<li>jsp:forward: 执行页面转向，将请求的处理转发到下一个页面。</li>
<li>jsp:param: 用于传递参数，必须与其他支持参数曲标签一起使用。</li>
<li>jsp:include: 用于动态引入一个 JSP 页面。</li>
<li>jsp:p1ugin: 用于下载 JavaBean 或 Applet 到客户端执行。</li>
<li>jsp:useBean: 使用 JavaBean。</li>
<li>jsp:setProperty: 修改 JavaBean 实例的属性值。</li>
<li>jsp:getProperty: 获取 JavaBean 实例的属性值。</li>
</ul>


<p><strong>jsp:forward</strong></p>

<blockquote><p>jsp:forward动作把请求转到另外的页面。可以转发静态的HTML页面，也可以转发动态的JSP页面，或者转发到容器中的servlet jsp:forward标记只有一个属性page。 page属性包含的是一个相对URL。 page的值既可以直接给出，也可以在请求的时候动态计算</p></blockquote>

<pre><code class="java index.jsp">    &lt;%@ page language="java" contentType="text/html; charset=UTF-8"
        pageEncoding="UTF-8"%&gt;
    &lt;jsp:forward page="login.jsp"&gt;
    &lt;jsp:param value="reton" name="userName"/&gt;
    &lt;jsp:param value="reton" name="passWord"/&gt;
    &lt;/jsp:forward&gt; //forward下面的代码不会被执行
    dddddd
</code></pre>

<pre><code class="java login.jsp">    &lt;%@ page language="java" contentType="text/html; charset=UTF-8"
        pageEncoding="UTF-8"%&gt;
    &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
    &lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
    &lt;title&gt;Login here&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;%
     String userName=request.getParameter("userName");
     String passWord=request.getParameter("passWord");
     out.println(userName);
     out.println("&lt;br/&gt;");
     out.println(passWord);
    %&gt;
    &lt;/body&gt;
    &lt;/html&gt;
</code></pre>

<p><strong>jsp:include动作</strong></p>

<blockquote><p>（拿目标页面插入原有页面）该动作是一个动态的include指令，也用于带入某个页面，他不会导入被include页面的编译指令，仅仅导入页面的body内容插入到本页面　　该动作把指定文件插入正在生成的页面。</p></blockquote>

<ul>
<li>flush：用于指定输出缓存是否转移到被导入的文件中，

<ul>
<li>true：包含在被导入的文件中</li>
<li>false：包含在源文件中</li>
</ul>
</li>
</ul>


<pre><code class="java">    　&lt;P&gt;
    　　Here is a summary of our four most recent news stories:
    　　&lt;OL&gt;
    　　&lt;LI&gt;&lt;jsp:include page="news/Item1.html" flush="true"/&gt;
    　　&lt;LI&gt;&lt;jsp:include page="news/Item2.html" flush="true"/&gt;
    　　&lt;LI&gt;&lt;jsp:include page="news/Item3.html" flush="true"/&gt;
    　　&lt;LI&gt;&lt;jsp:include page="news/Item4.html" flush="true"/&gt;
    　　&lt;/OL&gt;　
</code></pre>

<p>　前面已经介绍过include指令，它是在JSP文件被转换成Servlet的时候引入文件，而这里的jsp:include动作不同，插入文件的时间是在页面被请求的时候。jsp:include动作的文件引入时间决定了它的效率要稍微差一点，而且被引用文件不能包含某些JSP代码（例如不能设置HTTP头），但它的灵活性却要好得多。</p>

<p><strong>jsp:useBean</strong></p>

<blockquote><p>jsp:useBean动作用来装载一个将在JSP页面中使用的JavaBean。这个功能非常有用，因为它使得我们既可以发挥Java组件重用的优势，同时也避免了损失JSP区别于Servlet的方便性。</p></blockquote>

<p>jsp:useBean动作最简单的语法为：</p>

<p>&lt;jsp:useBean id=&ldquo;user&rdquo; class=&ldquo;com.reton.entity.UserEntity&rdquo;>&lt;/jsp:useBean></p>

<p>这行代码的含义是：“创建一个由class属性指定的类的实例，然后把它绑定到其名字由id属性给出的变量上”。不过，就象我们接下来会看到的，定义一个scope属性可以让Bean关联到更多的页面。此时，jsp:useBean动作只有在不存在同样id和scope的Bean时才创建新的对象实例，同时，获得现有Bean的引用就变得很有必要。</p>

<p>获得Bean实例之后，要修改Bean的属性既可以通过jsp:setProperty动作进行，也可以在Scriptlet中利用id属性所命名的对象变量，通过调用该对象的方法显式地修改其属性。这使我们想起，当我们说“某个Bean有一个类型为X的属性foo”时，就意味着“这个类有一个返回值类型为X的getFoo方法，还有一个setFoo方法以X类型的值为参数”。</p>

<p>有关jsp:setProperty动作的详细情况在后面讨论。但现在必须了解的是，我们既可以通过jsp:setProperty动作的value属性直接提供一个值，也可以通过param属性声明Bean的属性值来自指定的请求参数，还可以列出Bean属性表明它的值应该来自请求参数中的同名变量。</p>

<p>在JSP表达式或Scriptlet中读取Bean属性通过调用相应的getXXX方法实现，或者更一般地，使用jsp:getProperty动作。</p>

<p>注意包含Bean的类文件应该放到服务器正式存放Java类的目录下，而不是保留给修改后能够自动装载的类的目录。例如，对于Java Web Server来说，Bean和所有Bean用到的类都应该放入classes目录，或者封装进jar文件后放入lib目录，但不应该放到servlets下。</p>

<p>一个简单的例子：</p>

<pre><code class="java JavaResources/src/com.reton.entity">    package com.reton.entity;

    import java.io.Serializable;

    public class UserEntity implements Serializable {
        private String userName;
        private String passWord;

        public UserEntity() {
            super();
        }

        public String getUserName() {
            return userName;
        }

        public void setUserName(String userName) {
            this.userName = userName;
        }

        public String getPassWord() {
            return passWord;
        }

        public void setPassWord(String passWord) {
            this.passWord = passWord;
        }

    }
</code></pre>

<pre><code class="java register.jsp">    &lt;%@ page language="java" contentType="text/html; charset=UTF-8"
        pageEncoding="UTF-8"%&gt;
    &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
    &lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
    &lt;title&gt;Insert title here&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;form action="do_register.jsp" method="post"&gt;
        用户名：&lt;input type="text" name="userName"/&gt;
        密码:&lt;input type="password" name="passWord"/&gt;
        &lt;input type="submit" value="提交"/&gt;
    &lt;/form&gt;
    &lt;/body&gt;
    &lt;/html&gt;
</code></pre>

<pre><code class="java do_register.jsp">    &lt;%@ page language="java" contentType="text/html; charset=UTF-8"
        pageEncoding="UTF-8"%&gt;
    &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
    &lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
    &lt;title&gt;注册信息&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;jsp:useBean id="user" class="com.reton.entity.UserEntity"&gt;&lt;/jsp:useBean&gt;
    &lt;jsp:setProperty property="userName" name="user"/&gt;
    &lt;jsp:setProperty property="passWord" name="user"/&gt;
    &lt;%
    request.setCharacterEncoding("utf-8");
        String userName=request.getParameter("userName");
        String passWord=request.getParameter("passWord");
        out.println(userName);
        out.println("&lt;br/&gt;");
        out.println(passWord);
    %&gt;
    &lt;br/&gt;
    &lt;jsp:getProperty property="userName" name="user"/&gt;
    &lt;jsp:getProperty property="passWord" name="user"/&gt;
    &lt;/body&gt;
    &lt;/html&gt;
</code></pre>

<p><strong>GetProperty</strong></p>

<p>&lt;jsp:getProperty>标签表示获取BEAN的属性的值并将之转化为一个字符串，然后将其插入到输出的页面中。</p>

<p>语法：</p>

<p>&lt;jsp:getProperty name=&ldquo;name&rdquo; property=&ldquo;propertyName&rdquo; /></p>

<p>注：</p>

<p>1、在使用&lt;jsp:getProperty>之前，必须用&lt;jsp:useBean>来创建它。</p>

<p>2、不能使用&lt;jsp:getProperty>来检索一个已经被索引了的属性。</p>

<p>3、能够和JavaBeans组件一起使用&lt;jsp:getProperty>，但是不能与Enterprise Java Bean一起使用。</p>

<p><strong>SetProperty指令</strong></p>

<p>&lt;jsp:setProperty>标签表示用来设置Bean中的属性值。</p>

<p>语法：</p>

<p>&lt;jsp:setProperty name=&ldquo;beanName&rdquo; prop_expr /></p>

<p>其中prop_expr有以下几种可能的情形：</p>

<p>property=&ldquo;*&rdquo; | property=&ldquo;propertyName&rdquo; | property=&ldquo;propertyName&rdquo; param=&ldquo;parameterName&rdquo; | property=&ldquo;propertyName&rdquo; value=&ldquo;propertyValue&rdquo;</p>

<pre><code class="java">    &lt;!-- id表示实例名  class表示类名 scope 表示作用的范围 --&gt;  
    &lt;jsp:useBean id="pe" class="com.reton.entity" scope="page"&gt;&lt;/jsp:useBean&gt;  
    &lt;!-- name表示实例名  property表示属性 vaue表示属性值 --&gt;  
    &lt;jsp:setProperty name="pe"   property="name" value="xxx"/&gt;  
    &lt;jsp:setProperty property="age" name="pe" value="23"/&gt;  
    &lt;jsp:getProperty property="name" name="pe" /&gt;  
    &lt;jsp:getProperty property="age" name="pe" /&gt;  
</code></pre>

<p><strong>param</strong></p>

<p>param指令用于设置参数值，这个指令本身不能单独使用，单独的param没有实际意义，param指令可与一下三个指令结合使用：</p>

<p>jsp:include</p>

<p>jsp:forward</p>

<p>jsp:plugin</p>

<p>param指令的语法格式如下：</p>

<p>&lt;jsp:param  name=&ldquo;paramName&rdquo; value=&ldquo;paramValue&rdquo;></p>

<p><strong>Plugin</strong></p>

<p> （用于下载服务器端的javaBean或applet到客户端）　　jsp:plugin动作用来根据浏览器的类型，插入通过Java插件运行Java Applet所必需的OBJECT或EMBED元素。</p>

<p>&lt;jsp:plugin<br/>
  type=&ldquo;bean | applet&rdquo;   : 被执行的java程序的类型
  code=&ldquo;classFileName&rdquo; ：被执行的文件名，必须以  .class 结尾
  codebase=&ldquo;classFileDirectoryName&rdquo;   ：被执行文件的所在目录
  [ name=&ldquo;instanceName&rdquo; ] :给程序起一个名字用来标识该程序
  [ archive=&ldquo;URIToArchive, &hellip;&rdquo; ] ：指向一些要预先载入的将要使用到的类
  [ align=&ldquo;bottom | top | middle | left | right&rdquo; ] ：
  [ height=&ldquo;displayPixels&rdquo; ]
  [ width=&ldquo;displayPixels&rdquo; ]
  [ hspace=&ldquo;leftRightPixels&rdquo; ]
  [ vspace=&ldquo;topBottomPixels&rdquo; ]
  [ jreversion=&ldquo;JREVersionNumber | 1.1&rdquo; ]   ：能正确运行改程序必须的JRE的版本
  [ nspluginurl=&ldquo;URLToPlugin&rdquo; ]<br/>
  [ iepluginurl=&ldquo;URLToPlugin&rdquo; ] >
  [ &lt;jsp:params>
  [ &lt;jsp:param name=&ldquo;parameterName&rdquo; value=&ldquo;{parameterValue | &lt;%= expression %>}&rdquo; /> ]+
  &lt;/jsp:params> ]
  [ &lt;jsp:fallback> text message for user &lt;/jsp:fallback> ]  ：当不能正确显示该Applet时，显示该指令中的文本提示
 &lt;jsp:plugin></p>
]]></content>
  </entry>
  
</feed>
