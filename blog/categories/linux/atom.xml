<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Ewan Reton]]></title>
  <link href="http://ewanreton.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://ewanreton.github.io/"/>
  <updated>2016-05-10T21:42:52+08:00</updated>
  <id>http://ewanreton.github.io/</id>
  <author>
    <name><![CDATA[Ewan Reton]]></name>
    <email><![CDATA[liukedi001@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linx下安装Git]]></title>
    <link href="http://ewanreton.github.io/blog/2016/05/09/linux-git/"/>
    <updated>2016-05-09T23:25:34+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/05/09/linux-git</id>
    <content type="html"><![CDATA[<blockquote><p>考试季过去了，准备开始将日常使用迁移到Linux下，今天想在Linux下装Git，开始觉得这应该是个很简单的事，谁知道这个花了好多时间。</p></blockquote>

<p>首先在网上找了一个博文作为参考，<a href="http://blog.csdn.net/naola2001/article/details/43228769">传送门</a></p>

<p>服务器端：</p>

<pre class="prettyprint text">
#yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel
##wget https://github.com/git/git/archive/v2.2.0.tar.gz
#tar zxvf git-2.2.0.tar.gz
#cd git-2.2.0
#make prefix=/usr/local all
#make prefix=/usr/local install  #root用户运行
</pre>


<pre><code class="php">如果编译时提示错误：
LINK git-credential-store
libgit.a(utf8.o): In function `reencode_string_iconv’:
/opt/git-master/utf8.c:530: undefined reference to `libiconv’
libgit.a(utf8.o): In function `reencode_string_len’:
/opt/git-master/utf8.c:569: undefined reference to `libiconv_open’
/opt/git-master/utf8.c:588: undefined reference to `libiconv_close’
/opt/git-master/utf8.c:582: undefined reference to `libiconv_open’
collect2: ld 返回 1
make: *** [git-credential-store] 错误 1
解决办法：

cd /usr/local/src/
wget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz
tar -zxvf libiconv-1.14.tar.gz
cd libiconv-1.14
./configure -prefix=/usr/local/libiconv  &amp;&amp;  make  &amp;&amp; sudo  make install
然后回到git继续编译：

cd /usr/local/src/git-1.8.5
make configure
./configure --prefix=/usr/local -with-iconv=/usr/local/libiconv
make
make install


# git --version
git version 2.2.0
</code></pre>

<p>按照教程，到这里应该就成功了。
但是在解决了lib的错误后在回来执行 make 时遇到了错误
<code>php
In function `init_gettext_charset':
/root/soft/git-2012-01-19/gettext.c:115: undefined reference to `locale_charset'
collect2: ld returned 1 exit status
</code></p>

<p>解决方法：<a href="http://mono.1490590.n4.nabble.com/Can-t-compile-git-for-a-long-time-td3336232.html#a4312244">传送门</a>
其中一个corey_yan的回答成功解决了问题</p>

<pre><code>I encounter the same problem in centos 5.2 and try to solve it for a long time 

libgit.a(gettext.o): In function `init_gettext_charset': 
/root/soft/git-2012-01-19/gettext.c:115: undefined reference to `locale_charset' 
collect2: ld returned 1 exit status 


After checking the detail Link command 
make -n | grep "git-daemon" 
echo '   ' LINK git-daemon; 
cc  -g -O2 -I. -pthread -DHAVE_PATHS_H -DHAVE_LIBCHARSET_H -DHAVE_DEV_TTY -DSHA1_HEADER='&lt;openssl/sha.h&gt;'  -DNO_STRLCPY -DNO_MKSTEMPS -o git-daemon   daemon.o libgit.a xdiff/lib.a  -lz  -liconv  -lcrypto -pthread 

I try to change to 
cc  -g -O2 -I. -pthread -DHAVE_PATHS_H -DHAVE_LIBCHARSET_H -DHAVE_DEV_TTY -DSHA1_HEADER='&lt;openssl/sha.h&gt;'  -DNO_STRLCPY -DNO_MKSTEMPS -o git-daemon   daemon.o libgit.a xdiff/lib.a  -lz  -liconv  -lcharset -lcrypto -pthread 

Link error is missing:) 

I try to modify Makefile 
        EXTLIBS += $(ICONV_LINK) -liconv -lcharset 

then 
make successfully. 

Hope it can help you.
</code></pre>

<p>步骤为:
<code>php
make -n | grep "git-daemon"
echo '   ' LINK git-daemon;
cc  -g -O2 -I. -pthread -DHAVE_PATHS_H -DHAVE_LIBCHARSET_H -DHAVE_DEV_TTY -DSHA1_HEADER='&lt;openssl/sha.h&gt;'  -DNO_STRLCPY -DNO_MKSTEMPS -o git-daemon   daemon.o libgit.a xdiff/lib.a  -lz  -liconv  -lcrypto -pthread
//会报一个link错误
cc  -g -O2 -I. -pthread -DHAVE_PATHS_H -DHAVE_LIBCHARSET_H -DHAVE_DEV_TTY -DSHA1_HEADER='&lt;openssl/sha.h&gt;'  -DNO_STRLCPY -DNO_MKSTEMPS -o git-daemon   daemon.o libgit.a xdiff/lib.a  -lz  -liconv  -lcharset -lcrypto -pthread
//Link error is missing:)
vim Makefile
找到 EXTLIBS += $(ICONV_LINK) -liconv
改为 EXTLIBS += $(ICONV_LINK) -liconv -lcharset  //保存退出
重新make
make install
</code>
成功解决问题。</p>

<hr />

<h1>在原博文下面还有一些功能的安装，现在还没设计到，不过也先贴出来</h1>

<p><strong>下面来安装 gitosis</strong></p>

<blockquote><p>gitosis为Git用户权限管理系统,通过管理服务端的authorized_key文件来执行对用户权限的管理，是一个Python模块包</p></blockquote>

<pre><code class="php">yum install python python-setuptools
cd /usr/local/src
git clone git://github.com/res0nat0r/gitosis.git
cd gitosis
python setup.py install

OK gitosis 安装成功！

 配置服务器git：
0.1 输入以下两条命令
git config --global user.name "Your Name Here"          
git config --global user.email "your_email@example.com"  
可以再输入git config -l查看上面两个是否设置
</code></pre>

<p><strong>在开发机上生成密钥并上传到服务器上</strong>
```php
ssh-keygen -t rsa   #一路回车，不需要设置密码
scp ~/.ssh/id_rsa.pub root@192.168.103.10:/tmp   #上传公钥到服务器(默认SSH端口22)
或
scp -P 3600  ~/.ssh/id_rsa.pub root@192.168.103.10:/tmp</p>

<p>5、服务器上生成git用户，使用git用户并初始化gitosis
adduser -m git
su – git
gitosis-init &lt; /tmp/id_rsa.pub</p>

<h1>显示以下信息即表示成功</h1>

<h1>Initialized empty Git repository in /home/git/repositories/gitosis-admin.git/</h1>

<h1>Reinitialized existing Git repository in /home/git/repositories/gitosis-admin.git/</h1>

<h1>删除密钥</h1>

<p>su – root
rm -rf /tmp/id_rsa.pub
禁用shell登录
注，出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
[root@git ~]# cat /etc/passwd | grep git
git:x:1001:1001:git version control:/home/git:/bin/bash</p>

<p>改为：
[root@git ~]# vim /etc/passwd
git:x:1001:1001:git version control:/home/git:/usr/bin/git-shell</p>

<p>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p>

<p>2，在git用户下，生成私钥和公钥。
$ssh-keygen –t rsa
3，在git用户下，拷入id_rsa.pub文件。
$gitosis-init &lt; id_rsa.pub
这样在git用户目录下生成了一些目录，gitosis，repositories。
至此，安装工作完成。
<code>
**添加开发者**
</code>php
git服务器管理人员需要把所有的开发者公钥保存到authorized_keys文件中。
$cat /tmp/id_rsa.pub.ubuntu >> authorized_keys
创建项目仓库
git管理人员操作：
$mkdir /home/git/gitproject
$cd gitproject
$git &ndash;bare init （创建一个空项目）
开发者提交项目
ubuntu开发者操作：
$git remote add origin git@gitserver:/opt/git/project.git
$git push origin master
这样其他开发者的工作也比较简单了：
$git clone …
$git push origin master</p>

<p>cd /repo/gitosis-admin
vim gitosis.conf</p>

<h1>在文件尾增加以下内容</h1>

<p>[group test] # 组名称
writable = test # 项目名称
members = jankerli #密钥用户名</p>

<h1>提交修改</h1>

<p>git add .
git commit -a -m “add test repo”
git push
```
<strong>初始，增加及使用项目test-git</strong></p>

<pre><code class="php">cd /repo
mkdir test-git
cd test-git
git inti
touch readme
git add .
git commit -a -m “init test-git”
git remote add origin git@xxx:test.git
git push origin master
</code></pre>

<p><strong>在 test 项目新增用户</strong>
①在新增用户的本机输入ssh-keygen -t rsa生成私钥公钥；
②把生成的公钥id_rsa.pub上传或复制到 gitosis-admin/keydir文件夹下，并重名，如：jankerli.pub；
③vim gitosis.conf
```php</p>

<h1>在文件尾增加以下内容</h1>

<p>[group test]
writable = test
members = jankerli （此处增加新用户的名称，名称必须与上面重名的jankerli.pub一致，去掉.pub）
④#提交修改
git add .
git commit -a -m “add test repo”
git push
```
⑤新用户便可通过 git clone git@xxx:test.git 克隆代码到本机了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux常用命令]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/26/linux-chang-yong-min-ling/"/>
    <updated>2016-04-26T18:55:40+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/26/linux-chang-yong-min-ling</id>
    <content type="html"><![CDATA[<blockquote><p>Linux 命令总结</p></blockquote>

<h1>一、常用目录作用</h1>

<ul>
<li>/ 根目录</li>
<li>/bin 命令保存目录（普通用户可以读取的命令）</li>
<li>/boot 启动目录，启动相关文件</li>
<li>/dev  设备文件保存目录</li>
<li>/etc  配置文件目录</li>
<li>/home 普通用户家目录</li>
<li>/lib  系统库保存目录</li>
<li>/mnt  系统挂载目录</li>
<li>/media    挂载目录</li>
<li>/root 超级用户的家目录</li>
<li>/tmp  临时目录</li>
<li>/sbin 命令保存目录（超级用户才能使用）</li>
<li>/proc 直接写入内存</li>
<li>/sys  ~</li>
<li><p>/usr  系统软件资源目录</p>

<ul>
<li>/usr/bin  系统命令（普通用户）</li>
<li>/usr/sbin 系统命令（超级用户）</li>
</ul>
</li>
<li><p>/var  系统相关文档</p></li>
</ul>


<hr />

<h1>二、常用基本命令</h1>

<h2>2.1 目录和文件处理命令</h2>

<ul>
<li><p>mkdir [选项] [目录名] 创建目录</p>

<ul>
<li>-p 递归创建</li>
</ul>
</li>
<li><p>rm [选项] [目录名] 删除</p>

<ul>
<li>-r 删除目录</li>
<li>-f 强制</li>
</ul>
</li>
<li><p>mv [原文件或目录] [目标目录] 剪切或改名</p>

<ul>
<li>没有选项 剪切文件和目录使用相同命令</li>
</ul>
</li>
<li>cp [选项] [原文件或目录] [目标目录]

<ul>
<li>-r 复制目录</li>
<li>-p 连带文件属性复制</li>
<li>-d 若源文件是连接文件，则赋值连接属性</li>
<li>-a 相当于-pdr</li>
</ul>
</li>
<li><p>cd</p>

<ul>
<li>~ 进入家目录</li>
<li><ul>
<li>进入上次目录</li>
</ul>
</li>
<li>.. 进入上级目录</li>
<li>. 进入当前目录</li>
</ul>
</li>
<li><p>pwd 显示当前所在位置</p></li>
<li><p>ls [选项] [目录]</p>

<ul>
<li>-l 长格式 详细信息</li>
<li>-h 人性化显示大小 如-lh 会把大小变成能看懂的格式如128k</li>
<li>-a 显示所有文件</li>
<li>-d 查看目录属性</li>
<li>-i 显示inode id号</li>
</ul>
</li>
</ul>


<h2>2.2链接命令</h2>

<ul>
<li><p>硬链接 不推荐 ln  [原文件] [目标文件]</p>

<ul>
<li>拥有相同的i节点和存储block块，可以看做是同一个文件。相当于一个文件的两个接入。</li>
<li>可以通过i节点识别</li>
<li>不能跨分区</li>
<li>不能针对目录使用</li>
</ul>
</li>
<li><p>软链接</p>

<ul>
<li>类似Windows快捷方式</li>
<li>软链接拥有自己的I节点和Block块，但是数据中只保存原文件的文件名和节点号，并没有实际文件数据</li>
<li>lrwxrwxrwx l 软链接 软链接的权限都为 rwxrwxrwx、</li>
<li>修改任意文件，另一个都改变</li>
<li>删除原文件，软链接不能使用</li>
</ul>
</li>
<li>ln -s [原文件] [目标文件] 软链接 （原文件一定要写绝对路径）</li>
</ul>


<h2>2.3 文件搜索命令</h2>

<ul>
<li>配置文件 /etc/updatedb.conf

<ul>
<li>PRUNE_BIND_MOUNTS=&ldquo;yes&rdquo; #开启器搜索限制</li>
<li>PRUNEFS = #搜索时不搜索的文件系统</li>
<li>PRUNENAMES = #搜索时不搜索的文件系统</li>
<li>PRUNEPATHS = # 搜索时不搜多的路径</li>
</ul>
</li>
<li><p>locate [文件名] 在后台数据库按文件名搜索，搜索速度较快</p>

<ul>
<li>/var/lib/mlocate #locate命令搜索的数据库</li>
<li>updatadb 强制更新数据库（默认一天一更新）</li>
</ul>
</li>
<li><p>whereis [选项] [命令] 搜索命令的命令 输出命令位置和帮助文档位置  只能查系统命令</p>

<ul>
<li>-b 只看命令所在位置</li>
<li>-m 只看帮助文档所在位置</li>
</ul>
</li>
<li><p>which [命令] 找到命令和别命</p></li>
<li><p>find [搜索范围] [搜索文件]</p>

<ul>
<li>find / -name install.log</li>
<li>避免大范围搜索，非常消耗系统资源</li>
<li>*匹配任意内容</li>
<li>？匹配任意一个字符</li>
<li>[]任意中括号之内的一个内容</li>
<li>find / -iname install.log 不区分大小写</li>
<li>find / -user root 按所有者搜索</li>
<li>find / -user -nouser 搜索没有所有者的文件</li>
<li><p>find /var/log -mtime +10 查找十天前修改的文件</p>

<ul>
<li>atime 文件访问时间 -10 十天内</li>
<li>ctime 改变文件属性  10 十天当天</li>
<li>mtime 修改文件内容 +10 十天前</li>
</ul>
</li>
<li><p>find . -size 25k 查找当前目录25k的文件</p>

<ul>
<li>-25 小于25k</li>
<li>+25 大于25k</li>
</ul>
</li>
<li><p>find . -inum xxx 查找当前目录i节点为XX的文件</p></li>
<li>find /etc -size +20k -a -50k  ect下大于20k小于50k的问价

<ul>
<li>-a  and 逻辑与</li>
<li>-o  or  逻辑或</li>
</ul>
</li>
<li>find /etc -size +20k -a -50k -exec ls -lh {} \;将查找到的文件LS出来

<ul>
<li>-exec/-ok 命令 {} \ ; 对搜索结果执行操作、</li>
</ul>
</li>
</ul>
</li>
<li><p>grep [选项] 字符串 文件名 在文件中匹配符合条件的字符串</p>

<ul>
<li>-i 忽略大小写</li>
<li>-v 排除指定字符串</li>
</ul>
</li>
</ul>


<h2>2.4帮助命令</h2>

<ul>
<li><p>man  命令</p>

<ul>
<li>man一共有1-9级 man -f 命令 查看命令有几个帮助级别</li>
<li>man [1-9] 命令 查看现有级别的帮助</li>
</ul>
</li>
<li><p>&ndash;help    或许选项帮助</p>

<ul>
<li>ls &ndash;help 获取选项</li>
</ul>
</li>
<li>help shell内部命令 获取shell内部命令帮助

<ul>
<li>用 whereis cd 来看是否为内部命令，没有执行文件则为内部命令</li>
<li>如 help cd</li>
</ul>
</li>
<li>info 详细命令帮助 太复杂 不常用

<h1>2.5压缩与解压缩命令</h1></li>
<li>常用压缩格式：.zip .gz .bz2 .tar.gz .tar.bz2</li>
<li>zip [目标文件] [源文件]

<ul>
<li>zip -r [压缩目录名] [源目录]</li>
<li>unzip [压缩文件] 解压缩</li>
</ul>
</li>
<li>gzip [源文件] 生成.gz文件 #源文件消失

<ul>
<li>gzip -c 源文件 > 压缩文件 #压缩为.gz 源文件不消失</li>
<li>gzip -r 压缩目录下所有子文件 但是不能压缩目录</li>
<li>gzip -d 压缩包 #解压缩</li>
<li>gunzip 压缩包 #解压缩</li>
</ul>
</li>
<li>bz2 不能压缩目录

<ul>
<li>bzip2 源文件  #不保留源文件</li>
<li>bzip2 -k 源文件  #保留源文件</li>
<li>bzip2 -d 压缩包  #-k保留源文件</li>
<li>bunzip2  压缩包  #-k保留源文件</li>
</ul>
</li>
<li><p>tar -jcvf 压缩包名.tar.bz2 源文件</p>

<ul>
<li>-z 压缩为.tar.gz</li>
<li>-c 打包</li>
<li>-v 显示打包过程</li>
<li>-f 指定打包后的文件名</li>
</ul>
</li>
<li><p>tar -jxvf 压缩包名.tar.bz2 加 -C 指定解压缩位置</p>

<ul>
<li>-z 解压缩.tar.gz

<h1>2.6关机重启命令</h1></li>
</ul>
</li>
<li><p>shutdown [选项] [时间] &amp; #加&amp;表示在后台运行</p>

<ul>
<li>-c 取消前一个关机命令</li>
<li>-h 关机</li>
<li>-r 重启</li>
</ul>
</li>
<li><p>poweroff</p></li>
<li><p>reboot</p></li>
<li><p>init 【0-6】</p>

<ul>
<li>0 关机</li>
<li>1 单用户</li>
<li>2 不完全多用户，不含NFS</li>
<li>3 完全多用户</li>
<li>4 未分配</li>
<li>5 图形界面</li>
<li>6 重启</li>
</ul>
</li>
</ul>


<h1>2.7挂载命令</h1>

<ul>
<li>mount #查看系统已挂载的设备</li>
<li>mount -a #根据配置文件/etc/fstab 的内容 下的设备自动挂载</li>
<li><p>mount [-t 文件系统] [-o 特殊选项] 设备文件名 挂载点</p>

<ul>
<li>-t ext3 ext4 iso9660（光盘）</li>
</ul>
</li>
<li><p>挂载光盘</p>

<ol>
<li>mkdir /mnt/cdroom</li>
<li>mount -t iso9660 /dev/sr0 /mnt/cdrom/ 其中-t在这里可省略因为系统知道sr0为光盘，知道它的文件系统。</li>
<li>umount 设备文件名或挂载点 #卸载 必须卸载！！！</li>
</ol>
</li>
<li><p>挂载U盘</p>

<ol>
<li>fdisk -l 查看系统中已经识别的硬盘</li>
<li>mount -t vfat /dec/sdbx/mnt/usb/ #sdbX通过上一条命令查看可知</li>
<li>Linux默认不支持NTFS文件系统，需要下载ntfs-3g安装可以挂载ntfs但是也只能读。</li>
</ol>
</li>
</ul>


<h1>2.8其他常用命令</h1>

<ul>
<li>用户登录查看

<ul>
<li>w  #查看登录登录用户的信息 输出一些信息 包括占用cpu等</li>
<li>who</li>
<li>输出 用户名 登录登录终端 登录时间和IP</li>
<li>last 查询登录日志 /var/log/wtmp</li>
<li>lastlog 查看每个用户的最后登录信息/var/log/lastlog</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
