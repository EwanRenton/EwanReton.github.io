<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Ewan Reton]]></title>
  <link href="http://ewanreton.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://ewanreton.github.io/"/>
  <updated>2016-05-15T16:53:14+08:00</updated>
  <id>http://ewanreton.github.io/</id>
  <author>
    <name><![CDATA[Ewan Reton]]></name>
    <email><![CDATA[liukedi001@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[做死的Centos-Atom]]></title>
    <link href="http://ewanreton.github.io/blog/2016/05/10/linux-atom-error/"/>
    <updated>2016-05-10T20:37:45+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/05/10/linux-atom-error</id>
    <content type="html"><![CDATA[<blockquote><p>昨天晚上突然冒出一个念头在我的Centos6.5的虚拟机上装Atom并且装上那个炫酷的插件来装波大逼。然后很悲催，软件没装上不说，系统也被搞坏了。</p></blockquote>

<!--more-->


<h1>兴高采烈的去下Atom</h1>

<p>在github上找到了Atom的<a href="https://github.com/atom/atom">开源项目</a>，根据指引下载好了rpm包。</p>

<p>然后<code>sudo yum localinstall atom.x86_64.rpm</code></p>

<p>不出意外出现了问题。</p>

<p>当时忘了截图，不过我大概都还记得出了哪些问题。</p>

<blockquote><p>这里有个极度懵逼的事情</p></blockquote>

<pre><code>我最开始在Centos中下Atom由于网络不好，时断时续就没管，后来切过去看。
咦~为什么这么快就下好了，开心的安装。恩，问题来了 libnode.so 找不到。
恩，有问题嘛很正常。度娘之。

度娘好像并不能告诉我什么，是时候翻墙了。翻出去过后的答案也是牛头不对马嘴。

忧郁了好一会，突然发现尼玛，这个包只有20+MB啊！！！！
</code></pre>

<p><strong>这次包下好了完全没问题</strong></p>

<p>安装中也出了一些问题。</p>

<p>但是我记不太清楚了0。0</p>

<pre><code>其实是因为出的问题太多了，本来想安装成功过后做一个总结，之前查得解决方案的网页也都存了书签。

可是，后来软件没装好，系统被玩坏了。。书签和历史记录全部丢失了，，我就有点懵逼了。。。
</code></pre>

<p>解决了一些问题过后，安装完成了。</p>

<p><strong>开心的atom想打开atom</strong></p>

<p>恩，提莫的。</p>

<p>error！ error！！</p>

<p><strong>version GLIBCXX_3.4.9 not found</strong></p>

<p>因为我解决问题的博文已经搞丢了，刚刚重新找了一篇大概差不多
<a href="http://blog.csdn.net/officercat/article/details/39520227">传送门</a></p>

<pre><code class="php">ll /lib64/libc.so.6  
lrwxrwxrwx 1 root root 19 Sep 23 08:29 /lib64/libc.so.6 -&gt; /lib64/libc-2.12.so  
</code></pre>

<p>libc.so.6是一个软连接，当前的glibc是2.12版本,我遇到的事GLIBC_2.15找不到的问题，所以需至少升级到2.15
首先，从网上下载glibc 2.15的rpm安装包，但这个不容易，因为.rpm针对的是centOS和redhat，高版本安装包很少见。也可以直接从其他系统上好一个编译好的文件
libc.so.6（对应glibc 2.15或者更高的），不过最保险的方式就是下载源代码在本地编译一次（有的人实在编译不成功，那也只能从别的地方找一份了）
各个版本的glibc可以从<a href="http://ftp.gnu.org/gnu/glibc/">下载地址</a>找，包括其插件glibc-port
最新到2.20，我保守的选择2.15
对于低版本glibc，还有glibc-linuxthreads-2.x需要编译，可参考很多网上文档，但2.15没有，所以不用了
<code>php
wget http://ftp.gnu.org/gnu/glibc/glibc-2.15.tar.gz   
wget http://ftp.gnu.org/gnu/glibc/glibc-ports-2.15.tar.gz   
tar -xvf  glibc-2.15.tar.gz  
tar -xvf  glibc-ports-2.15.tar.gz   
mv glibc-ports-2.15 glibc-2.15/ports   
mkdir glibc-build-2.15    
cd glibc-build-2.15   
../glibc-2.15/configure  --prefix=/usr --disable-profile --enable-add-ons --with-headers=/usr/include --with-binutils=/usr/bin  
make   
make install
</code>
如果提示install成功，去看glibc所在的共享库：</p>

<pre><code>ll /lib64/libc* 
</code></pre>

<p>可以看到2.12的旧库文件还在，多了2.15版本的库文件，而且软链接文件全部指向了2.15版本。</p>

<pre class="prettyprint">
-rwxr-xr-x  1 root root 1921096 Aug 30 02:16 /lib64/libc-2.12.so  
-rwxr-xr-x  1 root root 9801632 Sep 25 13:46 /lib64/libc-2.15.so  
lrwxrwxrwx. 1 root root      18 May 19 18:51 /lib64/libcap-ng.so.0 -> libcap-ng.so.0.0.0  
-rwxr-xr-x. 1 root root   18672 Jun 25  2011 /lib64/libcap-ng.so.0.0.0  
lrwxrwxrwx. 1 root root      14 May 19 18:51 /lib64/libcap.so.2 -> libcap.so.2.16  
-rwxr-xr-x  1 root root   19016 Dec  8  2011 /lib64/libcap.so.2.16  
lrwxrwxrwx. 1 root root      19 May 19 18:57 /lib64/libcgroup.so.1 -> libcgroup.so.1.0.40  
-rwxr-xr-x  1 root root   97016 Dec  9  2013 /lib64/libcgroup.so.1.0.40  
-rwxr-xr-x  1 root root  197064 Aug 30 02:16 /lib64/libcidn-2.12.so  
-rwxr-xr-x  1 root root  267972 Sep 25 13:46 /lib64/libcidn-2.15.so  
lrwxrwxrwx  1 root root      15 Sep 25 13:52 /lib64/libcidn.so.1 -> libcidn-2.15.so  
lrwxrwxrwx. 1 root root      17 May 19 18:51 /lib64/libcom_err.so.2 -> libcom_err.so.2.1  
-rwxr-xr-x  1 root root   17256 Nov 22  2013 /lib64/libcom_err.so.2.1  
-rwxr-xr-x  1 root root   40400 Aug 30 02:16 /lib64/libcrypt-2.12.so  
-rwxr-xr-x  1 root root  142947 Sep 25 13:46 /lib64/libcrypt-2.15.so  
lrwxrwxrwx. 1 root root      22 May 19 18:57 /lib64/libcryptsetup.so.1 -> libcryptsetup.so.1.1.0  
-rwxr-xr-x  1 root root   97072 Jun 22  2012 /lib64/libcryptsetup.so.1.1.0  
lrwxrwxrwx  1 root root      16 Sep 25 13:52 /lib64/libcrypt.so.1 -> libcrypt-2.15.so  
lrwxrwxrwx  1 root root      12 Sep 25 13:52 /lib64/libc.so.6 -> libc-2.15.so  
</pre>


<p>有些人会在make install后出现error。这儿error我没去细究,经过网友提醒，可能是因为没有sudo造成的，因为make install就是把文件拷贝到几个受保护的系统目录下。</p>

<p>如果还是不行，可以查看一下系统此时的GLIBC版本，参考一开始的做法。如果版本未升级，我们只能手动安装一下：</p>

<p>首先make是成功了，那么我们会发现build目录下编译出了一个新的libc.so.6 （/glibc-build-2.15/libc.so.6， 我们会发现这实际上也是一个软连接，真实的lib文件时libc.so， 输出</p>

<pre><code class="php">
$ ll  libc.so.6  
lrwxrwxrwx 1 root root 7 Sep 23 07:41 libc.so.6 -&gt; libc.so  
$ strings libc.so | grep GLIBC  
GLIBC_2.2.5  
GLIBC_2.2.6  
GLIBC_2.3  
GLIBC_2.3.2  
GLIBC_2.3.3  
GLIBC_2.3.4  
GLIBC_2.4  
GLIBC_2.5  
GLIBC_2.6  
GLIBC_2.7  
GLIBC_2.8  
GLIBC_2.9  
GLIBC_2.10  
GLIBC_2.11  
GLIBC_2.12  
GLIBC_2.13  
GLIBC_2.14  
GLIBC_2.15  
GLIBC_PRIVATE  
</code></pre>

<p>这是我们需要的lib了，然后去更新系统的库。</p>

<p>这里要注意，更新系统里的链接（我的是/lib64/libc.so.6) 很容易出错，我不清楚有没有更好的办法，一般都是删除旧链接，建立新链接</p>

<p>但删除旧链接后，很多命令直接不能用了，因为此时中不到glibc的库了。这个时候就需要临时指定一个glibc库，方法如下（libc.so改个名以便好以后更新的其他版本区分）</p>

<pre><code class="php"> cp /****/glibc-build-2.15/libc.so /lib64/libc-2.15.so  

rm -rf /lib64/libc.so.6  
LD_PRELOAD=/lib64/libc-2.15.so ln -s/lib64/libc-2.15.so  lib64/libc.so.6  
</code></pre>

<p>连接更新成功，再编译的话，GLIBC_2.15及以下版本的依赖问题就不会出现了。</p>

<blockquote><p>恩，到这里我也有话要说，我当时也是耿直，在这一步我重复了两三次！！！我耿直到从低版本一个一个往高版本安装啊。我真傻，真的。。。</p></blockquote>

<hr />

<p><strong> /usr/lib/libstdc++.so.6: version `GLIBCXX_3.4.14' not found</strong></p>

<p><a href="http://blog.csdn.net/xiaolong2w/article/details/23915171">传送门</a></p>

<p>出现这种问题就是因为编译库的编译器和编译当前程序的编译器版本是不一样的，在具体一点就是因为，当前程序的编译器的版本是比较低的，只要升级一下就可以了。可以用如下命令查看一下当前GCC版本：</p>

<pre class="prettyprint">
strings /usr/lib/libstdc++.so.6 | grep GLIBCXX  
GLIBCXX_3.4  
GLIBCXX_3.4.1  
GLIBCXX_3.4.2  
GLIBCXX_3.4.3  
GLIBCXX_3.4.4  
GLIBCXX_3.4.5  
GLIBCXX_3.4.6  
GLIBCXX_3.4.7  
GLIBCXX_3.4.8  
GLIBCXX_3.4.9  
GLIBCXX_3.4.10  
GLIBCXX_3.4.11  
GLIBCXX_3.4.12  
GLIBCXX_3.4.13  
GLIBCXX_FORCE_NEW  
GLIBCXX_DEBUG_MESSAGE_LENGTH  
</pre>


<p>并没有动态库中要求的GCC版本 “GLIBCXX_3.4.14”，所以需要进行升级一下我们的GCC版本，升级过程如下：</p>

<p>下载新版本的GCC，地址为<a href="http://ftp.de.debian.org/debian/pool/main/g/gcc-4.7/libstdc++6_4.7.2-5_i386.deb">点击打开链接</a> （这里也有一个坑，今天真的是傻！！！）</p>

<p>下载下来之后，用如下命令开始解压</p>

<pre class="prettyprint">
ar -x libstdc++6_4.7.2-5_i386.deb && tar xvf data.tar.gz  
如果你的文件目录为GCC（如果不是，把GCC改为相应的目录即可），依次执行下面命令：


cd GCC/usr/lib/i380-linux-gun 
su root  
cp libstdc++.so.6.0.17 /usr/lib 
cd /usr/lib   
rm libstdc++.so.6  
ln -s libstdc++.so.6.0.17 libstdc++.so.6 
strings /usr/lib/libstdc++.so.6 | grep GLIBCXX  

GLIBCXX_3.4  
GLIBCXX_3.4.1  
GLIBCXX_3.4.2  
GLIBCXX_3.4.3  
GLIBCXX_3.4.4  
GLIBCXX_3.4.5  
GLIBCXX_3.4.6  
GLIBCXX_3.4.7  
GLIBCXX_3.4.8  
GLIBCXX_3.4.9  
GLIBCXX_3.4.10  
GLIBCXX_3.4.11  
GLIBCXX_3.4.12  
GLIBCXX_3.4.13  
GLIBCXX_3.4.14  
GLIBCXX_3.4.15  
GLIBCXX_3.4.16  
GLIBCXX_3.4.17  
GLIBCXX_DEBUG_MESSAGE_LENGTH  
</pre>


<p>到这里其实就改结束了。可是回去atom</p>

<p>恩。不错，不是原来的错误了，重新报了一个错误。（具体的错误我忘了）</p>

<p>后来在解决的时候才发现这个错误是因为我之前下载安装的libstdc是32位的，但是我的Atom是64位的就出错了。然后再这个过程中，我之前以为是我创建软链接的时候创建错误，我把lib和lib64里面的<code>libstdc++.so.6</code> 都删了重新创建了一次。然后就GG了，这个时候连firefox浏览器都跟着崩溃了。后来意识到这个问题过后重新安装了64位的<code>libstdc++.so.6</code>解决了这个问题。</p>

<p><strong>undefined symbol g_bytes_unref</strong></p>

<p>这是遇到的最后的问题，也是彻底解决我的问题。。</p>

<p>在国内的网站上很少有这个问题的解决方法，后来找到一个论坛说是因为
<code>GBytes is relatively new, only since glib-2.32</code> 准备更新glib库</p>

<p><a href="http://blog.chinaunix.net/uid-26000296-id-5159364.html">博文</a></p>

<p>检查系统当前的版本
<code>php
 rpm -qi glibc
</code></p>

<p>在CentOS中用更新命令到2.5已经是最新版本了，只好手动下载 glibc的源码包编译安装更新。
可以在 <a href="http://ftp.gnu.org/pub/gnu/glibc/%E7%9C%8B%E5%88%B0%E5%BD%93%E5%89%8D%E7%9A%84%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%EF%BC%8C">http://ftp.gnu.org/pub/gnu/glibc/%E7%9C%8B%E5%88%B0%E5%BD%93%E5%89%8D%E7%9A%84%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%EF%BC%8C</a>
我看到的最新版本是glibc-2.22。</p>

<pre><code class="php"> cd /usr/src 
 mkdir glibc-2.22-build 
 wget http://ftp.gnu.org/pub/gnu/glibc/glibc-2.22.tar.gz
 tar zxvf glibc-2.22.tar.gz 
 cd /usr/src/glibc-2.22-build/ 
 export CFLAGS="-g -O2 -march=i686" 
  网上有些地方加优化开关 -O2  时（大写字母O），写的是 -02 （数字零），
  所以拷贝过来仍然出现3中的错误，所以请注意。
 /usr/src/glibc-2.22-build/glibc-2.22/configure --prefix=/usr/src/glibc-2.22-build/ --with-headers=/usr/include
 make 
 make install
</code></pre>

<p>报错</p>

<pre><code class="php">*** These critical programs are missing or too old: as ld compiler
*** Check the INSTALL file for required versions.

解决办法:
问题原因： 
缺少autoconf或版本太低


下载安装新版本


 wget ftp://ftp.gnu.org/gnu/autoconf/autoconf-2.68.tar.gz
 tar zxvf autoconf-2.68.tar.gz
 cd autoconf-2.68
 ./configure --prefix=/usr/
 make &amp;&amp; make install
</code></pre>

<p>我进行到了这一步，然后虚拟机卡住了，卡了好久。。</p>

<p>然后我干出了今天干过最蠢的事<strong>我直接用VM重启了它</strong>（我的Windows卡住就是这样干的(尴尬脸)）</p>

<p>然后再开机我就懵逼了，我firefox的书签没了，历史记录没有，系统还报错。运行几分钟就一直卡住。。</p>

<p>然后我就决定果断弃坑！！！！！</p>

<p>PS：</p>

<p><strong>这篇博文还很不完整，以后有机会再在Centos上装Atom成功的话在回来补充</strong></p>

<pre class="prettyprint">
多么痛的领悟
绝对不要随便强制重启！！！！
用浏览器一定要登录，书签和历史记录才能同步啊！！！
下次更新东西别再一个版本一个版本的往上装了，耿直过头啊！！！
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linx下安装Git]]></title>
    <link href="http://ewanreton.github.io/blog/2016/05/09/linux-git/"/>
    <updated>2016-05-09T23:25:34+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/05/09/linux-git</id>
    <content type="html"><![CDATA[<blockquote><p>考试季过去了，准备开始将日常使用迁移到Linux下，今天想在Linux下装Git，开始觉得这应该是个很简单的事，谁知道这个花了好多时间。</p></blockquote>

<!--more-->


<p>首先在网上找了一个博文作为参考，<a href="http://blog.csdn.net/naola2001/article/details/43228769">传送门</a></p>

<p>服务器端：</p>

<pre class="prettyprint text">
yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel
wget https://github.com/git/git/archive/v2.2.0.tar.gz
tar zxvf git-2.2.0.tar.gz
cd git-2.2.0
make prefix=/usr/local all
make prefix=/usr/local install  root用户运行
</pre>


<pre><code class="php">如果编译时提示错误：
LINK git-credential-store
libgit.a(utf8.o): In function `reencode_string_iconv’:
/opt/git-master/utf8.c:530: undefined reference to `libiconv’
libgit.a(utf8.o): In function `reencode_string_len’:
/opt/git-master/utf8.c:569: undefined reference to `libiconv_open’
/opt/git-master/utf8.c:588: undefined reference to `libiconv_close’
/opt/git-master/utf8.c:582: undefined reference to `libiconv_open’
collect2: ld 返回 1
make: *** [git-credential-store] 错误 1
解决办法：

cd /usr/local/src/
wget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz
tar -zxvf libiconv-1.14.tar.gz
cd libiconv-1.14
./configure -prefix=/usr/local/libiconv  &amp;&amp;  make  &amp;&amp; sudo  make install
然后回到git继续编译：

cd /usr/local/src/git-1.8.5
make configure
./configure --prefix=/usr/local -with-iconv=/usr/local/libiconv
make
make install


# git --version
git version 2.2.0
</code></pre>

<p>按照教程，到这里应该就成功了。
但是在解决了lib的错误后在回来执行 make 时遇到了错误
<code>php
In function `init_gettext_charset':
/root/soft/git-2012-01-19/gettext.c:115: undefined reference to `locale_charset'
collect2: ld returned 1 exit status
</code></p>

<p>解决方法：<a href="http://mono.1490590.n4.nabble.com/Can-t-compile-git-for-a-long-time-td3336232.html#a4312244">传送门</a>
其中一个corey_yan的回答成功解决了问题</p>

<pre><code>I encounter the same problem in centos 5.2 and try to solve it for a long time 

libgit.a(gettext.o): In function `init_gettext_charset': 
/root/soft/git-2012-01-19/gettext.c:115: undefined reference to `locale_charset' 
collect2: ld returned 1 exit status 


After checking the detail Link command 
make -n | grep "git-daemon" 
echo '   ' LINK git-daemon; 
cc  -g -O2 -I. -pthread -DHAVE_PATHS_H -DHAVE_LIBCHARSET_H -DHAVE_DEV_TTY -DSHA1_HEADER='&lt;openssl/sha.h&gt;'  -DNO_STRLCPY -DNO_MKSTEMPS -o git-daemon   daemon.o libgit.a xdiff/lib.a  -lz  -liconv  -lcrypto -pthread 

I try to change to 
cc  -g -O2 -I. -pthread -DHAVE_PATHS_H -DHAVE_LIBCHARSET_H -DHAVE_DEV_TTY -DSHA1_HEADER='&lt;openssl/sha.h&gt;'  -DNO_STRLCPY -DNO_MKSTEMPS -o git-daemon   daemon.o libgit.a xdiff/lib.a  -lz  -liconv  -lcharset -lcrypto -pthread 

Link error is missing:) 

I try to modify Makefile 
        EXTLIBS += $(ICONV_LINK) -liconv -lcharset 

then 
make successfully. 

Hope it can help you.
</code></pre>

<p>步骤为:
<code>php
make -n | grep "git-daemon"
echo '   ' LINK git-daemon;
cc  -g -O2 -I. -pthread -DHAVE_PATHS_H -DHAVE_LIBCHARSET_H -DHAVE_DEV_TTY -DSHA1_HEADER='&lt;openssl/sha.h&gt;'  -DNO_STRLCPY -DNO_MKSTEMPS -o git-daemon   daemon.o libgit.a xdiff/lib.a  -lz  -liconv  -lcrypto -pthread
//会报一个link错误
cc  -g -O2 -I. -pthread -DHAVE_PATHS_H -DHAVE_LIBCHARSET_H -DHAVE_DEV_TTY -DSHA1_HEADER='&lt;openssl/sha.h&gt;'  -DNO_STRLCPY -DNO_MKSTEMPS -o git-daemon   daemon.o libgit.a xdiff/lib.a  -lz  -liconv  -lcharset -lcrypto -pthread
//Link error is missing:)
vim Makefile
找到 EXTLIBS += $(ICONV_LINK) -liconv
改为 EXTLIBS += $(ICONV_LINK) -liconv -lcharset  //保存退出
重新make
make install
</code>
成功解决问题。</p>

<hr />

<h1>在原博文下面还有一些功能的安装，现在还没设计到，不过也先贴出来</h1>

<p><strong>下面来安装 gitosis</strong></p>

<blockquote><p>gitosis为Git用户权限管理系统,通过管理服务端的authorized_key文件来执行对用户权限的管理，是一个Python模块包</p></blockquote>

<pre><code class="php">yum install python python-setuptools
cd /usr/local/src
git clone git://github.com/res0nat0r/gitosis.git
cd gitosis
python setup.py install

OK gitosis 安装成功！

 配置服务器git：
0.1 输入以下两条命令
git config --global user.name "Your Name Here"          
git config --global user.email "your_email@example.com"  
可以再输入git config -l查看上面两个是否设置
</code></pre>

<p><strong>在开发机上生成密钥并上传到服务器上</strong>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">ssh</span><span class="o">-</span><span class="nx">keygen</span> <span class="o">-</span><span class="nx">t</span> <span class="nx">rsa</span>   <span class="c1">#一路回车，不需要设置密码</span>
</span><span class='line'><span class="nx">scp</span> <span class="o">~/.</span><span class="nx">ssh</span><span class="o">/</span><span class="nx">id_rsa</span><span class="o">.</span><span class="nx">pub</span> <span class="nx">root</span><span class="o">@</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">103.10</span><span class="o">:/</span><span class="nx">tmp</span>   <span class="c1">#上传公钥到服务器(默认SSH端口22)</span>
</span><span class='line'><span class="nx">或</span>
</span><span class='line'><span class="nx">scp</span> <span class="o">-</span><span class="nx">P</span> <span class="mi">3600</span>  <span class="o">~/.</span><span class="nx">ssh</span><span class="o">/</span><span class="nx">id_rsa</span><span class="o">.</span><span class="nx">pub</span> <span class="nx">root</span><span class="o">@</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">103.10</span><span class="o">:/</span><span class="nx">tmp</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="mi">5</span><span class="nx">、服务器上生成git用户，使用git用户并初始化gitosis</span>
</span><span class='line'><span class="nx">adduser</span> <span class="o">-</span><span class="nx">m</span> <span class="nx">git</span>
</span><span class='line'><span class="nx">su</span> <span class="nx">–</span> <span class="nx">git</span>
</span><span class='line'><span class="nx">gitosis</span><span class="o">-</span><span class="nx">init</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">id_rsa</span><span class="o">.</span><span class="nx">pub</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">显示以下信息即表示成功</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Initialized</span> <span class="k">empty</span> <span class="nx">Git</span> <span class="nx">repository</span> <span class="nx">in</span> <span class="o">/</span><span class="nx">home</span><span class="o">/</span><span class="nx">git</span><span class="o">/</span><span class="nx">repositories</span><span class="o">/</span><span class="nx">gitosis</span><span class="o">-</span><span class="nx">admin</span><span class="o">.</span><span class="nx">git</span><span class="o">/&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Reinitialized</span> <span class="nx">existing</span> <span class="nx">Git</span> <span class="nx">repository</span> <span class="nx">in</span> <span class="o">/</span><span class="nx">home</span><span class="o">/</span><span class="nx">git</span><span class="o">/</span><span class="nx">repositories</span><span class="o">/</span><span class="nx">gitosis</span><span class="o">-</span><span class="nx">admin</span><span class="o">.</span><span class="nx">git</span><span class="o">/&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">删除密钥</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">su</span> <span class="nx">–</span> <span class="nx">root</span>
</span><span class='line'><span class="nx">rm</span> <span class="o">-</span><span class="nx">rf</span> <span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">id_rsa</span><span class="o">.</span><span class="nx">pub</span>
</span><span class='line'><span class="nx">禁用shell登录</span>
</span><span class='line'><span class="nx">注，出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑</span><span class="o">/</span><span class="nx">etc</span><span class="o">/</span><span class="nx">passwd文件完成。找到类似下面的一行：</span>
</span><span class='line'><span class="p">[</span><span class="nx">root</span><span class="o">@</span><span class="nx">git</span> <span class="o">~</span><span class="p">]</span><span class="c1"># cat /etc/passwd | grep git</span>
</span><span class='line'><span class="nx">git</span><span class="o">:</span><span class="nx">x</span><span class="o">:</span><span class="mi">1001</span><span class="o">:</span><span class="mi">1001</span><span class="o">:</span><span class="nx">git</span> <span class="nx">version</span> <span class="nx">control</span><span class="o">:/</span><span class="nx">home</span><span class="o">/</span><span class="nx">git</span><span class="o">:/</span><span class="nx">bin</span><span class="o">/</span><span class="nx">bash</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">改为：</span>
</span><span class='line'><span class="p">[</span><span class="nx">root</span><span class="o">@</span><span class="nx">git</span> <span class="o">~</span><span class="p">]</span><span class="c1"># vim /etc/passwd</span>
</span><span class='line'><span class="nx">git</span><span class="o">:</span><span class="nx">x</span><span class="o">:</span><span class="mi">1001</span><span class="o">:</span><span class="mi">1001</span><span class="o">:</span><span class="nx">git</span> <span class="nx">version</span> <span class="nx">control</span><span class="o">:/</span><span class="nx">home</span><span class="o">/</span><span class="nx">git</span><span class="o">:/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">bin</span><span class="o">/</span><span class="nx">git</span><span class="o">-</span><span class="nx">shell</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git</span><span class="o">-</span><span class="nx">shell每次一登录就自动退出。</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="mi">2</span><span class="nx">，在git用户下，生成私钥和公钥。</span>
</span><span class='line'><span class="nv">$ssh</span><span class="o">-</span><span class="nx">keygen</span> <span class="nx">–t</span> <span class="nx">rsa</span>
</span><span class='line'><span class="mi">3</span><span class="nx">，在git用户下，拷入id_rsa</span><span class="o">.</span><span class="nx">pub文件。</span>
</span><span class='line'><span class="nv">$gitosis</span><span class="o">-</span><span class="nx">init</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">id_rsa</span><span class="o">.</span><span class="nx">pub</span>
</span><span class='line'><span class="nx">这样在git用户目录下生成了一些目录，gitosis，repositories。</span>
</span><span class='line'><span class="nx">至此，安装工作完成。</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">**</span><span class="nx">添加开发者</span><span class="o">**</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">php</span>
</span><span class='line'><span class="nx">git服务器管理人员需要把所有的开发者公钥保存到authorized_keys文件中。</span>
</span><span class='line'><span class="nv">$cat</span> <span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">id_rsa</span><span class="o">.</span><span class="nx">pub</span><span class="o">.</span><span class="nx">ubuntu</span> <span class="o">&gt;&gt;</span> <span class="nx">authorized_keys</span>
</span><span class='line'><span class="nx">创建项目仓库</span>
</span><span class='line'><span class="nx">git管理人员操作：</span>
</span><span class='line'><span class="nv">$mkdir</span> <span class="o">/</span><span class="nx">home</span><span class="o">/</span><span class="nx">git</span><span class="o">/</span><span class="nx">gitproject</span>
</span><span class='line'><span class="nv">$cd</span> <span class="nx">gitproject</span>
</span><span class='line'><span class="nv">$git</span> <span class="o">&amp;</span><span class="nx">ndash</span><span class="p">;</span><span class="nx">bare</span> <span class="nx">init</span> <span class="nx">（创建一个空项目）</span>
</span><span class='line'><span class="nx">开发者提交项目</span>
</span><span class='line'><span class="nx">ubuntu开发者操作：</span>
</span><span class='line'><span class="nv">$git</span> <span class="nx">remote</span> <span class="nx">add</span> <span class="nx">origin</span> <span class="nx">git</span><span class="o">@</span><span class="nx">gitserver</span><span class="o">:/</span><span class="nx">opt</span><span class="o">/</span><span class="nx">git</span><span class="o">/</span><span class="nx">project</span><span class="o">.</span><span class="nx">git</span>
</span><span class='line'><span class="nv">$git</span> <span class="nx">push</span> <span class="nx">origin</span> <span class="nx">master</span>
</span><span class='line'><span class="nx">这样其他开发者的工作也比较简单了：</span>
</span><span class='line'><span class="nv">$git</span> <span class="k">clone</span> <span class="nx">…</span>
</span><span class='line'><span class="nv">$git</span> <span class="nx">push</span> <span class="nx">origin</span> <span class="nx">master</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">cd</span> <span class="o">/</span><span class="nx">repo</span><span class="o">/</span><span class="nx">gitosis</span><span class="o">-</span><span class="nx">admin</span>
</span><span class='line'><span class="nx">vim</span> <span class="nx">gitosis</span><span class="o">.</span><span class="nx">conf</span>
</span><span class='line'><span class="nx">在文件尾增加以下内容</span>
</span><span class='line'><span class="p">[</span><span class="nx">group</span> <span class="nx">test</span><span class="p">]</span>  <span class="nx">组名称</span>
</span><span class='line'><span class="nx">writable</span> <span class="o">=</span> <span class="nx">test</span>  <span class="nx">项目名称</span>
</span><span class='line'><span class="nx">members</span> <span class="o">=</span> <span class="nx">jankerli</span> <span class="nx">密钥用户名</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">提交修改</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">git</span> <span class="nx">add</span> <span class="o">.</span>
</span><span class='line'><span class="nx">git</span> <span class="nx">commit</span> <span class="o">-</span><span class="nx">a</span> <span class="o">-</span><span class="nx">m</span> <span class="nx">“add</span> <span class="nx">test</span> <span class="nx">repo”</span>
</span><span class='line'><span class="nx">git</span> <span class="nx">push</span>
</span></code></pre></td></tr></table></div></figure>
<strong>初始，增加及使用项目test-git</strong></p>

<pre><code class="php">cd /repo
mkdir test-git
cd test-git
git inti
touch readme
git add .
git commit -a -m “init test-git”
git remote add origin git@xxx:test.git
git push origin master
</code></pre>

<p><strong>在 test 项目新增用户</strong>
①在新增用户的本机输入ssh-keygen -t rsa生成私钥公钥；
②把生成的公钥id_rsa.pub上传或复制到 gitosis-admin/keydir文件夹下，并重名，如：jankerli.pub；
③vim gitosis.conf
<code>php
在文件尾增加以下内容
\[group test\]
writable = test
members = jankerli （此处增加新用户的名称，名称必须与上面重名的jankerli.pub一致，去掉.pub）
④提交修改
git add .
git commit -a -m “add test repo”
git push
</code>
⑤新用户便可通过 git clone git@xxx:test.git 克隆代码到本机了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux-MYSQL-常用命令]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/28/linux-mysql-code/"/>
    <updated>2016-04-28T01:24:16+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/28/linux-mysql-code</id>
    <content type="html"><![CDATA[<blockquote><p>Linux 下Mysql 常用命令总结</p></blockquote>

<!--more-->


<h1>一、linux下mysql的基本命令：</h1>

<pre><code>1. linux下启动mysql的命令：
mysqladmin start
/ect/init.d/mysql start (前面为mysql的安装路径)
/usr/local/mysql/bin/mysqld_safe --user=mysql &amp;      启动
2. linux下重启mysql的命令：
mysqladmin restart
/ect/init.d/mysql restart (前面为mysql的安装路径)
3. linux下关闭mysql的命令：
mysqladmin shutdown
/ect/init.d/mysql shutdown (前面为mysql的安装路径)

4. 连接本机上的mysql：
进入目录mysql\bin，再键入命令mysql -uroot -p， 回车后提示输入密码。
退出mysql命令：exit（回车）

5. 修改mysql密码：
mysqladmin -u用户名 -p旧密码 password 新密码
或进入mysql命令行SET PASSWORD FOR root=PASSWORD("root");

6. 增加新用户。（注意：mysql环境中的命令后面都带一个分号作为命令结束符）
grant select on 数据库.* to 用户名@登录主机 identified by "密码"
如增加一个用户test密码为123，让他可以在任何主机上登录， 并对所有数据库有查询、插入、修改、删除的权限。首先用以root用户连入mysql，然后键入以下命令：
grant select,insert,update,delete on *.* to " Identified by "123";
</code></pre>

<h1>二、有关mysql数据库方面的操作</h1>

<blockquote><p>必须首先登录到mysql中，有关操作都是在mysql的提示符下进行，而且每个命令以分号结束</p></blockquote>

<pre><code>1. 显示数据库列表。
    show databases;
2. 显示库中的数据表：
    use mysql； ／／打开库
    show tables;
3. 显示数据表的结构：
    describe 表名;
4. 建库：
    create database 库名;

    GBK: create database test2 DEFAULT CHARACTER SET gbk COLLATE gbk_chinese_ci;
    UTF8: CREATE DATABASE `test2` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
5. 建表：
    use 库名；
    create table 表名(字段设定列表)；
6. 删库和删表:
    drop database 库名;
    drop table 表名；
7. 将表中记录清空：
    delete from 表名;
    truncate table  表名;
8. 显示表中的记录：
    select * from 表名;
9. 编码的修改
    如果要改变整个mysql的编码格式：  
    启动mysql的时候，mysqld_safe命令行加入  
    --default-character-set=gbk 
    如果要改变某个库的编码格式：在mysql提示符后输入命令  
    alter database db_name default character set gbk;

10. 重命名表
    alter table t1 rename t2;
11. 查看sql语句的效率
    explain &lt; table_name &gt;
    例如：explain select * from t3 where id=3952602;
12. 用文本方式将数据装入数据库表中(例如D:/mysql.txt)

    mysql&gt; LOAD DATA LOCAL INFILE "D:/mysql.txt" INTO TABLE MYTABLE;
</code></pre>

<h1>三、数据的导入导出(1)</h1>

<pre><code>1. 文本数据转到数据库中
    文本数据应符合的格式：字段数据之间用tab键隔开，null值用来代替。
    例：1 name duty 2006-11-23
    数据传入命令 load data local infile "文件名" into table 表名;

2. 导出数据库和表
    mysqldump --opt news &gt; news.sql（将数据库news中的所有表备份到news.sql文件，news.sql是一个文本文件，文件名任取。）
    mysqldump --opt news author article &gt; author.article.sql（将数据库news中的author表和article表备份到author.article.sql文件， author.article.sql是一个文本文件，文件名任取。）
    mysqldump --databases db1 db2 &gt; news.sql（将数据库dbl和db2备份到news.sql文件，news.sql是一个文本文件，文件名任取。）
    mysqldump -h host -u user -p pass --databases dbname &gt; file.dump
    就是把host上的以名字user，口令pass的数据库dbname导入到文件file.dump中
    mysqldump --all-databases &gt; all-databases.sql（将所有数据库备份到all-databases.sql文件，all-databases.sql是一个文本文件，文件名任取。）

3. 导入数据
    mysql &lt; all-databases.sql（导入数据库）
    mysql&gt;source news.sql;（在mysql命令下执行，可导入表）
</code></pre>

<h1>四、数据的导入导出(2)</h1>

<pre><code>一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：
    1、导出数据和表结构：
    mysqldump -u用户名 -p密码 数据库名 &gt; 数据库名.sql
    #/usr/local/mysql/bin/   mysqldump -uroot -p abc &gt; abc.sql
</code></pre>

<p>敲回车后会提示输入密码</p>

<pre><code>    2、只导出表结构
    mysqldump -u用户名 -p密码 -d 数据库名 &gt; 数据库名.sql
    #/usr/local/mysql/bin/   mysqldump -uroot -p -d abc &gt; abc.sql
</code></pre>

<p>注：/usr/local/mysql/bin/  &mdash;>  mysql的data目录</p>

<pre><code>二、导入数据库
    1、首先建空数据库
    mysql&gt;create database abc;

    2、导入数据库
    方法一：
        （1）选择数据库
        mysql&gt;use abc;
        （2）设置数据库编码
        mysql&gt;set names utf8;
        （3）导入数据（注意sql文件的路径）
        mysql&gt;source /home/abc/abc.sql;
    方法二：
        mysql -u用户名 -p密码 数据库名 &lt; 数据库名.sql
        #mysql -uabc_f -p abc &lt; abc.sql

        建议使用第二种方法导入。
</code></pre>

<p>注意：有命令行模式，有sql命令</p>

<h1>五、常用操作</h1>

<h2>连接MySQL</h2>

<pre><code>格式： mysql -h主机地址 -u用户名 －p用户密码

1、例1：连接到本机上的MYSQL。

首先在打开DOS窗口，然后进入目录 mysqlbin，再键入命令mysql -uroot -p，
回车后提示你输密码，如果刚安装好MYSQL，超级用户root是没有密码的，
故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql&gt;。

2、例2：连接到远程主机上的MYSQL。假设远程主机的IP为：110.110.110.110，
用户名为root,密码为abcd123。则键入以下命令：

mysql -h110.110.110.110 -uroot -pabcd123

（注:u与root可以不用加空格，其它也一样）

3、退出MYSQL命令： exit （回车）。
</code></pre>

<h2>修改密码</h2>

<pre><code>格式：mysqladmin -u用户名 -p旧密码 password 新密码

1、例1：给root加个密码ab12。首先在DOS下进入目录mysqlbin，然后键入以下命令：

mysqladmin -uroot -password ab12

注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。

2、例2：再将root的密码改为djg345。

mysqladmin -uroot -pab12 password djg345
</code></pre>

<h2>增加新用户。</h2>

<blockquote><p>（注意：和上面不同，下面的因为是MySQL环境中的命令，所以后面都带一个分号作为命令结束符）</p></blockquote>

<pre><code>格式：grant select on 数据库.* to 用户名@登录主机 identified by \"密码\"

例1、增加一个用户test1密码为abc，让他可以在任何主机上登录，
并对所有数据库有查询、插入、修改、删除的权限。首先用以root用户连入MySQL，然后键入以下命令：
grant select,insert,update,
delete on *.* to test1@\"%\" Identified by \"abc\";

但例1增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以
在internet上的任何一台电脑上登录你的MySQL数据库并对你的数据可以为所欲为了，
解决办法见例2。

例2、增加一个用户test2密码为abc,让他只可以在localhost上登录，
并可以对数据库mydb进行查询、插入、修改、删除的操作 
（localhost指本地主机，即MySQL数据库所在的那台主机），
这样用户即使用知道test2的密码，他也无法从internet上直接访问数据 库，
只能通过MySQL主机上的web页来访问。

grant select,insert,update,
delete on mydb.* to test2@localhost identified by \"abc\";

如果你不想test2有密码，可以再打一个命令将密码消掉。

grant select,insert,update,delete on mydb
.* to test2@localhost identified by \"\";
</code></pre>

<h2>整理</h2>

<pre><code>启动：net start mySql;
进入：mysql -u root -p/mysql -h localhost -u root -p databaseName;
列出数据库：show databases;
选择数据库：use databaseName;
列出表格：show tables；
显示表格列的属性：show columns from tableName；
建立数据库：source fileName.txt;
匹配字符：可以用通配符_代表任何一个字符，％代表任何字符串;
增加一个字段：alter table tabelName add column fieldName dateType;
增加多个字段：alter table tabelName add column fieldName1 dateType,add columns fieldName2 dateType;
多行命令输入:注意不能将单词断开;当插入或更改数据时，不能将字段的字符串展开到多行里，否则硬回车将被储存到数据中;
增加一个管理员帐户：grant all on *.* to user@localhost identified by "password";
每条语句输入完毕后要在末尾填加分号';'，或者填加'\g'也可以；
查询时间：select now();
查询当前用户：select user();
查询数据库版本：select version();
查询当前使用的数据库：select database();
</code></pre>

<p>1、删除student_course数据库中的students数据表：</p>

<pre><code>rm -f student_course/students.*
</code></pre>

<p>2、备份数据库：(将数据库test备份)</p>

<pre><code>mysqldump -u root -p test&gt;c:\test.txt
备份表格：(备份test数据库下的mytable表格)
mysqldump -u root -p test mytable&gt;c:\test.txt
将备份数据导入到数据库：(导回test数据库)
mysql -u root -p test
</code></pre>

<p>3、创建临时表：(建立临时表zengchao)</p>

<pre><code>create temporary table zengchao(name varchar(10));
</code></pre>

<p>4、创建表是先判断表是否存在</p>

<pre><code>create table if not exists students(……);
</code></pre>

<p>5、从已经有的表中复制表的结构</p>

<pre><code>create table table2 select * from table1 where 1&lt;&gt;1;
</code></pre>

<p>6、复制表</p>

<pre><code>create table table2 select * from table1;
</code></pre>

<p>7、对表重新命名</p>

<pre><code>alter table table1 rename as table2;
</code></pre>

<p>8、修改列的类型</p>

<pre><code>alter table table1 modify id int unsigned;//修改列id的类型为int unsigned
alter table table1 change id sid int unsigned;//修改列id的名字为sid，而且把属性修改为int unsigned
</code></pre>

<p>9、创建索引</p>

<pre><code>alter table table1 add index ind_id (id);
create index ind_id on table1 (id);
create unique index ind_id on table1 (id);//建立唯一性索引
</code></pre>

<p>10、删除索引</p>

<pre><code>drop index idx_id on table1;
alter table table1 drop index ind_id;
</code></pre>

<p>11、联合字符或者多个列(将列id与":&ldquo;和列name和&rdquo;=&ldquo;连接)</p>

<pre><code>select concat(id,':',name,'=') from students;
</code></pre>

<p>12、limit(选出10到20条)&lt;第一个记录集的编号是0></p>

<pre><code>select * from students order by id limit 9,10;
</code></pre>

<p>13、MySQL不支持的功能</p>

<pre><code>事务，视图，外键和引用完整性，存储过程和触发器
</code></pre>

<p>14、MySQL会使用索引的操作符号</p>

<pre><code>&lt;,&lt;=,&gt;=,&gt;,=,between,in,不带%或者_开头的like
</code></pre>

<p>15、使用索引的缺点</p>

<pre><code>1)减慢增删改数据的速度；
2）占用磁盘空间；
3）增加查询优化器的负担；
当查询优化器生成执行计划时，会考虑索引，太多的索引会给查询优化器增加工作量，导致无法选择最优的查询方案；
</code></pre>

<p>16、分析索引效率</p>

<pre><code>方法：在一般的SQL语句前加上explain；
分析结果的含义：
1）table：表名；
2）type：连接的类型，(ALL/Range/Ref)。其中ref是最理想的；
3）possible_keys：查询可以利用的索引名；
4）key：实际使用的索引；
5）key_len：索引中被使用部分的长度（字节）；
6）ref：显示列名字或者"const"（不明白什么意思）；
7）rows：显示MySQL认为在找到正确结果之前必须扫描的行数；
8）extra：MySQL的建议；
</code></pre>

<p>17、使用较短的定长列</p>

<pre><code>1）尽可能使用较短的数据类型；
2）尽可能使用定长数据类型；
a）用char代替varchar，固定长度的数据处理比变长的快些；
b）对于频繁修改的表，磁盘容易形成碎片，从而影响数据库的整体性能；
c）万一出现数据表崩溃，使用固定长度数据行的表更容易重新构造。使用固定长度的数据行，每个记录的开始位置都是固定记录长度的倍数，可以很容易被检测到，但是使用可变长度的数据行就不一定了；
d）对于MyISAM类型的数据表，虽然转换成固定长度的数据列可以提高性能，但是占据的空间也大；
</code></pre>

<p>18、使用not null和enum</p>

<pre><code>尽量将列定义为not null，这样可使数据的出来更快，所需的空间更少，而且在查询时，MySQL不需要检查是否存在特例，即null值，从而优化查询；
如果一列只含有有限数目的特定值，如性别，是否有效或者入学年份等，在这种情况下应该考虑将其转换为enum列的值，MySQL处理的更快，因为所有的enum值在系统内都是以标识数值来表示的；
</code></pre>

<p>19、使用optimize table</p>

<pre><code>对于经常修改的表，容易产生碎片，使在查询数据库时必须读取更多的磁盘块，降低查询性能。具有可变长的表都存在磁盘碎片问题，这个问题对blob数据类型更为突出，因为其尺寸变化非常大。可以通过使用optimize table来整理碎片，保证数据库性能不下降，优化那些受碎片影响的数据表。 optimize table可以用于MyISAM和BDB类型的数据表。实际上任何碎片整理方法都是用mysqldump来转存数据表，然后使用转存后的文件并重新建数据表；
</code></pre>

<p>20、使用procedure analyse()</p>

<pre><code>可以使用procedure analyse()显示最佳类型的建议，使用很简单，在select语句后面加上procedure analyse()就可以了；例如：
select * from students procedure analyse();
select * from students procedure analyse(16,256);
第二条语句要求procedure analyse()不要建议含有多于16个值，或者含有多于256字节的enum类型，如果没有限制，输出可能会很长；
</code></pre>

<p>21、使用查询缓存</p>

<pre><code>1）查询缓存的工作方式：
第一次执行某条select语句时，服务器记住该查询的文本内容和查询结果，存储在缓存中，下次碰到这个语句时，直接从缓存中返回结果；当更新数据表后，该数据表的任何缓存查询都变成无效的，并且会被丢弃。
2）配置缓存参数：
变量：query_cache _type，查询缓存的操作模式。有3中模式，0：不缓存；1：缓存查询，除非与 select sql_no_cache开头；2：根据需要只缓存那些以select sql_cache开头的查询； query_cache_size：设置查询缓存的最大结果集的大小，比这个值大的不会被缓存。
</code></pre>

<p>22、调整硬件</p>

<pre><code>1）在机器上装更多的内存；
2）增加更快的硬盘以减少I/O等待时间；
寻道时间是决定性能的主要因素，逐字地移动磁头是最慢的，一旦磁头定位，从磁道读则很快；
3）在不同的物理硬盘设备上重新分配磁盘活动；
如果可能，应将最繁忙的数据库存放在不同的物理设备上，这跟使用同一物理设备的不同分区是不同的，因为它们将争用相同的物理资源（磁头）。
</code></pre>

<h2>删除MySQL数据库</h2>

<p>1、创建数据库</p>

<pre><code>mysql&gt; create database drop_database;
Query OK, 1 row affected (0.00 sec)
</code></pre>

<p>2、删除一个已经确定存在的数据库</p>

<pre><code>mysql&gt; drop database drop_database;
Query OK, 0 rows affected (0.00 sec)
</code></pre>

<p>3、删除一个不确定存在的数据库</p>

<pre><code>mysql&gt; drop database drop_database;
ERROR 1008 (HY000): Can't drop database 'drop_database'; database doesn't exist
//发生错误，不能删除'drop_database'数据库，该数据库不存在。
mysql&gt; drop database if exists drop_database;
Query OK, 0 rows affected, 1 warning (0.00 sec)//产生一个警告说明此数据库不存在
mysql&gt; create database drop_database;
Query OK, 1 row affected (0.00 sec)
mysql&gt; drop database if exists drop_database;//if exists 判断数据库是否存在，不存在也不产生错误
Query OK, 0 rows affected (0.00 sec)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux常用命令]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/26/linux-chang-yong-min-ling/"/>
    <updated>2016-04-26T18:55:40+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/26/linux-chang-yong-min-ling</id>
    <content type="html"><![CDATA[<blockquote><p>Linux 命令总结</p></blockquote>

<!--more-->


<h1>一、常用目录作用</h1>

<ul>
<li>/ 根目录</li>
<li>/bin 命令保存目录（普通用户可以读取的命令）</li>
<li>/boot 启动目录，启动相关文件</li>
<li>/dev  设备文件保存目录</li>
<li>/etc  配置文件目录</li>
<li>/home 普通用户家目录</li>
<li>/lib  系统库保存目录</li>
<li>/mnt  系统挂载目录</li>
<li>/media    挂载目录</li>
<li>/root 超级用户的家目录</li>
<li>/tmp  临时目录</li>
<li>/sbin 命令保存目录（超级用户才能使用）</li>
<li>/proc 直接写入内存</li>
<li>/sys  ~</li>
<li><p>/usr  系统软件资源目录</p>

<ul>
<li>/usr/bin  系统命令（普通用户）</li>
<li>/usr/sbin 系统命令（超级用户）</li>
</ul>
</li>
<li><p>/var  系统相关文档</p></li>
</ul>


<hr />

<h1>二、常用基本命令</h1>

<h2>2.1 目录和文件处理命令</h2>

<ul>
<li><p>mkdir [选项] [目录名] 创建目录</p>

<ul>
<li>-p 递归创建</li>
</ul>
</li>
<li><p>rm [选项] [目录名] 删除</p>

<ul>
<li>-r 删除目录</li>
<li>-f 强制</li>
</ul>
</li>
<li><p>mv [原文件或目录] [目标目录] 剪切或改名</p>

<ul>
<li>没有选项 剪切文件和目录使用相同命令</li>
</ul>
</li>
<li>cp [选项] [原文件或目录] [目标目录]

<ul>
<li>-r 复制目录</li>
<li>-p 连带文件属性复制</li>
<li>-d 若源文件是连接文件，则赋值连接属性</li>
<li>-a 相当于-pdr</li>
</ul>
</li>
<li><p>cd</p>

<ul>
<li>~ 进入家目录</li>
<li><ul>
<li>进入上次目录</li>
</ul>
</li>
<li>.. 进入上级目录</li>
<li>. 进入当前目录</li>
</ul>
</li>
<li><p>pwd 显示当前所在位置</p></li>
<li><p>ls [选项] [目录]</p>

<ul>
<li>-l 长格式 详细信息</li>
<li>-h 人性化显示大小 如-lh 会把大小变成能看懂的格式如128k</li>
<li>-a 显示所有文件</li>
<li>-d 查看目录属性</li>
<li>-i 显示inode id号</li>
</ul>
</li>
</ul>


<h2>2.2链接命令</h2>

<ul>
<li><p>硬链接 不推荐 ln  [原文件] [目标文件]</p>

<ul>
<li>拥有相同的i节点和存储block块，可以看做是同一个文件。相当于一个文件的两个接入。</li>
<li>可以通过i节点识别</li>
<li>不能跨分区</li>
<li>不能针对目录使用</li>
</ul>
</li>
<li><p>软链接</p>

<ul>
<li>类似Windows快捷方式</li>
<li>软链接拥有自己的I节点和Block块，但是数据中只保存原文件的文件名和节点号，并没有实际文件数据</li>
<li>lrwxrwxrwx l 软链接 软链接的权限都为 rwxrwxrwx、</li>
<li>修改任意文件，另一个都改变</li>
<li>删除原文件，软链接不能使用</li>
</ul>
</li>
<li>ln -s [原文件] [目标文件] 软链接 （原文件一定要写绝对路径）</li>
</ul>


<h2>2.3 文件搜索命令</h2>

<ul>
<li>配置文件 /etc/updatedb.conf

<ul>
<li>PRUNE_BIND_MOUNTS=&ldquo;yes&rdquo; #开启器搜索限制</li>
<li>PRUNEFS = #搜索时不搜索的文件系统</li>
<li>PRUNENAMES = #搜索时不搜索的文件系统</li>
<li>PRUNEPATHS = # 搜索时不搜多的路径</li>
</ul>
</li>
<li><p>locate [文件名] 在后台数据库按文件名搜索，搜索速度较快</p>

<ul>
<li>/var/lib/mlocate #locate命令搜索的数据库</li>
<li>updatadb 强制更新数据库（默认一天一更新）</li>
</ul>
</li>
<li><p>whereis [选项] [命令] 搜索命令的命令 输出命令位置和帮助文档位置  只能查系统命令</p>

<ul>
<li>-b 只看命令所在位置</li>
<li>-m 只看帮助文档所在位置</li>
</ul>
</li>
<li><p>which [命令] 找到命令和别命</p></li>
<li><p>find [搜索范围] [搜索文件]</p>

<ul>
<li>find / -name install.log</li>
<li>避免大范围搜索，非常消耗系统资源</li>
<li>*匹配任意内容</li>
<li>？匹配任意一个字符</li>
<li>[]任意中括号之内的一个内容</li>
<li>find / -iname install.log 不区分大小写</li>
<li>find / -user root 按所有者搜索</li>
<li>find / -user -nouser 搜索没有所有者的文件</li>
<li><p>find /var/log -mtime +10 查找十天前修改的文件</p>

<ul>
<li>atime 文件访问时间 -10 十天内</li>
<li>ctime 改变文件属性  10 十天当天</li>
<li>mtime 修改文件内容 +10 十天前</li>
</ul>
</li>
<li><p>find . -size 25k 查找当前目录25k的文件</p>

<ul>
<li>-25 小于25k</li>
<li>+25 大于25k</li>
</ul>
</li>
<li><p>find . -inum xxx 查找当前目录i节点为XX的文件</p></li>
<li>find /etc -size +20k -a -50k  ect下大于20k小于50k的问价

<ul>
<li>-a  and 逻辑与</li>
<li>-o  or  逻辑或</li>
</ul>
</li>
<li>find /etc -size +20k -a -50k -exec ls -lh {} \;将查找到的文件LS出来

<ul>
<li>-exec/-ok 命令 {} \ ; 对搜索结果执行操作、</li>
</ul>
</li>
</ul>
</li>
<li><p>grep [选项] 字符串 文件名 在文件中匹配符合条件的字符串</p>

<ul>
<li>-i 忽略大小写</li>
<li>-v 排除指定字符串</li>
</ul>
</li>
</ul>


<h2>2.4帮助命令</h2>

<ul>
<li><p>man  命令</p>

<ul>
<li>man一共有1-9级 man -f 命令 查看命令有几个帮助级别</li>
<li>man [1-9] 命令 查看现有级别的帮助</li>
</ul>
</li>
<li><p>&ndash;help    或许选项帮助</p>

<ul>
<li>ls &ndash;help 获取选项</li>
</ul>
</li>
<li>help shell内部命令 获取shell内部命令帮助

<ul>
<li>用 whereis cd 来看是否为内部命令，没有执行文件则为内部命令</li>
<li>如 help cd</li>
</ul>
</li>
<li>info 详细命令帮助 太复杂 不常用

<h1>2.5压缩与解压缩命令</h1></li>
<li>常用压缩格式：.zip .gz .bz2 .tar.gz .tar.bz2</li>
<li>zip [目标文件] [源文件]

<ul>
<li>zip -r [压缩目录名] [源目录]</li>
<li>unzip [压缩文件] 解压缩</li>
</ul>
</li>
<li>gzip [源文件] 生成.gz文件 #源文件消失

<ul>
<li>gzip -c 源文件 > 压缩文件 #压缩为.gz 源文件不消失</li>
<li>gzip -r 压缩目录下所有子文件 但是不能压缩目录</li>
<li>gzip -d 压缩包 #解压缩</li>
<li>gunzip 压缩包 #解压缩</li>
</ul>
</li>
<li>bz2 不能压缩目录

<ul>
<li>bzip2 源文件  #不保留源文件</li>
<li>bzip2 -k 源文件  #保留源文件</li>
<li>bzip2 -d 压缩包  #-k保留源文件</li>
<li>bunzip2  压缩包  #-k保留源文件</li>
</ul>
</li>
<li><p>tar -jcvf 压缩包名.tar.bz2 源文件</p>

<ul>
<li>-z 压缩为.tar.gz</li>
<li>-c 打包</li>
<li>-v 显示打包过程</li>
<li>-f 指定打包后的文件名</li>
</ul>
</li>
<li><p>tar -jxvf 压缩包名.tar.bz2 加 -C 指定解压缩位置</p>

<ul>
<li>-z 解压缩.tar.gz

<h1>2.6关机重启命令</h1></li>
</ul>
</li>
<li><p>shutdown [选项] [时间] &amp; #加&amp;表示在后台运行</p>

<ul>
<li>-c 取消前一个关机命令</li>
<li>-h 关机</li>
<li>-r 重启</li>
</ul>
</li>
<li><p>poweroff</p></li>
<li><p>reboot</p></li>
<li><p>init 【0-6】</p>

<ul>
<li>0 关机</li>
<li>1 单用户</li>
<li>2 不完全多用户，不含NFS</li>
<li>3 完全多用户</li>
<li>4 未分配</li>
<li>5 图形界面</li>
<li>6 重启</li>
</ul>
</li>
</ul>


<h1>2.7挂载命令</h1>

<ul>
<li>mount #查看系统已挂载的设备</li>
<li>mount -a #根据配置文件/etc/fstab 的内容 下的设备自动挂载</li>
<li><p>mount [-t 文件系统] [-o 特殊选项] 设备文件名 挂载点</p>

<ul>
<li>-t ext3 ext4 iso9660（光盘）</li>
</ul>
</li>
<li><p>挂载光盘</p>

<ol>
<li>mkdir /mnt/cdroom</li>
<li>mount -t iso9660 /dev/sr0 /mnt/cdrom/ 其中-t在这里可省略因为系统知道sr0为光盘，知道它的文件系统。</li>
<li>umount 设备文件名或挂载点 #卸载 必须卸载！！！</li>
</ol>
</li>
<li><p>挂载U盘</p>

<ol>
<li>fdisk -l 查看系统中已经识别的硬盘</li>
<li>mount -t vfat /dec/sdbx/mnt/usb/ #sdbX通过上一条命令查看可知</li>
<li>Linux默认不支持NTFS文件系统，需要下载ntfs-3g安装可以挂载ntfs但是也只能读。</li>
</ol>
</li>
</ul>


<h1>2.8其他常用命令</h1>

<ul>
<li>用户登录查看

<ul>
<li>w  #查看登录登录用户的信息 输出一些信息 包括占用cpu等</li>
<li>who</li>
<li>输出 用户名 登录登录终端 登录时间和IP</li>
<li>last 查询登录日志 /var/log/wtmp</li>
<li>lastlog 查看每个用户的最后登录信息/var/log/lastlog</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
