<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mysql | Ewan Reton]]></title>
  <link href="http://ewanreton.github.io/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://ewanreton.github.io/"/>
  <updated>2016-06-01T23:45:19+08:00</updated>
  <id>http://ewanreton.github.io/</id>
  <author>
    <name><![CDATA[Ewan Reton]]></name>
    <email><![CDATA[liukedi001@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[数据库优化]]></title>
    <link href="http://ewanreton.github.io/blog/2016/05/23/mysql-you-hua/"/>
    <updated>2016-05-23T12:57:08+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/05/23/mysql-you-hua</id>
    <content type="html"><![CDATA[<blockquote><p>在面试的时候被问到数据库优化问题，结果一下没反应过来理解为了PHP性能优化（懵逼脸）一顿BB，然后就GG了</p></blockquote>

<!--more-->


<h1>SQL及索引优化</h1>

<p><strong>如何发现有问题的SQL？</strong></p>

<p>使用MySQL慢查日志对有效率问题的SQL进行监控
<code>php
show varilables like 'show_query_log' //查看是否开启慢查日志
set global slow_query_log=on;//开启慢查日志
set global slow_query_log_file='/home/mysql/sql_log/mysql-show.log' //设置保存位置
set global log_queries_not_using_indexes=on; //记录没有索引的SQL
set global long_query_time=1 //记录大于1s的SQL
</code>
<strong>慢查日志分析工具</strong></p>

<ul>
<li><p>mysqldumoslow mysql自带的分析工具</p></li>
<li><p>pt-query-digest 比上一种更详细</p></li>
</ul>


<p><img src="http://f.picphotos.baidu.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=44ebfc52d7a20cf44290feda46323a0b/b3b7d0a20cf431add68638ec4c36acaf2fdd988a.jpg?referer=27406310e7fe9925921b5d60d888&amp;x=.jpg" alt="" /></p>

<p><strong>发现有问题的SQL</strong></p>

<p><img src="http://d.picphotos.baidu.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=c1319fecb4de9c82a265f98a5cbaf137/d009b3de9c82d1589fd62264870a19d8bd3e428a.jpg?referer=af6adca0d188d43fa9bea5c2ae88&amp;x=.jpg" alt="" /></p>

<p><strong>如何分析SQL查询</strong></p>

<p>使用<code>explain</code>查询SQL的执行计划</p>

<pre><code class="php">explain select * from test;
</code></pre>

<p><img src="http://c.picphotos.baidu.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=9f740fd1900a304e5622a0ffe1f3d6bb/4034970a304e251ff7a19f2da086c9177e3e5394.jpg?referer=d4961c83d71609248532962b9d8a&amp;x=.jpg" alt="" />
<img src="http://e.picphotos.baidu.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=b640bc36502c11dfdad1bf26531c13ed/f3d3572c11dfa9ec5e8a2dc265d0f703908fc1bb.jpg?referer=8596971cd02a60590b07d52a2f59&amp;x=.jpg" alt="" />
<strong>Count()和Max()的优化</strong></p>

<pre class="prettyprint">
Max():添加索引
Count()：在使用时注意查询具体列和*，查询某一列的时候不会包含为NULL的项
</pre>


<p><strong>子查询优化</strong></p>

<pre class="prettyprint">
通常情况下需要把子查询优化为join查询，但在优化时要注意关联建是否有一对多的关系，要注意重复数据。
select * from t where t.id in (select t1.tid from t1);
select t.id from t join t1 on t.id=t1.tid;
当出现一对多的关系需要使用distinct去重
select  distinct t.id from t join t1 on t.id=t1.tid;
</pre>


<p><strong>group by 优化</strong></p>

<pre class="prettyprint linenums">
explain select actor.first_name,actor.last_name,COUNT(*) FROM sakila.file_actor 
INNER JOIN sakila.actor USING(actor_id) 
GROUP BY film_actor.actor.id;
优化后：
SELECT actor.first_name,actor.last_name,c.cnt
FROM sakila.actor INNER JOIN (
SELECT actor_id,COUNT(*) AS cnt FROM sakila.film_actor GROUP BY actor_id
)AS c USING(actor_id);
</pre>


<p><strong>limit 优化</strong></p>

<pre class="prettyprint">
limit 常用于分页处理，时常会伴随order by使用，因此大多时候会使用Filesorts这样会造成大量IO问题
SELECT  film_id,description FROM sakila.film ORDER BY title LIMIT 50,5;
优化1:使用有索引的列或主键进行Order by
SELECT film_id,description FROM sakila.film ORDER BY film_id LIMIT 50,5;
优化2:记录上次返回的主键，在下次查询时使用主键过滤
SELECT film_id,description FROM sakila.film WHERE film_id>55 and film_id<60 ORDER BY film_id LIMIT 1,5;
</pre>


<h1>索引优化</h1>

<ul>
<li>在离散度较大的列上建立联合索引</li>
<li>过多的索引会减小查询效率。</li>
<li>删除重复和多于的索引
<img src="http://a.picphotos.baidu.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=3ebc9bdcb1003af349badc650511b761/d439b6003af33a87e13f7bcfc15c10385243b590.jpg?referer=3ebe61cbbe389b5061e8d462f38e&amp;x=.jpg" alt="" /></li>
</ul>


<p><strong>查找重复和冗余索引</strong></p>

<p><img src="http://e.picphotos.baidu.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=5cde47c1ac18972ba73a00cfd6f60ab4/0824ab18972bd407b932a8287c899e510eb30969.jpg?referer=7acb3d68ae7739129d31b1517728&amp;x=.jpg" alt="" /></p>

<p>需要在 <code>information_schema</code>库下运行</p>

<ul>
<li>使用pt-duplicate-key-checker 工具检查重复及冗余索引</li>
<li>pt-duplicate-key-checker -uroot -p &lsquo;xxxx&rsquo; -h 127.0.0.1</li>
</ul>


<h1>数据库结构优化</h1>

<p><strong>选择合适的数据类型</strong></p>

<ul>
<li>使用可以存下你的数据的最小的数据类型</li>
<li>使用简单的数据类型，Int要比varchar类型在mysql处理上简单</li>
<li>尽可能使用not null 定义字段</li>
<li>尽量少使用text类型，非用不可以时最好考虑分表</li>
<li>使用bigint来存放ip</li>
</ul>


<p><strong>表的范式化和反范式化</strong></p>

<p>范式化一般是指第三设计范式，也就是要求数据表中不存在飞关键字段对任意候选关键字的传递函数依赖则符合第三范式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn-more-PDO]]></title>
    <link href="http://ewanreton.github.io/blog/2016/05/19/learn-more-pdo/"/>
    <updated>2016-05-19T18:47:27+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/05/19/learn-more-pdo</id>
    <content type="html"><![CDATA[<blockquote><p>前段时间在做手机归属地查询的Demo时突然发现自己对PDO还是太生疏，一直都是用的以前的代码。很多都不太了解，于是重新系统的学习了一下PDO类。</p></blockquote>

<!--more-->


<h1>什么是PDO</h1>

<p>PDO（PHP Data Object）数据库访问抽象层，统一各种数据库的访问接口。
<strong>特性</strong>
* 编码一致性
* 灵活性
* 高性能
* 面向对象特性</p>

<p>PDO的安装与配置，和PHP其他扩展的开启一样，只需要在<code>php.ini</code>里设置即可，这里就不多说了。</p>

<h1>PDO连接数据库</h1>

<pre><code class="php">&lt;?php 
//通过参数形式连接数据库
try{
    $dsn='mysql:host=localhost;dbname=test';
    $username='root';
    $passwd='root';
    $pdo=new PDO($dsn, $username, $passwd);
    var_dump($pdo);
}catch(PDOException $e){
    echo $e-&gt;getMessage();
}
</code></pre>

<p><img src="http://b.picphotos.baidu.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=d2ce6c87044f78f0840b9af6490a7b68/aa64034f78f0f73686e0bed20d55b319eac413c2.jpg?referer=c0077f7aae014c08402c1c955dc1&amp;x=.jpg" alt="" /></p>

<h1>PDO exec</h1>

<blockquote><p>增删改，返回得是受影响的行数</p></blockquote>

<pre><code class="php">&lt;?php 
try{
    $pdo=new PDO('mysql:host=localhost;dbname=test','root','root');
    //exec():执行一条sql语句并返回其受影响的记录的条数,如果没有受影响的记录，他返回0
    //exec对于select没有作用
    $sql=&lt;&lt;&lt;EOF
        CREATE TABLE IF NOT EXISTS user(
        id INT UNSIGNED AUTO_INCREMENT KEY,
        username VARCHAR(20) NOT NULL UNIQUE,
        password CHAR(32) NOT NULL,
        email VARCHAR(30) NOT NULL
        );
EOF;
    //$sql='INSERT user(username,password,email) VALUES("reton","reton","reton@qq.com")';
    //$res=$pdo-&gt;exec($sql);
    //echo '受影响的记录的条数为：'.$res,'&lt;br/&gt;';
    //$pdo-&gt;lastInsertId():得到新插入记录的ID号
    //echo '最后插入的ID号为'.$pdo-&gt;lastInsertId();
    $res=$pdo-&gt;exec($sql);
    var_dump($res); 
    $sql='INSERT user(username,password,email) VALUES("reton","'.md5('reton').'","test@qq.com")';

    //echo $sql;
    $res=$pdo-&gt;exec($sql);
    echo $res;
}catch(PDOException $e){
    echo $e-&gt;getMessage();
}
</code></pre>

<h1>PDO error 获取错误信息</h1>

<blockquote><p>获取错误码和错误信息</p></blockquote>

<pre><code class="php">&lt;?php 
header('content-type:text/html;charset=utf-8');
try{
    $pdo=new PDO('mysql:host=localhost;dbname=test','root','root');
    $sql='delete from user12 where id=1';
    $res=$pdo-&gt;exec($sql);
    //echo $res.'条记录被影响';
    //var_dump($res);
    if($res===false){
        //$pdo-&gt;errorCode():SQLSTATE的值
        echo $pdo-&gt;errorCode();
        echo '&lt;hr/&gt;';
        //$pdo-&gt;errorInfo():返回的错误信息的数组，数组中包含3个单元
        //0=&gt;SQLSTATE,1=&gt;CODE,2=&gt;INFO
        $errInfo=$pdo-&gt;errorInfo();
        print_r($errInfo);
    }
//  echo '&lt;hr/&gt;';
//  echo $pdo-&gt;lastInsertId();
}catch(PDOException $e){
    echo $e-&gt;getMessage();
}
</code></pre>

<h1>PDO query</h1>

<blockquote><p>执行查询，返回的是PDOStatement对象</p></blockquote>

<pre><code class="php">&lt;?php 
header('content-type:text/html;charset=utf-8');
try{
    $pdo=new PDO('mysql:host=localhost;dbname=test','root','root');
    //$sql='select * from user where id=2';
    $sql='select id,username,email from user';
    //$pdo-&gt;query($sql)，执行SQL语句，返回PDOStatement对象
    $stmt=$pdo-&gt;query($sql);
    var_dump($stmt);
    echo '&lt;hr/&gt;';
    foreach($stmt as $row){
        //print_r($row);
        echo '编号：'.$row['id'],'&lt;br/&gt;';
        echo '用户名：'.$row['password'],'&lt;br/&gt;';
        echo '邮箱：'.$row['email'],'&lt;br/&gt;';
        echo '&lt;hr/&gt;';
    }
}catch(PDOException $e){
    echo $e-&gt;getMessage();
}
</code></pre>

<h1>PDO prepare</h1>

<blockquote><p>prepare 准备方法</p></blockquote>

<pre><code class="php">header('content-type:text/html;charset=utf-8');
try{
    $pdo=new PDO('mysql:host=localhost;dbname=test','root','root');
    $sql='select * from user where username="reton"';
    //prepare($sql):准备SQL语句
    $stmt=$pdo-&gt;prepare($sql);
    //execute():执行预处理语句
    $res=$stmt-&gt;execute();
    //var_dump($res);
    //fetch():得到结果集中的一条记录
    $row=$stmt-&gt;fetch();
    print_r($row);

    //var_dump($stmt);
}catch(PDOException $e){
    echo $e-&gt;getMessage();
}
</code></pre>

<pre><code class="php fetch.php">&lt;?php 
header('content-type:text/html;charset=utf-8');
try{
    $pdo=new PDO('mysql:host=localhost;dbname=test','root','root');
    $sql='select * from user';
    $stmt=$pdo-&gt;prepare($sql);
    $res=$stmt-&gt;execute();
//  if($res){
//      while($row=$stmt-&gt;fetch()){
//          print_r($row);
//          echo '&lt;hr/&gt;';
//      }
//  }
    $rows=$stmt-&gt;fetchAll();
    print_r($rows);

    //var_dump($stmt);
}catch(PDOException $e){
    echo $e-&gt;getMessage();
}
</code></pre>

<pre><code class="php setFetchMode.php">&lt;?php 
header('content-type:text/html;charset=utf-8');
try{
    $pdo=new PDO('mysql:host=localhost;dbname=test','root','root');
    $sql='select * from user';
    $stmt=$pdo-&gt;prepare($sql);
    $res=$stmt-&gt;execute();
//  if($res){
//      while($row=$stmt-&gt;fetch(PDO::FETCH_OBJ)){//返回对象
//          print_r($row);
//          echo '&lt;hr/&gt;';
//      }
//  }
//  $rows=$stmt-&gt;fetchAll(PDO::FETCH_ASSOC);//返回关联数组BOTH为数组加索引
//  print_r($rows);
    echo '&lt;hr/&gt;';
    $stmt-&gt;setFetchMode(PDO::FETCH_ASSOC);//set了就不用传参了    
    //var_dump($stmt);
    $rows=$stmt-&gt;fetchAll();
    print_r($rows);
}catch(PDOException $e){
    echo $e-&gt;getMessage();
}
</code></pre>

<h1>PDO getAttribute</h1>

<blockquote><p>获得数据库连接属性</p></blockquote>

<pre><code class="php">&lt;?php 
header('content-type:text/html;charset=utf-8');
try{
    $dsn='mysql:host=localhost;dbname=test';
    $username='root';
    $passwd='root';
    $pdo=new PDO($dsn, $username, $passwd);
    echo '自动提交：'.$pdo-&gt;getAttribute(PDO::ATTR_AUTOCOMMIT);
    echo '&lt;br/&gt;';
    echo 'PDO默认的错误处理模式：'.$pdo-&gt;getAttribute(PDO::ATTR_ERRMODE);
    $pdo-&gt;setAttribute(PDO::ATTR_AUTOCOMMIT, 0);
    echo '&lt;br/&gt;';
    echo '自动提交：'.$pdo-&gt;getAttribute(PDO::ATTR_AUTOCOMMIT);
}catch(PDOException $e){
    echo $e-&gt;getMessage();
}
</code></pre>

<p>获取常用属性 并不是所有环境都支持一下的属性
<code>php
&lt;?php
header('content-type:text/html;charset=utf-8');
try{
    $dsn='mysql:host=localhost;dbname=test';
    $username='root';
    $passwd='root';
    $pdo=new PDO($dsn, $username, $passwd);
    $attrArr=array(
        'AUTOCOMMIT','ERRMODE','CASE','PERSISTENT','TIMEOUT','ORACLE_NULLS',
            'SERVER_INFO','SERVER_VERSION','CLIENT_VERSION','CONNECTION_STATUS'
    );
    foreach($attrArr as $attr){
        echo "PDO::ATTR_$attr: ";
        echo $pdo-&gt;getAttribute(constant("PDO::ATTR_$attr")),'&lt;br/&gt;';
    }
}catch(PDOException $e){
    echo $e-&gt;getMessage();
}
</code></p>

<h1>PDO setAttribute</h1>

<blockquote><p>设置数据库连接属性</p></blockquote>

<pre><code class="php">&lt;?php 
header('content-type:text/html;charset=utf-8');
try{
    $dsn='mysql:host=localhost;dbname=test';
    $username='root';
    $passwd='root';
    $options=array(PDO::ATTR_AUTOCOMMIT=&gt;0,PDO::ATTR_ERRMODE=&gt;PDO::ERRMODE_EXCEPTION);
    $pdo=new PDO($dsn, $username, $passwd, $options);
    echo $pdo-&gt;getAttribute(PDO::ATTR_AUTOCOMMIT);
    echo '&lt;br/&gt;';
    echo $pdo-&gt;getAttribute(PDO::ATTR_ERRMODE);
}catch(PDOException $e){
    echo $e-&gt;getMessage();
}
</code></pre>

<h1>PDOStatement 对象的使用</h1>

<p><strong>quote防注入</strong>
<code>html login.php
 &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;form action='doAction2.php' method='post'&gt;
用户名：&lt;input type='text' name='username' /&gt;&lt;br/&gt;
密码：&lt;input type='password' name='password'/&gt;&lt;br/&gt;
&lt;input type='submit' value='登陆'/&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code>
<code>php  doAction2.php
&lt;?php
&lt;?php
header('content-type:text/html;charset=utf-8');
$username=$_POST['username'];
$password=$_POST['password'];
try{
    $pdo=new PDO('mysql:host=localhost;dbname=test','root','root');
    //echo $pdo-&gt;quote($username);
    //$sql="select * from user where username='{$username}' and password='{$password}'";
    //echo $sql;
    //通过quote():返回带引号的字符串，过滤字符串中的特殊字符
    $username=$pdo-&gt;quote($username);
    $sql="select * from user where username={$username} and password='{$password}'";
    echo $sql;
    $stmt=$pdo-&gt;query($sql);
    //PDOStatement对象的方法：rouCount()：对于select操作返回的结果集中记录的条数，
    //对于INSERT、UPDATE、DELETE返回受影响的记录的条数
    echo $stmt-&gt;rowCount();
}catch(PDOException $e){
    echo $e-&gt;getMessage();
}
</code>
<strong>预处理语句的占位符</strong>
第一种用：xxx
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="nb">header</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">content</span><span class="o">-</span><span class="nx">type</span><span class="o">:</span><span class="nx">text</span><span class="o">/</span><span class="nx">html</span><span class="p">;</span><span class="nx">charset</span><span class="o">=</span><span class="nx">utf</span><span class="o">-</span><span class="mi">8</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="nv">$username</span><span class="o">=</span><span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">POST</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">username</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;];</span>
</span><span class='line'><span class="nv">$password</span><span class="o">=</span><span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">POST</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">password</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;];</span>
</span><span class='line'><span class="k">try</span><span class="p">{</span>
</span><span class='line'>    <span class="nv">$pdo</span><span class="o">=</span><span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">mysql</span><span class="o">:</span><span class="nx">host</span><span class="o">=</span><span class="nx">localhost</span><span class="p">;</span><span class="nx">dbname</span><span class="o">=</span><span class="nx">test</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">root</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">root</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'>    <span class="nv">$sql</span><span class="o">=&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">select</span> <span class="o">*</span> <span class="nx">from</span> <span class="nx">user</span> <span class="nx">where</span> <span class="nx">username</span><span class="o">=:</span><span class="nx">username</span> <span class="k">and</span> <span class="nx">password</span><span class="o">=:</span><span class="nx">password</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span> <span class="c1">//占位</span>
</span><span class='line'>    <span class="nv">$stmt</span><span class="o">=</span><span class="nv">$pdo</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">:</span><span class="nx">username</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">=&gt;</span><span class="nv">$username</span><span class="p">,</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">:</span><span class="nx">password</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">=&gt;</span><span class="nv">$password</span><span class="p">));</span><span class="nx">赋值</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">rowCount</span><span class="p">();</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">PDOException</span> <span class="nv">$e</span><span class="p">){</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">第二种用？</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">php</span>
</span><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="nb">header</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">content</span><span class="o">-</span><span class="nx">type</span><span class="o">:</span><span class="nx">text</span><span class="o">/</span><span class="nx">html</span><span class="p">;</span><span class="nx">charset</span><span class="o">=</span><span class="nx">utf</span><span class="o">-</span><span class="mi">8</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="nv">$username</span><span class="o">=</span><span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">POST</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">username</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;];</span>
</span><span class='line'><span class="nv">$password</span><span class="o">=</span><span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">POST</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">password</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;];</span>
</span><span class='line'><span class="k">try</span><span class="p">{</span>
</span><span class='line'>    <span class="nv">$pdo</span><span class="o">=</span><span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">mysql</span><span class="o">:</span><span class="nx">host</span><span class="o">=</span><span class="nx">localhost</span><span class="p">;</span><span class="nx">dbname</span><span class="o">=</span><span class="nx">test</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">root</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">root</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'>    <span class="nv">$sql</span><span class="o">=&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">select</span> <span class="o">*</span> <span class="nx">from</span> <span class="nx">user</span> <span class="nx">where</span> <span class="nx">username</span><span class="o">=?</span> <span class="k">and</span> <span class="nx">password</span><span class="o">=?&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$stmt</span><span class="o">=</span><span class="nv">$pdo</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span><span class="nv">$password</span><span class="p">));</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">rowCount</span><span class="p">();</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">PDOException</span> <span class="nv">$e</span><span class="p">){</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;**</span><span class="nx">bindParam</span><span class="p">()</span><span class="nx">方法绑定参数到变量</span><span class="o">**</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="nb">header</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">content</span><span class="o">-</span><span class="nx">type</span><span class="o">:</span><span class="nx">text</span><span class="o">/</span><span class="nx">html</span><span class="p">;</span><span class="nx">charset</span><span class="o">=</span><span class="nx">utf</span><span class="o">-</span><span class="mi">8</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="k">try</span><span class="p">{</span>
</span><span class='line'>    <span class="nv">$pdo</span><span class="o">=</span><span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">mysql</span><span class="o">:</span><span class="nx">host</span><span class="o">=</span><span class="nx">localhost</span><span class="p">;</span><span class="nx">dbname</span><span class="o">=</span><span class="nx">test</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">root</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">root</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'>    <span class="nv">$sql</span><span class="o">=&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">INSERT</span> <span class="nx">user</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span><span class="nx">password</span><span class="p">,</span><span class="nx">email</span><span class="p">)</span> <span class="nx">VALUES</span><span class="p">(</span><span class="o">:</span><span class="nx">username</span><span class="p">,</span><span class="o">:</span><span class="nx">password</span><span class="p">,</span><span class="o">:</span><span class="nx">email</span><span class="p">)</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$stmt</span><span class="o">=</span><span class="nv">$pdo</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">bindParam</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">:</span><span class="nx">username</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span><span class="nv">$username</span><span class="p">,</span><span class="nx">PDO</span><span class="o">::</span><span class="na">PARAM_STR</span><span class="p">);</span><span class="c1">//绑定参数，被绑定的项，绑定的地址（不能直接写值），参数类型。如果是用的？第一个参数要写1,2,3。表示第几个占位符</span>
</span><span class='line'>    <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">bindParam</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">:</span><span class="nx">password</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span><span class="nv">$password</span><span class="p">,</span><span class="nx">PDO</span><span class="o">::</span><span class="na">PARAM_STR</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">bindParam</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">:</span><span class="nx">email</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span><span class="nv">$email</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$username</span><span class="o">=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">imooc1</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$password</span><span class="o">=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">imooc1</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$email</span><span class="o">=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;&amp;#x6d;&amp;#97;&amp;#105;&amp;#108;&amp;#x74;&amp;#111;&amp;#58;&amp;#x69;&amp;#x6d;&amp;#111;&amp;#111;&amp;#x63;&amp;#x31;&amp;#64;&amp;#105;&amp;#109;&amp;#x6f;&amp;#x6f;&amp;#99;&amp;#46;&amp;#99;&amp;#111;&amp;#x6d;&quot;</span><span class="o">&gt;&amp;</span><span class="c1">#105;&amp;#x6d;&amp;#111;&amp;#x6f;&amp;#99;&amp;#x31;&amp;#64;&amp;#105;&amp;#x6d;&amp;#111;&amp;#x6f;&amp;#x63;&amp;#46;&amp;#x63;&amp;#111;&amp;#109;&lt;/a&gt;&amp;rsquo;;</span>
</span><span class='line'>    <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$username</span><span class="o">=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">MR</span><span class="o">.</span><span class="nx">KING1</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$password</span><span class="o">=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">MR</span><span class="o">.</span><span class="nx">KING1</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$email</span><span class="o">=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;&amp;#109;&amp;#97;&amp;#x69;&amp;#x6c;&amp;#x74;&amp;#111;&amp;#58;&amp;#77;&amp;#82;&amp;#x2e;&amp;#x4b;&amp;#73;&amp;#x4e;&amp;#71;&amp;#x31;&amp;#64;&amp;#x69;&amp;#109;&amp;#111;&amp;#x6f;&amp;#99;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#x6d;&quot;</span><span class="o">&gt;&amp;</span><span class="c1">#x4d;&amp;#x52;&amp;#46;&amp;#x4b;&amp;#73;&amp;#x4e;&amp;#x47;&amp;#49;&amp;#x40;&amp;#105;&amp;#x6d;&amp;#111;&amp;#111;&amp;#99;&amp;#x2e;&amp;#99;&amp;#x6f;&amp;#109;&lt;/a&gt;&amp;rsquo;;</span>
</span><span class='line'>    <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">rowCount</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">PDOException</span> <span class="nv">$e</span><span class="p">){</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">**</span><span class="nx">PDO错误处理模式</span><span class="o">**</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">php</span>
</span><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="o">/&lt;</span><span class="nx">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="nx">PDO</span><span class="o">::</span><span class="na">ERRMODE_SLIENT</span><span class="o">:</span><span class="nx">默认模式，静默模式</span>
</span><span class='line'> <span class="nx">PDO</span><span class="o">::</span><span class="na">ERRMODE_WARNING</span><span class="o">:</span><span class="nx">警告模式</span>
</span><span class='line'> <span class="nx">PDO</span><span class="o">::</span><span class="na">ERRMODE_EXCEPTION</span><span class="o">:</span><span class="nx">异常模式</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">try</span><span class="p">{</span>
</span><span class='line'>    <span class="nv">$pdo</span><span class="o">=</span><span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">mysql</span><span class="o">:</span><span class="nx">host</span><span class="o">=</span><span class="nx">localhost</span><span class="p">;</span><span class="nx">dbname</span><span class="o">=</span><span class="nx">test</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">root</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">root</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'>    <span class="nv">$pdo</span><span class="o">-&gt;</span><span class="na">setAttribute</span><span class="p">(</span><span class="nx">PDO</span><span class="o">::</span><span class="na">ATTR_ERRMODE</span><span class="p">,</span> <span class="nx">PDO</span><span class="o">::</span><span class="na">ERRMODE_EXCEPTION</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$sql</span><span class="o">=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">noneTable</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$pdo</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$pdo</span><span class="o">-&gt;</span><span class="na">errorCode</span><span class="p">();</span>
</span><span class='line'>    <span class="k">echo</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nb">print_r</span><span class="p">(</span><span class="nv">$pdo</span><span class="o">-&gt;</span><span class="na">errorInfo</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">PDOException</span> <span class="nv">$e</span><span class="p">){</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">!</span><span class="p">[](</span><span class="nx">http</span><span class="o">://</span><span class="nx">d</span><span class="o">.</span><span class="nx">picphotos</span><span class="o">.</span><span class="nx">baidu</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">album</span><span class="o">/</span><span class="nx">s</span><span class="o">%</span><span class="mi">3</span><span class="nx">D550</span><span class="o">%</span><span class="mi">3</span><span class="nx">Bq</span><span class="o">%</span><span class="mi">3</span><span class="nx">D90</span><span class="o">%</span><span class="mi">3</span><span class="nx">Bc</span><span class="o">%</span><span class="mi">3</span><span class="nx">Dxiangce</span><span class="o">%</span><span class="mi">2</span><span class="nx">C100</span><span class="o">%</span><span class="mi">2</span><span class="nx">C100</span><span class="o">/</span><span class="nx">sign</span><span class="o">=</span><span class="nx">d28d1e1ad02a60595610e11f180f45a6</span><span class="o">/</span><span class="nx">d8f9d72a6059252d57a8efd7339b033b5ab5b9a2</span><span class="o">.</span><span class="nx">jpg</span><span class="o">?</span><span class="nx">referer</span><span class="o">=</span><span class="nx">c8b46b4c29dda3cc52f38c100760</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="nx">x</span><span class="o">=.</span><span class="nx">jpg</span><span class="p">)</span>
</span><span class='line'><span class="o">**</span><span class="nx">PDO事务处理模式</span><span class="o">**</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">php</span>
</span><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="nb">header</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">content</span><span class="o">-</span><span class="nx">type</span><span class="o">:</span><span class="nx">text</span><span class="o">/</span><span class="nx">html</span><span class="p">;</span><span class="nx">charset</span><span class="o">=</span><span class="nx">utf</span><span class="o">-</span><span class="mi">8</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="k">try</span><span class="p">{</span>
</span><span class='line'>    <span class="nv">$dsn</span><span class="o">=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">mysql</span><span class="o">:</span><span class="nx">host</span><span class="o">=</span><span class="nx">localhost</span><span class="p">;</span><span class="nx">dbname</span><span class="o">=</span><span class="nx">test</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$username</span><span class="o">=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">root</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$passwd</span><span class="o">=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">root</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$options</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="nx">PDO</span><span class="o">::</span><span class="na">ATTR_AUTOCOMMIT</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$pdo</span><span class="o">=</span><span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="nv">$dsn</span><span class="p">,</span> <span class="nv">$username</span><span class="p">,</span> <span class="nv">$passwd</span><span class="p">,</span> <span class="nv">$options</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$pdo</span><span class="o">-&gt;</span><span class="na">inTransaction</span><span class="p">());</span>
</span><span class='line'>    <span class="c1">//开启事务</span>
</span><span class='line'>    <span class="nv">$pdo</span><span class="o">-&gt;</span><span class="na">beginTransaction</span><span class="p">();</span>
</span><span class='line'>    <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$pdo</span><span class="o">-&gt;</span><span class="na">inTransaction</span><span class="p">());</span>
</span><span class='line'>    <span class="c1">//$sql=&amp;lsquo;UPDATE userAccount SET money=money-2000 WHERE username=&amp;ldquo;imooc&amp;rdquo;&amp;rsquo;;</span>
</span><span class='line'>    <span class="nv">$sql</span><span class="o">=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">UPDATE</span> <span class="nx">userAccount</span> <span class="nx">SET</span> <span class="nx">money</span><span class="o">=</span><span class="nx">money</span><span class="o">-</span><span class="mi">2000</span> <span class="nx">WHERE</span> <span class="nx">username</span><span class="o">=&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">imooc</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$res1</span><span class="o">=</span><span class="nv">$pdo</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nb">exec</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$res1</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nx">PDOException</span><span class="p">(</span><span class="s1">&#39;imooc 转账失败&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$res2</span><span class="o">=</span><span class="nv">$pdo</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nb">exec</span><span class="p">(</span><span class="s1">&#39;UPDATE userAccount SET money=money+2000 WHERE username=&quot;king1&quot;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$res2</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nx">PDOException</span><span class="p">(</span><span class="s1">&#39;king 接收失败&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//提交事务</span>
</span><span class='line'><span class="nv">$pdo</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">commit</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">PDOException</span> <span class="nv">$e</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">//回滚事务</span>
</span><span class='line'>    <span class="nv">$pdo</span><span class="o">-&gt;</span><span class="na">rollBack</span><span class="p">();</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1>PDO操作类封装</h1>

<pre><code class="php">&lt;?php
    /**
     *
     */
    class PdoMySQL
    {
        public static $config=array();//设置链接参数，配置信息
        public static $link=null;//保存链接标识符
        public static $pconnect=false;//是否开启长链接
        public static $dbVersion=null;//保存数据库版本
        public static $connected=false;//是否链接成共
        public static $PDOStatement=null;//保存ＰＤＯStatement对象
        public static $queryStr = null;//保存最后执行的操作
        public static $error=null;//保存错误信息
        public static $lastInsertId=null;//最后插入记录的id
        public static $numRows=0;//保存上一步影响的行数
        function __construct($dbConfig='')
        {
            if(!class_exists("PDO")){
                self::throw_excption("不支持ＰＤＯ，请先开启");
            }
            if(!is_array($dbConfig)){
                $dbConfig=array(
                    "hostname" =&gt; DB_HOST,
                    "username" =&gt; DB_USER,
                    "password" =&gt; DB_PWD,
                    "database" =&gt; DB_NAME,
                    "hostport" =&gt; DB_PORT,
                    "dbms"     =&gt; DB_TYPE,
                    "dsn" =&gt;DB_TYPE.":host=".DB_HOST.";dbname=".DB_NAME
                );
            }
            if(empty($dbConfig['hostname']))self::throw_excption("没有定义数据库配置，请先定义。");
            self::$config=$dbConfig;
            if(empty(self::$config['params']))self::$config['params']=array();
            if(!isset(self::$link)){
                $configs=self::$config;
                if(self::$pconnect){
                    //开启长链接，添加到配置数组中
                    $configs['params'][constant("PDO::ATTR_PERSISTENT")]=true;
                }
                try {
                    self::$link=new PDO($configs['dsn'],$configs['username'],$configs['password'],$configs['params']);
                } catch (PDOException $e) {
                    self::throw_excption($e-&gt;getMessage());
                }
                if(!self::$link){
                    self::throw_excption("PDO链接错误");
                    return false;
                }
                self::$link-&gt;exec('SET NAMES'.DB_CHARSET);
                self::$dbVersion=self::$link-&gt;getAttribute(constant("PDO::ATTR_SERVER_VERSION"));
                self::$connected=true;
                unset($configs);
            }
        }
        /**
         * 得到所有记录
         * @param  [type] $sql [description]
         * @return [type]      [description]
         */
         public static function getAll($sql=null)
        {
            if($sql!=null){
                self::query($sql);
            }
            $result=self::$PDOStatement-&gt;fetchAll(constant("PDO::FETCH_ASSOC"));
            return $result;
        }
        /**
         * 得到结果集中的一条记录
         * @param  [type] $sql [description]
         * @return [type]      [description]
         */
        public static function getRow($sql=null)
        {
            if($sql!=null){
                self::query($sql);
            }
            $result =self::$PDOStatement-&gt;fetch(constant("PDO::FETCH_ASSOC"));
            return $result;
        }
        /**
         * 解析字段
         * @param  [type] $fields [description]
         * @return [type]         [description]
         */
        public  static function parseFields($fields)
        {
            if(is_array($fields)){
                    array_walk($fields,array('PdoMySQL','addSpecilChar'));
                    $fieldsStr=implode(',',$fields);
            }elseif (is_string($fields)&amp;&amp;!empty($fields)) {
                if(strpos($fields,'`')===false){
                    $fields=explode(',',$fields);
                    array_walk($fields,array('PdoMySQL','addSpecilChar'));
                    $fieldsStr=implode(',',$fields);
                }else {
                    $fieldsStr=$fields;
                }
            }else {
                $fieldsStr='*';
            }
            return $fieldsStr;
        }
        /**
         * 通过反引号引用字段，
         * @param [type] $value [description]
         */
        public static function addSpecilChar(&amp;$value)
        {
            if($value==='*'||strpos($value,'.')!==false||strpos($value,'`')!==false){
                //不用做处理
            }elseif (strpos($value,'`')===false) {
                # code...
                $value='`'.trim($value).'`';
            }
            return $value;
        }
        /**
         * 根据主键查记录
         * @param  [type] $tabName [description]
         * @param  [type] $priId   [description]
         * @param  string $fields  [description]
         * @return [type]          [description]
         */
        public  static function findById($tabName,$priId,$fields='*')
        {
            $sql="SELECT %s FROM %s WHERE id =%d";
            return self::getRow(sprintf($sql,self::parseFields($fields),$tabName,$priId));
        }
        /**
         * 执行普通查询，
         * @param  [type] $tables [description]
         * @param  [type] $where  [description]
         * @param  string $fields [description]
         * @param  [type] $group  [description]
         * @param  [type] $having [description]
         * @param  [type] $order  [description]
         * @param  [type] $limit  [description]
         * @return [type]         [description]
         */
        public static function find($tables,$where=null,$fields='*',$group=null,$having=null,$order=null,$limit=null)
        {
            $sql='SELECT '.self::parseFields($fields).' FROM '.$tables.self::parseWhere($where).self::parseGroup($group).self::parseHaving($having).self::parseOrder($order).self::parseLimit($limit);
            $dataAll=self::getAll($sql);
            // if(count($dataAll)==1){
            //     $rlt=$dataAll[0];
            // }else {
            //     $rlt=$dataAll;
            // }
            // return $rlt;
            return count($dataAll)==1?$dataAll[0]:$dataAll;
        }
        /**
         * 添加记录
         * array(
         *
         * )
         * @param string $value [description]
         */
        public static function add($data,$table)
        {
            $keys=array_keys($data);
            array_walk($keys,array('PdoMySQL','addSpecilChar'));
            $fieldsStr=join(',',$keys);
            $values="'".join("','",array_values($data))."'";
            $sql="INSERT {$table}({$fieldsStr}) VALUES({$values})";
            return self::execute($sql);
        }
        /**
         * 更新记录
         * @param  [array] $data  [description]
         * @param  [string] $table [description]
         * @param  [string] $where [description]
         * @param  [string] $order [description]
         * @param  [string] $limit [description]
         * @return [type]        [description]
         */
        public  static function update($data,$table,$where=null,$order=null,$limit=null)
        {
            foreach ($data as $key =&gt; $value) {
                $set.=$key."='".$value."',";
            }
            $sets=rtrim($sets,',');
            $sql="UPDATE {$table} SET {$sets} ".self::parseWhere($where).self::parseOrder($order).self::parseLimit($limit);
             return self::execute($sql);
        }
        /**
         * 删除记录
         * @param  [type]  $table [description]
         * @param  [type]  $where [description]
         * @param  [type]  $order [description]
         * @param  integer $limit [description]
         * @return [type]         [description]
         */
        public static function delete($table,$where=null,$order=null,$limit=0)
        {
            $sql="delete from {$table} " .self::parseWhere($where).self::parseOrder($order).self::parseLimit($limit);
            return self::execute($sql);
        }
        /**
         * 得到最后执行的ＳＱＬ语句
         * @return [type] [description]
         */
        public static function getLastSql()
        {
            $link=self::$link;
            if(!$link){
                return false;
            }
            return self::$queryStr;
        }
        /**
         * 得到上一步插入操作的ＩＤ
         */
        public static function getLsetInsertId()
        {
            $link=self::$link;
            if(!$link)return false;
            return self::$lastInsertId;
        }
        /**
         * 得到数据库版本
         */
        public static function getDbVersion()
        {
            $link=self::$link;
            if(!$link)return false;
            return self::$dbVersion;
        }
        /**
         * 得到数据库有哪些表
         * @return [type] [description]
         */
        public  static function showTables()
        {
            $tables=array();
            if(self::query('SHOW TABLES')){
                $result = self::getAll();
                foreach ($result as $key =&gt; $value) {
                    # code...
                    $tables[$key]=current($value);
                }
            }
            return $tables;
        }
        /**
         * 解析ｗｈｅｒｅ条件
         * @param  [type] $where [description]
         * @return [type]        [description]
         */
        public static function parseWhere($where)
        {
            $whereStr='';
            if(is_string($where)&amp;&amp;!empty($where)){
                $whereStr=$where;
            }
            return empty($whereStr)?'':' WHERE '.$whereStr;
        }
        /**
         * 解析分组
         * @param  [type] $group [description]
         * @return [type]        [description]
         */
        public static function parseGroup($group)
        {
            $groupStr='';
            if(is_array($group)){
                $groupStr.=' GROUP BY '.implode(',',$group);
            }elseif (is_string($group)&amp;&amp;!empty($group)) {
                $groupStr.=' GROUP BY '.$group;
            }
            return empty($groupStr)?'':$groupStr;
        }
        /**
         * 对分组结果通过Ｈａｖｉｎｇ子句进行二次删选
         * @param  [type] $having [description]
         * @return [type]         [description]
         */
        public static function parseHaving($having)
        {
            $havingStr='';
            if(is_string($having)&amp;&amp;!empty($having)){
                $havingStr.=' HAVING '.$having;
            }
            return $havingStr;
        }
        /**
         * 解析order by
         * @param  [type] $order [description]
         * @return [type]        [description]
         */
        public  static function parseOrder($order)
        {
            $orderStr='';
            if(is_array($order)){
                $orderStr.=' ORDER BY '.join(',',$order);
            }elseif (is_string($order)&amp;&amp;!empty($order)) {
                $orderStr.=' ORDER BY '.$order;
                # code...
            }
            return $orderStr;
        }
        /**
         * 解析限制条数
         * ｌｉｍｉｔ 3
         * ｌｉｍｉｔ 0,3
         * @param  [type] $limit [description]
         * @return [type]        [description]
         */
        public  static function parseLimit($limit)
        {
            $limitStr='';
            if(is_array($limit)){
                if(count($limit)&gt;1){
                    $limitStr.=' LIMIT '.$limit[0].','.$limit[1];
                }else {
                    $limitStr.=' LIMIT '.$limit[0];
                }
            }elseif (is_string($limit)&amp;&amp;!empty($limit)) {
                $limitStr.=' LIMIT '.$limit;
            }
            return $limitStr;
        }
        /**
         * 执行增删改，返回受影响的条数
         * @param  [type] $sql [description]
         * @return [type]      [description]
         */
        public static function execute($sql=null)
        {
            $link=self::$link;
            if(!$link) return false;
            self::$queryStr=$sql;
            if(!empty(self::$PDOStatement))self::free();
            $result=$link-&gt;exec(self::$queryStr);
            self::haveErrorThrowException();
            if($result){
                self::$lastInsertId=$link-&gt;lastInsertId();
                self::$numRows=$result;;
                return self::$numRows;
            }else {
                return false;
            }
        }
        /**
         *释放结果集
         * @return [type] [description]
         */
        public  static function free()
        {
            self::$PDOStatement=null;
        }
        /**
         * 执行ｓｑｌ语句
         * @param  string $sql [description]
         * @return [type]      [description]
         */
        public static function query($sql='')
        {
            $link=self::$link;
            if(!$link)return false;
            //判断之前是否有结果集，如果有的话，释放结果集
            if(!empty(self::$link)) self::free();
            self::$queryStr=$sql;
            self::$PDOStatement=$link-&gt;prepare(self::$queryStr);
            $res = self::$PDOStatement-&gt;execute();
            self::haveErrorThrowException();
            return $res;
        }
        /**
         * 如果有错误，抛出
         * @return [type] [description]
         */
        public static function haveErrorThrowException()
        {
            $obj=empty(self::$PDOStatement)?self::$link:self::$PDOStatement;
            $arrError=$obj-&gt;errorInfo();
            // print_r($arrError);
            if($arrError[0]!='00000'){
                self::$error="SQLSTATE".$arrError[0]."SQL Error".$arrError[2]."&lt;br/&gt;Error SQL".self::$queryStr;
                self::throw_excption(self::$error);
                return false;
            }
            if(self::$queryStr==""){
                self::throw_excption('没有执行的ＳＱＬ语句');
                return false;
            }
        }
        /**
         * 自定义错误处理
         * @param  [type] $errMsg [description]
         * @return [type]         [description]
         */
        public function throw_excption($errMsg)
        {
            echo "&lt;div style='width:80%;background-color:#ABCDEF;colod:black;font-size:20px;padding:20px 0px;'&gt;
            ".$errMsg."
            &lt;/div&gt;";
        }
        /**
         * 销毁链接对象，关闭数据库。
         * @return [type] [description]
         */
        public static function close()
        {
            self::$link=null;
        }

    }
require_once"config.php";
// $PdoMySQL=new PdoMySQL;
// // var_dump($PdoMySQL);
// // $sql="insert user (username,password,email) values('reane23','sdf','sdf')";
// $tables='user';
// $res=$PdoMySQL-&gt;find($tables,'id&gt;=19','*',null,null,null,'3');
// var_dump($res);
// echo $PdoMySQL::$lastInsertId;
// print_r($res);
</code></pre>

<pre><code class="php config.php">&lt;?php
define("DB_HOST","localhost");
define("DB_USER","root");
define("DB_PWD","123456");
define("DB_NAME","test");
define("DB_PORT","3306");
define("DB_TYPE","mysql");
define("DB_CHARSET","utf8");
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux-MYSQL-常用命令]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/28/linux-mysql-code/"/>
    <updated>2016-04-28T01:24:16+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/28/linux-mysql-code</id>
    <content type="html"><![CDATA[<blockquote><p>Linux 下Mysql 常用命令总结</p></blockquote>

<!--more-->


<h1>一、linux下mysql的基本命令：</h1>

<pre><code>1. linux下启动mysql的命令：
mysqladmin start
/ect/init.d/mysql start (前面为mysql的安装路径)
/usr/local/mysql/bin/mysqld_safe --user=mysql &amp;      启动
2. linux下重启mysql的命令：
mysqladmin restart
/ect/init.d/mysql restart (前面为mysql的安装路径)
3. linux下关闭mysql的命令：
mysqladmin shutdown
/ect/init.d/mysql shutdown (前面为mysql的安装路径)

4. 连接本机上的mysql：
进入目录mysql\bin，再键入命令mysql -uroot -p， 回车后提示输入密码。
退出mysql命令：exit（回车）

5. 修改mysql密码：
mysqladmin -u用户名 -p旧密码 password 新密码
或进入mysql命令行SET PASSWORD FOR root=PASSWORD("root");

6. 增加新用户。（注意：mysql环境中的命令后面都带一个分号作为命令结束符）
grant select on 数据库.* to 用户名@登录主机 identified by "密码"
如增加一个用户test密码为123，让他可以在任何主机上登录， 并对所有数据库有查询、插入、修改、删除的权限。首先用以root用户连入mysql，然后键入以下命令：
grant select,insert,update,delete on *.* to " Identified by "123";
</code></pre>

<h1>二、有关mysql数据库方面的操作</h1>

<blockquote><p>必须首先登录到mysql中，有关操作都是在mysql的提示符下进行，而且每个命令以分号结束</p></blockquote>

<pre><code>1. 显示数据库列表。
    show databases;
2. 显示库中的数据表：
    use mysql； ／／打开库
    show tables;
3. 显示数据表的结构：
    describe 表名;
4. 建库：
    create database 库名;

    GBK: create database test2 DEFAULT CHARACTER SET gbk COLLATE gbk_chinese_ci;
    UTF8: CREATE DATABASE `test2` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
5. 建表：
    use 库名；
    create table 表名(字段设定列表)；
6. 删库和删表:
    drop database 库名;
    drop table 表名；
7. 将表中记录清空：
    delete from 表名;
    truncate table  表名;
8. 显示表中的记录：
    select * from 表名;
9. 编码的修改
    如果要改变整个mysql的编码格式：  
    启动mysql的时候，mysqld_safe命令行加入  
    --default-character-set=gbk 
    如果要改变某个库的编码格式：在mysql提示符后输入命令  
    alter database db_name default character set gbk;

10. 重命名表
    alter table t1 rename t2;
11. 查看sql语句的效率
    explain &lt; table_name &gt;
    例如：explain select * from t3 where id=3952602;
12. 用文本方式将数据装入数据库表中(例如D:/mysql.txt)

    mysql&gt; LOAD DATA LOCAL INFILE "D:/mysql.txt" INTO TABLE MYTABLE;
</code></pre>

<h1>三、数据的导入导出(1)</h1>

<pre><code>1. 文本数据转到数据库中
    文本数据应符合的格式：字段数据之间用tab键隔开，null值用来代替。
    例：1 name duty 2006-11-23
    数据传入命令 load data local infile "文件名" into table 表名;

2. 导出数据库和表
    mysqldump --opt news &gt; news.sql（将数据库news中的所有表备份到news.sql文件，news.sql是一个文本文件，文件名任取。）
    mysqldump --opt news author article &gt; author.article.sql（将数据库news中的author表和article表备份到author.article.sql文件， author.article.sql是一个文本文件，文件名任取。）
    mysqldump --databases db1 db2 &gt; news.sql（将数据库dbl和db2备份到news.sql文件，news.sql是一个文本文件，文件名任取。）
    mysqldump -h host -u user -p pass --databases dbname &gt; file.dump
    就是把host上的以名字user，口令pass的数据库dbname导入到文件file.dump中
    mysqldump --all-databases &gt; all-databases.sql（将所有数据库备份到all-databases.sql文件，all-databases.sql是一个文本文件，文件名任取。）

3. 导入数据
    mysql &lt; all-databases.sql（导入数据库）
    mysql&gt;source news.sql;（在mysql命令下执行，可导入表）
</code></pre>

<h1>四、数据的导入导出(2)</h1>

<pre><code>一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：
    1、导出数据和表结构：
    mysqldump -u用户名 -p密码 数据库名 &gt; 数据库名.sql
    #/usr/local/mysql/bin/   mysqldump -uroot -p abc &gt; abc.sql
</code></pre>

<p>敲回车后会提示输入密码</p>

<pre><code>    2、只导出表结构
    mysqldump -u用户名 -p密码 -d 数据库名 &gt; 数据库名.sql
    #/usr/local/mysql/bin/   mysqldump -uroot -p -d abc &gt; abc.sql
</code></pre>

<p>注：/usr/local/mysql/bin/  &mdash;>  mysql的data目录</p>

<pre><code>二、导入数据库
    1、首先建空数据库
    mysql&gt;create database abc;

    2、导入数据库
    方法一：
        （1）选择数据库
        mysql&gt;use abc;
        （2）设置数据库编码
        mysql&gt;set names utf8;
        （3）导入数据（注意sql文件的路径）
        mysql&gt;source /home/abc/abc.sql;
    方法二：
        mysql -u用户名 -p密码 数据库名 &lt; 数据库名.sql
        #mysql -uabc_f -p abc &lt; abc.sql

        建议使用第二种方法导入。
</code></pre>

<p>注意：有命令行模式，有sql命令</p>

<h1>五、常用操作</h1>

<h2>连接MySQL</h2>

<pre><code>格式： mysql -h主机地址 -u用户名 －p用户密码

1、例1：连接到本机上的MYSQL。

首先在打开DOS窗口，然后进入目录 mysqlbin，再键入命令mysql -uroot -p，
回车后提示你输密码，如果刚安装好MYSQL，超级用户root是没有密码的，
故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql&gt;。

2、例2：连接到远程主机上的MYSQL。假设远程主机的IP为：110.110.110.110，
用户名为root,密码为abcd123。则键入以下命令：

mysql -h110.110.110.110 -uroot -pabcd123

（注:u与root可以不用加空格，其它也一样）

3、退出MYSQL命令： exit （回车）。
</code></pre>

<h2>修改密码</h2>

<pre><code>格式：mysqladmin -u用户名 -p旧密码 password 新密码

1、例1：给root加个密码ab12。首先在DOS下进入目录mysqlbin，然后键入以下命令：

mysqladmin -uroot -password ab12

注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。

2、例2：再将root的密码改为djg345。

mysqladmin -uroot -pab12 password djg345
</code></pre>

<h2>增加新用户。</h2>

<blockquote><p>（注意：和上面不同，下面的因为是MySQL环境中的命令，所以后面都带一个分号作为命令结束符）</p></blockquote>

<pre><code>格式：grant select on 数据库.* to 用户名@登录主机 identified by \"密码\"

例1、增加一个用户test1密码为abc，让他可以在任何主机上登录，
并对所有数据库有查询、插入、修改、删除的权限。首先用以root用户连入MySQL，然后键入以下命令：
grant select,insert,update,
delete on *.* to test1@\"%\" Identified by \"abc\";

但例1增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以
在internet上的任何一台电脑上登录你的MySQL数据库并对你的数据可以为所欲为了，
解决办法见例2。

例2、增加一个用户test2密码为abc,让他只可以在localhost上登录，
并可以对数据库mydb进行查询、插入、修改、删除的操作 
（localhost指本地主机，即MySQL数据库所在的那台主机），
这样用户即使用知道test2的密码，他也无法从internet上直接访问数据 库，
只能通过MySQL主机上的web页来访问。

grant select,insert,update,
delete on mydb.* to test2@localhost identified by \"abc\";

如果你不想test2有密码，可以再打一个命令将密码消掉。

grant select,insert,update,delete on mydb
.* to test2@localhost identified by \"\";
</code></pre>

<h2>整理</h2>

<pre><code>启动：net start mySql;
进入：mysql -u root -p/mysql -h localhost -u root -p databaseName;
列出数据库：show databases;
选择数据库：use databaseName;
列出表格：show tables；
显示表格列的属性：show columns from tableName；
建立数据库：source fileName.txt;
匹配字符：可以用通配符_代表任何一个字符，％代表任何字符串;
增加一个字段：alter table tabelName add column fieldName dateType;
增加多个字段：alter table tabelName add column fieldName1 dateType,add columns fieldName2 dateType;
多行命令输入:注意不能将单词断开;当插入或更改数据时，不能将字段的字符串展开到多行里，否则硬回车将被储存到数据中;
增加一个管理员帐户：grant all on *.* to user@localhost identified by "password";
每条语句输入完毕后要在末尾填加分号';'，或者填加'\g'也可以；
查询时间：select now();
查询当前用户：select user();
查询数据库版本：select version();
查询当前使用的数据库：select database();
</code></pre>

<p>1、删除student_course数据库中的students数据表：</p>

<pre><code>rm -f student_course/students.*
</code></pre>

<p>2、备份数据库：(将数据库test备份)</p>

<pre><code>mysqldump -u root -p test&gt;c:\test.txt
备份表格：(备份test数据库下的mytable表格)
mysqldump -u root -p test mytable&gt;c:\test.txt
将备份数据导入到数据库：(导回test数据库)
mysql -u root -p test
</code></pre>

<p>3、创建临时表：(建立临时表zengchao)</p>

<pre><code>create temporary table zengchao(name varchar(10));
</code></pre>

<p>4、创建表是先判断表是否存在</p>

<pre><code>create table if not exists students(……);
</code></pre>

<p>5、从已经有的表中复制表的结构</p>

<pre><code>create table table2 select * from table1 where 1&lt;&gt;1;
</code></pre>

<p>6、复制表</p>

<pre><code>create table table2 select * from table1;
</code></pre>

<p>7、对表重新命名</p>

<pre><code>alter table table1 rename as table2;
</code></pre>

<p>8、修改列的类型</p>

<pre><code>alter table table1 modify id int unsigned;//修改列id的类型为int unsigned
alter table table1 change id sid int unsigned;//修改列id的名字为sid，而且把属性修改为int unsigned
</code></pre>

<p>9、创建索引</p>

<pre><code>alter table table1 add index ind_id (id);
create index ind_id on table1 (id);
create unique index ind_id on table1 (id);//建立唯一性索引
</code></pre>

<p>10、删除索引</p>

<pre><code>drop index idx_id on table1;
alter table table1 drop index ind_id;
</code></pre>

<p>11、联合字符或者多个列(将列id与":&ldquo;和列name和&rdquo;=&ldquo;连接)</p>

<pre><code>select concat(id,':',name,'=') from students;
</code></pre>

<p>12、limit(选出10到20条)&lt;第一个记录集的编号是0></p>

<pre><code>select * from students order by id limit 9,10;
</code></pre>

<p>13、MySQL不支持的功能</p>

<pre><code>事务，视图，外键和引用完整性，存储过程和触发器
</code></pre>

<p>14、MySQL会使用索引的操作符号</p>

<pre><code>&lt;,&lt;=,&gt;=,&gt;,=,between,in,不带%或者_开头的like
</code></pre>

<p>15、使用索引的缺点</p>

<pre><code>1)减慢增删改数据的速度；
2）占用磁盘空间；
3）增加查询优化器的负担；
当查询优化器生成执行计划时，会考虑索引，太多的索引会给查询优化器增加工作量，导致无法选择最优的查询方案；
</code></pre>

<p>16、分析索引效率</p>

<pre><code>方法：在一般的SQL语句前加上explain；
分析结果的含义：
1）table：表名；
2）type：连接的类型，(ALL/Range/Ref)。其中ref是最理想的；
3）possible_keys：查询可以利用的索引名；
4）key：实际使用的索引；
5）key_len：索引中被使用部分的长度（字节）；
6）ref：显示列名字或者"const"（不明白什么意思）；
7）rows：显示MySQL认为在找到正确结果之前必须扫描的行数；
8）extra：MySQL的建议；
</code></pre>

<p>17、使用较短的定长列</p>

<pre><code>1）尽可能使用较短的数据类型；
2）尽可能使用定长数据类型；
a）用char代替varchar，固定长度的数据处理比变长的快些；
b）对于频繁修改的表，磁盘容易形成碎片，从而影响数据库的整体性能；
c）万一出现数据表崩溃，使用固定长度数据行的表更容易重新构造。使用固定长度的数据行，每个记录的开始位置都是固定记录长度的倍数，可以很容易被检测到，但是使用可变长度的数据行就不一定了；
d）对于MyISAM类型的数据表，虽然转换成固定长度的数据列可以提高性能，但是占据的空间也大；
</code></pre>

<p>18、使用not null和enum</p>

<pre><code>尽量将列定义为not null，这样可使数据的出来更快，所需的空间更少，而且在查询时，MySQL不需要检查是否存在特例，即null值，从而优化查询；
如果一列只含有有限数目的特定值，如性别，是否有效或者入学年份等，在这种情况下应该考虑将其转换为enum列的值，MySQL处理的更快，因为所有的enum值在系统内都是以标识数值来表示的；
</code></pre>

<p>19、使用optimize table</p>

<pre><code>对于经常修改的表，容易产生碎片，使在查询数据库时必须读取更多的磁盘块，降低查询性能。具有可变长的表都存在磁盘碎片问题，这个问题对blob数据类型更为突出，因为其尺寸变化非常大。可以通过使用optimize table来整理碎片，保证数据库性能不下降，优化那些受碎片影响的数据表。 optimize table可以用于MyISAM和BDB类型的数据表。实际上任何碎片整理方法都是用mysqldump来转存数据表，然后使用转存后的文件并重新建数据表；
</code></pre>

<p>20、使用procedure analyse()</p>

<pre><code>可以使用procedure analyse()显示最佳类型的建议，使用很简单，在select语句后面加上procedure analyse()就可以了；例如：
select * from students procedure analyse();
select * from students procedure analyse(16,256);
第二条语句要求procedure analyse()不要建议含有多于16个值，或者含有多于256字节的enum类型，如果没有限制，输出可能会很长；
</code></pre>

<p>21、使用查询缓存</p>

<pre><code>1）查询缓存的工作方式：
第一次执行某条select语句时，服务器记住该查询的文本内容和查询结果，存储在缓存中，下次碰到这个语句时，直接从缓存中返回结果；当更新数据表后，该数据表的任何缓存查询都变成无效的，并且会被丢弃。
2）配置缓存参数：
变量：query_cache _type，查询缓存的操作模式。有3中模式，0：不缓存；1：缓存查询，除非与 select sql_no_cache开头；2：根据需要只缓存那些以select sql_cache开头的查询； query_cache_size：设置查询缓存的最大结果集的大小，比这个值大的不会被缓存。
</code></pre>

<p>22、调整硬件</p>

<pre><code>1）在机器上装更多的内存；
2）增加更快的硬盘以减少I/O等待时间；
寻道时间是决定性能的主要因素，逐字地移动磁头是最慢的，一旦磁头定位，从磁道读则很快；
3）在不同的物理硬盘设备上重新分配磁盘活动；
如果可能，应将最繁忙的数据库存放在不同的物理设备上，这跟使用同一物理设备的不同分区是不同的，因为它们将争用相同的物理资源（磁头）。
</code></pre>

<h2>删除MySQL数据库</h2>

<p>1、创建数据库</p>

<pre><code>mysql&gt; create database drop_database;
Query OK, 1 row affected (0.00 sec)
</code></pre>

<p>2、删除一个已经确定存在的数据库</p>

<pre><code>mysql&gt; drop database drop_database;
Query OK, 0 rows affected (0.00 sec)
</code></pre>

<p>3、删除一个不确定存在的数据库</p>

<pre><code>mysql&gt; drop database drop_database;
ERROR 1008 (HY000): Can't drop database 'drop_database'; database doesn't exist
//发生错误，不能删除'drop_database'数据库，该数据库不存在。
mysql&gt; drop database if exists drop_database;
Query OK, 0 rows affected, 1 warning (0.00 sec)//产生一个警告说明此数据库不存在
mysql&gt; create database drop_database;
Query OK, 1 row affected (0.00 sec)
mysql&gt; drop database if exists drop_database;//if exists 判断数据库是否存在，不存在也不产生错误
Query OK, 0 rows affected (0.00 sec)
</code></pre>
]]></content>
  </entry>
  
</feed>
