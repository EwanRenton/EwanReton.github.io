<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Ewan Reton]]></title>
  <link href="http://ewanreton.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://ewanreton.github.io/"/>
  <updated>2016-04-30T01:46:43+08:00</updated>
  <id>http://ewanreton.github.io/</id>
  <author>
    <name><![CDATA[Ewan Reton]]></name>
    <email><![CDATA[liukedi001@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP高性能日志SeasLog]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/29/php-seaslog/"/>
    <updated>2016-04-29T09:59:55+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/29/php-seaslog</id>
    <content type="html"><![CDATA[<blockquote><p>PHP高性能日志SeasLog</p></blockquote>

<h1>一、什么是SeasLog</h1>

<p>SeasLog是一个C语言编写的PHP扩展，提供一组规范标准的功能函数，在PHP项目中方便、规范、高效地写日志，以及快速地读取和查询日志。</p>

<h1>二、为什么需要日志系统</h1>

<ol>
<li>了解系统运行情况</li>
<li>记录用户操作信息</li>
<li>收集需要</li>
</ol>


<h1>三、为什么选择SeasLog</h1>

<ol>
<li>高性能 带有缓冲池功能。</li>
<li>无需配置</li>
<li>功能完善，使用简单

<h1>四、SeasLog安装</h1>

<p> 到<a href="http://pecl.php.net/">pecl</a>搜索seaslog并下载
 解压后
 可自行编译。
<code>
$ cd seaslog //进到解压目录
$ phpize
$ ./configure --with-php-config=/path/to/php-config //path to 为你的PHP安装目录
$ make &amp;&amp; make install
当然，使用PECL管理工具会更方便：
$ pecl install seaslog
</code></p></li>
</ol>


<h2>seaslog.ini的配置</h2>

<pre><code>; configuration for php SeasLog module 
extension = seaslog.so 
seaslog.default_basepath = /log/seaslog-test    ;默认log根目录 
seaslog.default_logger = default                ;默认logger目录 
seaslog.disting_type = 1                            ;是否以type分文件 1是 0否(默认) 
seaslog.disting_by_hour = 1                      ;是否每小时划分一个文件 1是 0否(默认) 
seaslog.use_buffer = 1                              ;是否启用buffer 1是 0否(默认) 
seaslog.buffer_size = 100                         ;buffer中缓冲数量 默认0(不使用buffer_size) 
seaslog.level = 0                                       ;记录日志级别 默认0(所有日志)
</code></pre>

<p><strong>需要将这里面的数据写到php.ini中去</strong></p>

<pre><code>seaslog.disting_type = 1 开启以type分文件，即log文件区分info\warn\erro
seaslog.disting_by_hour = 1 开启每小时划分一个文件
seaslog.use_buffer = 1 开启buffer。默认关闭。当开启此项时，日志预存于内存，当请求结束时(或异常退出时)一次写入文件。
seaslog.buffer_size = 100 设置缓冲数量为100. 默认为0,即无缓冲数量限制.当buffer_size大于0时,缓冲量达到该值则写一次文件.
seaslog.level = 3 记录的日志级别.默认为0,即所有日志均记录。当level为1时,关注debug以上级别(包括debug)，以此类推。level大于8时，所有日志均不记录。
</code></pre>

<h2>默认常量有哪些</h2>

<p>遵循PSR-3标准，SeasLog 共将日志分成8个级别</p>

<pre><code>SEASLOG_DEBUG "debug"
SEASLOG_INFO "info"
SEASLOG_NOTICE "notice"
SEASLOG_WARNING "warning"
SEASLOG_ERROR "error"
SEASLOG_CRITICAL "critical"
SEASLOG_ALERT "alert"
SEASLOG_EMERGENCY "emergency"
</code></pre>

<h2>都提供哪些方法</h2>

<pre><code>
&lt;?php 
/** 
 * @author neeke@php.net 云智慧 
 */ 

class SeasLog 
{ 
    public function __construct() 
    { 
        #SeasLog init 
    } 

    public function __destruct() 
    { 
        #SeasLog distroy 
    } 

    /** 
     * 设置basePath 
     * @param $basePath 
     * @return bool 
     */ 
    static public function setBasePath($basePath) 
    { 
        return TRUE; 
    } 

    /** 
     * 获取basePath 
     * @return string 
     */ 
    static public function getBasePath() 
    { 
        return 'the base_path'; 
    } 

    /** 
     * 设置模块目录 
     * @param $module 
     * @return bool 
     */ 
    static public function setLogger($module) 
    { 
        return TRUE; 
    } 

    /** 
     * 获取最后一次设置的模块目录 
     * @return string 
     */ 
    static public function getLastLogger() 
    { 
        return 'the lastLogger'; 
    } 

    /** 
     * 统计所有类型（或单个类型）行数 
     * @param string $level 
     * @param string $log_path 
     * @param null $key_word 
     * @return array | long 
     */ 
    static public function analyzerCount($level = 'all',$log_path = '*',$key_word = NULL) 
    { 
        return array(); 
    } 

    /** 
     * 以数组形式，快速取出某类型log的各行详情 
     * @param $level 
     * @param string $log_path 
     * @param null $key_word 
     * @param int $start 
     * @param int $limit 
     * @return array 
     */ 
    static public function analyzerDetail($level = SEASLOG_INFO,$log_path = '*',$key_word = NULL, $start = 1,$limit = 20) 
    { 
        return array(); 
    } 

    /** 
     * 获得当前日志buffer中的内容 
     * @return array 
     */ 
    static public function getBuffer() 
    { 
        return array(); 
    } 

    /** 
     * 记录debug日志 
     * @param $message 
     * @param array $content 
     * @param string $module 
     */ 
    static public function debug($message,array $content = array(),$module = '') 
    { 
        #$level = SEASLOG_DEBUG 
    } 

    /** 
     * 记录info日志 
     * @param $message 
     * @param array $content 
     * @param string $module 
     */ 
    static public function info($message,array $content = array(),$module = '') 
    { 
        #$level = SEASLOG_INFO 
    } 

    /** 
     * 记录notice日志 
     * @param $message 
     * @param array $content 
     * @param string $module 
     */ 
    static public function notice($message,array $content = array(),$module = '') 
    { 
        #$level = SEASLOG_NOTICE 
    } 

    /** 
     * 记录warning日志 
     * @param $message 
     * @param array $content 
     * @param string $module 
     */ 
    static public function warning($message,array $content = array(),$module = '') 
    { 
        #$level = SEASLOG_WARNING 
    } 

    /** 
     * 记录error日志 
     * @param $message 
     * @param array $content 
     * @param string $module 
     */ 
    static public function error($message,array $content = array(),$module = '') 
    { 
        #$level = SEASLOG_ERROR 
    } 

    /** 
     * 记录critical日志 
     * @param $message 
     * @param array $content 
     * @param string $module 
     */ 
    static public function critical($message,array $content = array(),$module = '') 
    { 
        #$level = SEASLOG_CRITICAL 
    } 

    /** 
     * 记录alert日志 
     * @param $message 
     * @param array $content 
     * @param string $module 
     */ 
    static public function alert($message,array $content = array(),$module = '') 
    { 
        #$level = SEASLOG_ALERT 
    } 

    /** 
     * 记录emergency日志 
     * @param $message 
     * @param array $content 
     * @param string $module 
     */ 
    static public function emergency($message,array $content = array(),$module = '') 
    { 
        #$level = SEASLOG_EMERGENCY 
    } 

    /** 
     * 通用日志方法 
     * @param $level 
     * @param $message 
     * @param array $content 
     * @param string $module 
     */ 
    static public function log($level,$message,array $content = array(),$module = '') 
    { 

    } 
} 
</code></pre>

<h2>在项目中如何使用</h2>

<blockquote><p>获取与设置basePatn</p></blockquote>

<pre><code>/**
 *静态方法可以不实例化直接使用
 *
 */
$basePath_1 = SeasLog::getBasePath(); 

SeasLog::setBasePath('/log/base_test'); 
$basePath_2 = SeasLog::getBasePath(); 

var_dump($basePath_1,$basePath_2); 

/* 
string(19) "/log/seaslog-ciogao" 
string(14) "/log/base_test" 
*/ 
</code></pre>

<p>直接使用 SeasLog::getBasePath()，将获取php.ini(seaslog.ini)中设置的seaslog.default_basepath 的值。</p>

<p>使用 SeasLog::getBasePath() 函数，将改变 seaslog_get_basepath() 的取值。</p>

<blockquote><p>设置logger与获取lastLogger</p></blockquote>

<pre><code>$lastLogger_1 = SeasLog::getLastLogger(); 

SeasLog::setLogger('testModule/app1'); 
$lastLogger_2 = SeasLog::getLastLogger(); 

var_dump($lastLogger_1,$lastLogger_2); 
/* 
string(7) "default" 
string(15) "testModule/app1" 
*/ 
</code></pre>

<p>与basePath相类似的，
直接使用 SeasLog::getLastLogger()，将获取php.ini(seaslog.ini)中设置的seaslog.default_logger 的值。</p>

<p>使用 SeasLog::setLogger() 函数，将改变 SeasLog::getLastLogger() 的取值。</p>

<h2>SeasLog Logger的使用</h2>

<blockquote><p>获取与设置basePath</p></blockquote>

<pre><code>$basePath_1 = SeasLog::getBasePath();

SeasLog::setBasePath('/log/base_test');
$basePath_2 = SeasLog::getBasePath();

var_dump($basePath_1,$basePath_2);

/*
string(19) "/log/seaslog-ciogao"
string(14) "/log/base_test"
*/
</code></pre>

<p>直接使用 SeasLog::getBasePath()，将获取php.ini(seaslog.ini)中设置的 seaslog.default_basepath 的值。</p>

<p>使用 SeasLog::setBasePath() 函数，将改变 SeasLog::getBasePath() 的取值。</p>

<blockquote><p>设置logger与获取lastLogger</p></blockquote>

<pre><code>$lastLogger_1 = SeasLog::getLastLogger();

SeasLog::setLogger('testModule/app1');
$lastLogger_2 = SeasLog::getLastLogger();

var_dump($lastLogger_1,$lastLogger_2);
/*
string(7) "default"
string(15) "testModule/app1"
*/
</code></pre>

<p>与basePath相类似的，</p>

<p>直接使用 SeasLog::getLastLogger()，将获取php.ini(seaslog.ini)中设置的 seaslog.default_logger 的值。</p>

<p>使用 SeasLog::setLogger() 函数，将改变 SeasLog::getLastLogger() 的取值。
快速写入log</p>

<p>上面已经设置过了basePath与logger，于是log记录的目录已经产生了，</p>

<p>log记录目录 = basePath / logger / {fileName}.log log文件名，以 年月日 分文件，如今天是2014年02月18日期，那么 {fileName} = 20140218;
还记得 php.ini 中设置的 seaslog.disting_type 吗？</p>

<p>默认的 seaslog.disting_type = 0，如果今天我使用了 SeasLog ，那么将产生最终的log文件：</p>

<p>*　LogFile = basePath / logger / 20140218.log
如果 seaslog.disting_type = 1，则最终的log文件将是这样的三个文件</p>

<ul>
<li><p>infoLogFile = basePath / logger / INFO.20140218.log</p></li>
<li><p>warnLogFile = basePath / logger / WARN.20140218.log</p></li>
<li><p>erroLogFile = basePath / logger / ERRO.20140218.log</p></li>
</ul>


<pre><code>SeasLog::log(SEASLOG_ERROR,'this is a error test by ::log');

SeasLog::debug('this is a {userName} debug',array('{userName}' =&gt; 'neeke'));

SeasLog::info('this is a info log');

SeasLog::notice('this is a notice log');

SeasLog::warning('your {website} was down,please {action} it ASAP!',array('{website}' =&gt; 'github.com','{action}' =&gt; 'rboot'));

SeasLog::error('a error log');

SeasLog::critical('some thing was critical');

SeasLog::alert('yes this is a {messageName}',array('{messageName}' =&gt; 'alertMSG'));

SeasLog::emergency('Just now, the house next door was completely burnt out! {note}',array('{note}' =&gt; 'it`s a joke'));


/*
这些函数同时也接受第3个参数为logger的设置项
注意，当last_logger == 'default'时等同于:
SeasLog::setLogger('test/new/path');
SeasLog::error('test error 3');
如果已经在前文使用过SeasLog::setLogger()函数，第3个参数的log只在此处临时使用，不影响下文。
*/
</code></pre>

<blockquote><p>log格式统一为： {type} | {pid} | {timeStamp} |{dateTime} | {logInfo}</p></blockquote>

<pre><code>error | 23625 | 1406422432.786 | 2014:07:27 08:53:52 | this is a error test by log
debug | 23625 | 1406422432.786 | 2014:07:27 08:53:52 | this is a neeke debug
info | 23625 | 1406422432.787 | 2014:07:27 08:53:52 | this is a info log
notice | 23625 | 1406422432.787 | 2014:07:27 08:53:52 | this is a notice log
warning | 23625 | 1406422432.787 | 2014:07:27 08:53:52 | your github.com was down,please rboot it ASAP!
error | 23625 | 1406422432.787 | 2014:07:27 08:53:52 | a error log
critical | 23625 | 1406422432.787 | 2014:07:27 08:53:52 | some thing was critical
emergency | 23625 | 1406422432.787 | 2014:07:27 08:53:52 | Just now, the house next door was completely burnt out! it is a joke
</code></pre>

<h2>SeasLog Analyzer的使用</h2>

<blockquote><p>快速统计某类型log的count值</p></blockquote>

<p>SeasLog在扩展中使用管道调用shell命令 grep -wc快速地取得count值，并返回值(array || int)给PHP。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$countResult_1 = SeasLog::analyzerCount();
</span><span class='line'>$countResult_2 = SeasLog::analyzerCount(SEASLOG_WARNING);
</span><span class='line'>$countResult_3 = SeasLog::analyzerCount(SEASLOG_ERROR,date(&lsquo;Ymd&rsquo;,time()));&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;var_dump($countResult_1,$countResult_2,$countResult_3);
</span><span class='line'>/*
</span><span class='line'>array(8) {
</span><span class='line'>  [&ldquo;debug&rdquo;]=&gt;
</span><span class='line'>  int(3)
</span><span class='line'>  [&ldquo;info&rdquo;]=&gt;
</span><span class='line'>  int(3)
</span><span class='line'>  [&ldquo;notice&rdquo;]=&gt;
</span><span class='line'>  int(3)
</span><span class='line'>  [&ldquo;warning&rdquo;]=&gt;
</span><span class='line'>  int(3)
</span><span class='line'>  [&ldquo;error&rdquo;]=&gt;
</span><span class='line'>  int(6)
</span><span class='line'>  [&ldquo;critical&rdquo;]=&gt;
</span><span class='line'>  int(3)
</span><span class='line'>  [&ldquo;alert&rdquo;]=&gt;
</span><span class='line'>  int(3)
</span><span class='line'>  [&ldquo;emergency&rdquo;]=&gt;
</span><span class='line'>  int(3)
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;int(7)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;int(1)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;*/</span></code></pre></td></tr></table></div></figure></p>

<blockquote><p>获取某类型log列表</p></blockquote>

<p>SeasLog在扩展中使用管道调用shell命令 grep -w快速地取得列表，并返回array给PHP。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$detailErrorArray_inAll   = SeasLog::analyzerDetail(SEASLOG_ERROR);
</span><span class='line'>$detailErrorArray_today   = SeasLog::analyzerDetail(SEASLOG_ERROR,date(&lsquo;Ymd&rsquo;,time()));&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;var_dump($detailErrorArray_inAll,$detailErrorArray_today);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/&lt;em&gt;
</span><span class='line'>SeasLog::analyzerDetail(SEASLOG_ERROR) == SeasLog::analyzerDetail(SEASLOG_ERROR,&lsquo;&lt;/em&gt;&rsquo;);
</span><span class='line'>取当前模块下所有level为 SEASLOG_ERROR 的信息列表:
</span><span class='line'>array(6) {
</span><span class='line'> [0] =&gt;
</span><span class='line'>  string(66) &ldquo;error | 8568 | 1393172042.717 | 2014:02:24 00:14:02 | test error 3 &rdquo;
</span><span class='line'>  [1] =&gt;
</span><span class='line'>  string(66) &ldquo;error | 8594 | 1393172044.104 | 2014:02:24 00:14:04 | test error 3 &rdquo;
</span><span class='line'>  [2] =&gt;
</span><span class='line'>  string(66) &ldquo;error | 8620 | 1393172044.862 | 2014:02:24 00:14:04 | test error 3 &rdquo;
</span><span class='line'>  [3] =&gt;
</span><span class='line'>  string(66) &ldquo;error | 8646 | 1393172045.989 | 2014:02:24 00:14:05 | test error 3 &rdquo;
</span><span class='line'>  [4] =&gt;
</span><span class='line'>  string(66) &ldquo;error | 8672 | 1393172047.882 | 2014:02:24 00:14:07 | test error 3 &rdquo;
</span><span class='line'>  [5] =&gt;
</span><span class='line'>  string(66) &ldquo;error | 8698 | 1393172048.736 | 2014:02:24 00:14:08 | test error 3 &rdquo;
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;SeasLog::analyzerDetail(SEASLOG_ERROR,date(&lsquo;Ymd&rsquo;,time()));
</span><span class='line'>只取得当前模块下，当前一天内,level为SEASLOG_ERROR 的信息列表:
</span><span class='line'>array(2) {
</span><span class='line'>  [0] =&gt;
</span><span class='line'>  string(66) &ldquo;error | 8568 | 1393172042.717 | 2014:02:24 00:14:02 | test error 3 &rdquo;
</span><span class='line'>  [1] =&gt;
</span><span class='line'>  string(66) &ldquo;error | 8594 | 1393172044.104 | 2014:02:24 00:14:04 | test error 3 &rdquo;
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;同理，取当月
</span><span class='line'>$detailErrorArray_mouth = SeasLog::analyzerDetail(SEASLOG_ERROR,date(&lsquo;Ym&rsquo;,time()));&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;*/</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP无限级分类]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/29/wu-xian-ji-fen-lei/"/>
    <updated>2016-04-29T09:36:19+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/29/wu-xian-ji-fen-lei</id>
    <content type="html"><![CDATA[<blockquote><p>PHP无限级分类主要有两种实现方式，通过递归和全路径实现</p></blockquote>

<h1>一、递归实现</h1>

<pre><code>在数据库中存储如下格式的表：
</code></pre>

<table>
<thead>
<tr>
<th>ID</th>
<th style="text-align:center;">pid</th>
<th style="text-align:center;">catename</th>
<th style="text-align:center;">cateorder</th>
<th style="text-align:right;">createtime</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td style="text-align:center;">0</td>
<td style="text-align:center;">新闻</td>
<td style="text-align:center;">0</td>
<td style="text-align:right;">0</td>
</tr>
<tr>
<td>2</td>
<td style="text-align:center;">0</td>
<td style="text-align:center;">图片</td>
<td style="text-align:center;">0</td>
<td style="text-align:right;">0</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">国内新闻</td>
<td style="text-align:center;">0</td>
<td style="text-align:right;">0</td>
</tr>
<tr>
<td>4</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">国际新闻</td>
<td style="text-align:center;">0</td>
<td style="text-align:right;">0</td>
</tr>
<tr>
<td>5</td>
<td style="text-align:center;">3</td>
<td style="text-align:center;">北京新闻</td>
<td style="text-align:center;">0</td>
<td style="text-align:right;">0</td>
</tr>
<tr>
<td>6</td>
<td style="text-align:center;">4</td>
<td style="text-align:center;">美国新闻</td>
<td style="text-align:center;">0</td>
<td style="text-align:right;">0</td>
</tr>
<tr>
<td>7</td>
<td style="text-align:center;">2</td>
<td style="text-align:center;">美女图片</td>
<td style="text-align:center;">0</td>
<td style="text-align:right;">0</td>
</tr>
<tr>
<td>8</td>
<td style="text-align:center;">2</td>
<td style="text-align:center;">风景图片</td>
<td style="text-align:center;">0</td>
<td style="text-align:right;">0</td>
</tr>
</tbody>
</table>


<pre><code>create table deepcate
(
id int(10) unsigned not null  auto_increment primary key,
pid int(11) unsigned    not null,
catename    varchar(30) not null,
cateorder   int(11) unsigned    default 0,
createtime  int(10) not null
);

insert into deepcate(pid,catename,cateorder,createtime)values(0,'新闻',0,0);
insert into deepcate(pid,catename,cateorder,createtime)values(0,'图片',0,0);
insert into deepcate(pid,catename,cateorder,createtime)values(1,'国内新闻',0,0);
insert into deepcate(pid,catename,cateorder,createtime)values(1,'国际新闻',0,0);
insert into deepcate(pid,catename,cateorder,createtime)values(3,'北京新闻',0,0);
insert into deepcate(pid,catename,cateorder,createtime)values(4,'美国新闻',0,0);
insert into deepcate(pid,catename,cateorder,createtime)values(2,'美女图片',0,0);
insert into deepcate(pid,catename,cateorder,createtime)values(2,'风景图片',0,0);
insert into deepcate(pid,catename,cateorder,createtime)values(7,'日韩明星',0,0);
insert into deepcate(pid,catename,cateorder,createtime)values(9,'日本AV',0,0);

select * from deepcate;
</code></pre>

<blockquote><p>php 代码实现</p></blockquote>

<pre><code>&lt;?php
header("Content-Type:text/html;Charset=UTF-8");
// php无限分类下拉列表的代码实现
include_once('db.inc.php') ;

function getList($pid=0,&amp;$result=array(),$spac=0)
{
    $spac=$spac+2;
    $sql=" SELECT * FROM deepcate WHERE pid=$pid ";
    $res=mysql_query($sql);

    while($row=mysql_fetch_assoc($res)){
        $row['catename']=str_repeat('&amp;nbsp;&amp;nbsp;',$spac).'|--'.$row['catename'];
        $result[]=$row;
        getList($row['id'],$result,$spac);
    }
    return $result;
}

function displayCate($pid=0,$selected=0){
     $rs=getList($pid);
     $str="";
     $str.="&lt;select name='cate'&gt;";
    foreach($rs as $v){
        if($v['id']==$selected){
            $selected="selected";
        }
       $str.="&lt;option {$selected}&gt;";
       $str.= $v['catename'];
       $str.= "&lt;/option&gt;";
    }
    return $str.= "&lt;/select&gt;";
}

echo displayCate();

echo "&lt;hr/&gt;&lt;hr/&gt;";
function getCatePath($cid,&amp;$result){
    $sql="SELECT * FROM deepcate WHERE id=$cid ";
    $rs=mysql_query($sql);
    $row=mysql_fetch_assoc($rs);
    if($row){
        $result[]=$row;
        getCatePath($row['pid'],$result);
    }
    krsort($result);
    return $result;
}


function displayCatePath($cid,$url="deepcate.php?cid="){
    $res=getCatePath($cid,$result);
    $str="";
    foreach($res as $v){
        $str.= "&lt;a href='{$url}{$v['id']}'&gt;{$v['catename']}&lt;/a&gt;&gt;&gt;";
    }return $str;
}

echo displayCatePath(10);
</code></pre>

<h1>二、全路径实现</h1>

<pre><code>use imooc;
create table    likecate
(
id  int(11) not null  auto_increment primary key,
path    varchar(200)    not null,
catename    varchar(30) not null,
cateorder   int(11) not null    default 0,
createtime  int(11) not null
);

insert into likecate(path,catename,cateorder,createtime)values('','手机',0,0);
insert into likecate(path,catename,cateorder,createtime)values('1','功能手机',0,0);
insert into likecate(path,catename,cateorder,createtime)values('1,2','老人手机',0,0);
insert into likecate(path,catename,cateorder,createtime)values('1,2','儿童手机',0,0);
insert into likecate(path,catename,cateorder,createtime)values('1','智能手机',0,0);
insert into likecate(path,catename,cateorder,createtime)values('1,5','andriod手机',0,0);
insert into likecate(path,catename,cateorder,createtime)values('1,5','ios手机',0,0);
insert into likecate(path,catename,cateorder,createtime)values('1,5','winphoto手机',0,0);
insert into likecate(path,catename,cateorder,createtime)values('1,2,4','色盲手机',0,0);
insert into likecate(path,catename,cateorder,createtime)values('1,2,3','大字手机',0,0);

select * from likecate;

select id,catename,path,concat(path,',',id) as fullpath from likecate where 1 order by fullpath asc;

#结果显示如图
+----+--------------+-------+----------+
| id | catename     | path  | fullpath |
+----+--------------+-------+----------+
|  1 | 手机         |       | ,1       |
|  2 | 功能手机     | 1     | 1,2      |
|  3 | 老人手机     | 1,2   | 1,2,3    |
| 10 | 大字手机     | 1,2,3 | 1,2,3,10 |
|  4 | 儿童手机     | 1,2   | 1,2,4    |
|  9 | 色盲手机     | 1,2,4 | 1,2,4,9  |
|  5 | 智能手机     | 1     | 1,5      |
|  6 | andriod手机  | 1,5   | 1,5,6    |
|  7 | ios手机      | 1,5   | 1,5,7    |
|  8 | winphoto手机 | 1,5   | 1,5,8    |
+----+--------------+-------+----------+
</code></pre>

<blockquote><p>php代码实现</p></blockquote>

<pre><code>&lt;?php
header("Content-Type:text/html;Charset=UTF-8");
//递归无限分类原理
include_once ('db.inc.php');

function likecate(){
    $sql="select id,catename,path,concat(path,',',id) as fullpath from likecate where 1 order by fullpath asc";
    $res=mysql_query($sql);
    $result=array();
    while($row=mysql_fetch_assoc($res)){
        $deep=count(explode(',',trim($row['fullpath'],',')));

        $row['catename']=str_repeat('&amp;nbsp;&amp;nbsp;',$deep*4).'|--'.$row['catename'];
        $result[]=$row;
    }
    return $result;
}


$res=likecate();
echo "&lt;select name='cate'&gt;";
foreach($res as $v){
    echo "&lt;option&gt;{$v['catename']}&lt;/option&gt;";
}
echo "&lt;/select&gt;";

echo "&lt;hr/&gt;&lt;hr/&gt;";
function getPathCate($cateid){
    $sql="select *,concat(path,',',id)fullpath from likecate where id=$cateid";
    $res=mysql_query($sql);
    $row=mysql_fetch_assoc($res);
    $ids=$row['fullpath'];
    $sql="select * from likecate where id in($ids) order by id asc";
    $res=mysql_query($sql);
    $result=array();
    while($row=mysql_fetch_assoc($res)){
        $result[]=$row;
    }
    return $result;
}

function displayCatePath($cateid,$link='likecate.php?cid='){
    $res=getPathCate($cateid);
    $str="";
    foreach($res as $v){
        $str.="&lt;a href='{$link}'&gt;{$v['catename']}&lt;/a&gt;&gt;";
    }
    return $str;
}  

echo displayCatePath(4,'likecate.php?p=1&amp;cid=');
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我也是一个有颜色的代码了]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/29/test/"/>
    <updated>2016-04-29T09:36:19+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/29/test</id>
    <content type="html"><![CDATA[<pre><code class="php this is a php">&lt;?php
    echo "11";
?&gt;
</code></pre>

<pre class="prettyprint text">
$ rake generate
## Generating Site with Jekyll
unchanged sass/screen.scss
Configuration file: /Users/Neo/Octopress/_config.yml
            Source: source
       Destination: public
      Generating...
     Build Warning: Layout 'nil'
       requested in blog/categories/ubuntu/atom.xml does not exist.
     Build Warning: Layout 'nil'
       requested in blog/categories/octopress/atom.xml does not exist.
     Build Warning: Layout 'nil'
       requested in blog/categories/java/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/environment/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/homebrew/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/android/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/eclipse/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/ubuntu/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/octopress/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/java/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/environment/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/homebrew/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/android/atom.xml does not exist.
     Build Warning: Layout 'nil'
        requested in blog/categories/eclipse/atom.xml does not exist.
                    done.
 Auto-regeneration: disabled. Use --watch to enable.
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx下PHP环境搭建1]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/26/nginx-php-huan-jing/"/>
    <updated>2016-04-26T22:53:05+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/26/nginx-php-huan-jing</id>
    <content type="html"><![CDATA[<blockquote><p>Nginx下PHP环境搭建1</p></blockquote>

<h1>一、需要准备的包</h1>

<ul>
<li>libiconv-1.7.tar.gz</li>
<li>libmcrypt-2.5.7.tar.gz</li>
<li>mcrypt-2.6.8.tar.gz</li>
<li>mhash-0.9.3.tar.gz</li>
<li>php-5.5.34.tar.bz2</li>
</ul>


<h1>二、具体安装</h1>

<hr />

<ol>
<li><p>libiconv</p>

<ol>
<li>tar -zvxf libiconv-1.7.tar.gz</li>
<li>cd libiconv-1.7</li>
<li>./configure &ndash;prefix=/usr/local</li>
<li>make</li>
<li>make install</li>
</ol>
</li>
<li><p>libmcrypt</p>

<ol>
<li>tar -zvxf libmcrypt-2.5.7.tar.gz</li>
<li>cd libmcrypt-2.5.7</li>
<li>./configure</li>
<li>make</li>
<li>make install</li>
<li>/sbin/ldconfig   //共享链接库</li>
<li>./configure &ndash;enable-ltdl-install //内键指令</li>
<li>make</li>
<li>make install</li>
</ol>
</li>
<li><p>mhash</p>

<ol>
<li>tar -zvxf mhash-0.9.3.tar.gz</li>
<li>cd mhash-0.9.3</li>
<li>./configure</li>
<li>make</li>
<li>make install</li>
<li>ln -s /usr/local/lib/libmcrypt.la /usr/lib/ibmcrypt.la</li>
<li>ln -s /usr/local/lib/libmcrypt.la.so.4 /usr/lib/libmcrypt.la.so.4</li>
<li>ln -s /usr/local/lib/libmcrypt.la.so.4.4.8 /usr/lib/libmcrypt.la.so.4.4.8</li>
<li>ln -s /usr/local/lib/libmhash.a /usr/lib/libmhash.a</li>
<li>ln -s /usr/local/lib/libmhash.la /usr/lib/libmhash.la</li>
<li>ln -s /usr/local/lib/libmhash.so /usr/lib/libmhash.so</li>
<li>ln -s /usr/local/lib/libmhash.so.2 /usr/lib/libmhash.so.2</li>
<li>ln -s /usr/local/lib/libmhash.so.2.0.1 /usr/lib/libmhash.so.2.0.1</li>
</ol>
</li>
<li><p>mcrypt</p>

<ol>
<li>tar -zxvf mcrypt-2.6.8.tar.gz</li>
<li>cd mcrypt-2.6.8</li>
<li>/sbin/ldconfig</li>
<li>./configure</li>
<li>若报错则找不到LIBMCRYPT则

<ol>
<li>export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH</li>
<li>./configure -with-libmcryp-prefix=/usr/local</li>
</ol>
</li>
<li>make

<ol>
<li>报错打开报错的文件 vi /usr/local/include/mutils.h</li>
<li>找到报错的那行看是哪个文件引入失败(mhash_config.h)</li>
<li>find / -name mhash_config.h 在系统中找到该文件</li>
<li>cp /home/Ewan/下载/mhash-0.9.3/mhash_config.h /usr/local/include 拷贝到include文件下</li>
<li>make</li>
</ol>
</li>
<li>make install</li>
</ol>
</li>
<li><p>php-5.5.34.tar.bz2</p>

<ol>
<li>tar -jxvf php-5.5.34.tar.bz2</li>
<li>cd php-5.5.34</li>
<li>./configure &ndash;prefix=/usr/local/php &ndash;enable-fastcgi &ndash;enable-fpm

<ol>
<li>报错 yum install libxml2 libxml2-devel</li>
<li>./configure &ndash;prefix=/usr/local/php &ndash;enable-fastcgi &ndash;enable-fpm</li>
</ol>
</li>
<li>make ZEND_EXTRA_LIBS=&lsquo;-liconv&rsquo;</li>
<li>make install

<ol>
<li>报错 vi /etc/ld.so.conf</li>
<li>输入 /usr/local/lib</li>
<li>make install</li>
<li>如果还是出错 /sbin/ldconfig -v</li>
<li>make install</li>
<li>cp php.ini-dist /usr/local/php/etc/php.ini</li>
</ol>
</li>
</ol>
</li>
<li><p>mysql (5.5版本以下)</p>

<ol>
<li>groupadd mysql //添加组</li>
<li>useradd mysql -g mysql //添加用户</li>
<li>tar -zxvf mysql-x.x.x</li>
<li>cd mysql-x.x.x</li>
<li>./configure &ndash;prefix=/usr/local/mysql &ndash;with-mysqld-ldflags=-all-static &ndash;with-client-ldflags=-all-static &ndash;with-readline &ndash;with-ssl</li>
<li>/usr/local/mysql/bin/mysql_install_db &ndash;user//初始化数据库</li>
<li>cp ./support-files/mysql.server /etc/init.d/mysql //复制启动项到系统中</li>
<li>cp ./support-files/my-medium.cnf /etc/my.cnf</li>
<li>chmod 755 /etc/init.d/mysql(755 分别代表文件拥有者，同组者，其他人的权限 rwx 7为111 可读可写可执行)</li>
<li>cd /usr/local/mysql</li>
<li>chown -R mysql . //将拥有者更改为mysql用户</li>
<li>chgrp -R mysql . //归到mysql组</li>
<li>/usr/local/mysql/bin/mysqladmin -u root password &lsquo;abc123&rsquo; //设置数据库密码</li>
<li>报错 不能连接到local mysql</li>
<li>ps -ef|grep mysql //找到mysql对应的进程号</li>
<li>kill -9 xxxx //杀死进程</li>
<li>/usr/local/mysql/bin/mysql_install_db &ndash;user//初始化数据库</li>
<li>service mysql start //启动MYSQL</li>
<li>/usr/local/mysql/bin/mysqladmin -u root password &lsquo;abc123&rsquo; //设置数据库密码</li>
<li>/usr/local/mysql/bin/mysql -u root -p //测试输入的密码</li>
<li>进入到mysql 后可以\q退出</li>
</ol>
</li>
<li>安装mysql（5.5版本）
  <a href="http://www.mysql.com/">下载Mysql5.5.4</a></li>
</ol>


<p><img src="http://shp.qpic.cn/txdiscuz_pic/0/_bbs_qcloud_com_forum_201503_10_171832lw4gbxwhq9z9vmho.png/0" alt="1" /></p>

<p><img src="http://shp.qpic.cn/txdiscuz_pic/0/_bbs_qcloud_com_forum_201503_10_171836mubv0eb5010ewbjv.png/0" alt="1" /></p>

<pre><code>1. tar zxvf mysql-5.5.40.tar.gz
2. cd mysql-5.5.4
3. yum install ncurses-devel cmake bison-devel libaio-devel gcc-c++ bison -y 
    *  mysql5.5 版本之后，预编译的 configure命令改为了 cmake, 需要手动安装一下 cmake命令
5.  cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci-- Library mysqlclient depends on OSLIBS -lpthread;m;rt;dl-- Configuring done-- Generating done-- Build files have been written to: /root/mysql-5.5.40 ————预编译无报错，成功。
*  make 
    *  [100%] Building CXX object mysql-test/lib/My/SafeProcess/CMakeFiles/my_safe_process.dir/safe_process.cc.oLinking CXX executable my_safe_process[100%] Built target my_safe_process————无报错，make正常。
*   make install -- Installing: /usr/local/mysql/man/man1/mysql_fix_extensions.1 -- Installing: /usr/local/mysql/man/man1/mysqldumpslow.1 -- Installing: /usr/local/mysql/man/man1/mysql_secure_installation.1 -- Installing: /usr/local/mysql/man/man8/mysqld.8 ————无报错，make install正常。
*    groupadd mysql ————创建mysql组
*     useradd -g mysql mysql ————在mysql组中创建mysql用户
* cp /usr/local/mysql/support-files/my-medium.cnf /etc/my.cnf ————默认没有mysql的配置文件，将源码包中的配置文件拷贝到etc下的配置文件中。
*  /usr/local/mysql/scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data ————初始化数据库，指定用户为mysql，家目录为/usr/local/mysql，数据库目录为/usr/local/mysql/data
* chown -R root /usr/local/mysql/ ————改变目录的所有者
* chown -R mysql /usr/local/mysql/data ————改变目录的所有者
* chgrp -R mysql /usr/local/mysql/ ————改变目录的所属组
*  export PATH=$PATH:/usr/local/mysql/bin ————将/usr/local/mysql/bin下的命令放到环境变量中
*   /usr/local/mysql/bin/mysqld_safe --user=mysql &amp; ————启动mysql
* mysql 
    *  Welcome to the MySQL monitor.  Commands end with ; or \g.
         Your MySQL connection id is 1
</code></pre>

<blockquote><p>ps:在实际的操作过程中上面在10步初始化数据库时有可能会error这时可以考虑用</p></blockquote>

<pre><code> ps -ef|grep mysql //找到mysql对应的进程号
 kill -9 xxxx //杀死进程
</code></pre>

<blockquote><p>然后执行</p></blockquote>

<pre><code> chown -R root /usr/local/mysql/ ————改变目录的所有者
 chown -R mysql /usr/local/mysql/data ————改变目录的所有者
 chgrp -R mysql /usr/local/mysql/ ————改变目录的所属组
 export PATH=$PATH:/usr/local/mysql/bin ————将/usr/local/mysql/bin下的命令放到环境变量中
 /usr/local/mysql/scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data ————初始化数据库，指定用户为mysql，家目录为/usr/local/mysql，数据库目录为/usr/local/mysql/data
 /usr/local/mysql/bin/mysqld_safe &amp; 启动Mysql 或者
 /usr/local/mysql/bin/mysqld_safe --user=mysql &amp; ————启动mysql
 在执行以下操作
</code></pre>

<h2>Mysql启动、停止的方法</h2>

<pre><code>/usr/local/mysql/bin/mysqld_safe --user=mysql &amp;      启动
mysqladmin –uroot –pxxx  shutdown                  停止
tail -f /var/log/mysqld.log                        查看mysql的错误日志
</code></pre>

<h3>修改 mysql监听地址为127.0.0.1</h3>

<pre><code>netstat -ntulp
tcp        0      0 0.0.0.0:3306                0.0.0.0:*                   LISTEN      28253/mysqld       
tcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN      1889/sshd    
</code></pre>

<p>默认是监听的0.0.0.0</p>

<pre><code>vi /etc/my.cnf
添加一列
[mysqld]
port            = 3306
socket          = /tmp/mysql.socK
bind-address=127.0.0.1
# mysqladmin -uroot -p shutdow
# /usr/local/mysql/bin/mysqld_safe --user=mysql &amp;
保存并退出
 netstat -ntulp
tcp        0      0 127.0.0.1:3306              0.0.0.0:*                   LISTEN      29103/mysqld   
</code></pre>

<p>————修改成功</p>

<h2>修改 mysql的root密码</h2>

<pre><code>use mysql
update user set Password=PASSWORD('新密码') where User='root' and Host='localhost';
flush privileges;flush privileges;
# mysql -uroot -p
Enter password:
mysql&gt;
</code></pre>

<p>————修改新密码成功</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OAuth]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/25/oauth/"/>
    <updated>2016-04-25T22:42:34+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/25/oauth</id>
    <content type="html"><![CDATA[<blockquote><p>开放式授权OAuth -Open Authorization</p></blockquote>

<h1>一、什么是OAuth</h1>

<p>OAUTH协议为用户资源的授权提供了一个安全的、开放而又简易的标准。与以往的授权方式不同之处是OAUTH的授权不会使第三方触及到用户的帐号信息（如用户名与密码），即第三方无需使用用户的用户名与密码就可以申请获得该用户资源的授权，因此OAUTH是安全的。oAuth是Open Authorization的简写。</p>

<h1>二、OAuth协议简介</h1>

<ul>
<li>OAuth 1.0 2007年年末 有漏洞</li>
<li>OAuth 2.0 2010年年初</li>
</ul>


<h1>三、三个重要步骤</h1>

<ol>
<li><p>请求OAuth登录页面</p>

<ul>
<li>Request Token URL -未授权的令牌请求服务器 XX网请求QQ登录页面时使用的带有特定参数的URL</li>
<li><a href="http://graph.qq.com/oauth/...?...&amp;client_id=*100490398&amp;...&amp;redirect_url=http://www.xxx.com/...">http://graph.qq.com/oauth/...?...&amp;client_id=*100490398&amp;...&amp;redirect_url=http://www.xxx.com/...</a></li>
<li>client_id APPID</li>
<li>client_secret APPKEY</li>
</ul>
</li>
<li><p>用户使用QQ号登录并授权</p>

<ul>
<li>验证用户密码成功后重定向到指定的url，此时可以通过$_GET[&lsquo;code&rsquo;]来获取</li>
</ul>
</li>
<li>返回登录结果

<ul>
<li>拿到加了密的code过后还需要请求 User Authorization URL -用户授权的令牌请求服务地址 用户QQ登录授权之后请求的一个带有特定参数的URL</li>
<li>用来提高安全性。</li>
<li>请求过后会得到一个响应数据，包含一些基本的账号信息。</li>
<li>code有生命周期（一般为几秒钟）并且只能使用一次。</li>
<li>请求成功过后可以拿到Access Token</li>
</ul>
</li>
</ol>


<h1>四、Access Token</h1>

<p>Access Token -用户通过第三方应用访问OAuth接口的令牌</p>

<ul>
<li>在请求API时会动态生成URL 并且都离不开 Access Token</li>
<li>Access Token具有较长生命周期（十天半个月）</li>
<li>Access Token过期过后可以选择重新登录或者在请求API时使用need_refresh_token（各个平台不同）=true 来刷新Access Token</li>
</ul>

]]></content>
  </entry>
  
</feed>
