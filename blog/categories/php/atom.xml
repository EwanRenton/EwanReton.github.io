<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Ewan Reton]]></title>
  <link href="http://ewanreton.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://ewanreton.github.io/"/>
  <updated>2016-08-04T00:34:00+08:00</updated>
  <id>http://ewanreton.github.io/</id>
  <author>
    <name><![CDATA[Ewan Reton]]></name>
    <email><![CDATA[liukedi001@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP异步调用]]></title>
    <link href="http://ewanreton.github.io/blog/2016/08/04/popen-plus-curl/"/>
    <updated>2016-08-04T00:02:32+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/08/04/popen-plus-curl</id>
    <content type="html"><![CDATA[<h1>popen+curl 实现PHP异步调用</h1>

<blockquote><p>从上次开始复习到起已经好久没有写过博客了，最近实习期间遇到了很多问题，想写点东西来做个记录。</p></blockquote>

<p>场景：用户在上传视频，根据所设定的帧间隔将视频切分成一帧一帧的图片。随着视频的增大，切分时间越来越长，导致出现超时的情况。</p>

<p>解决办法：将切分视频另外开一个线程。</p>

<p>百度过后发现PHP的异步执行主要有以下几种形式：</p>

<ul>
<li>Ajax 这也是我们用的最多的一种。</li>
<li>popen

<ul>
<li>打开一个指向进程的管道，该进程由派生给定的command命令而产生。所以，可以通过调用他，但忽略它的输出。</li>
</ul>
</li>
<li>curl扩展</li>
<li>fscokeopen函数，支持socket编程。</li>
</ul>


<p>经过选择过后popen最符合此次场景。</p>

<p>在这个场景中，我们需要将切分的函数独立出来，通过popen来调用PHP脚本，然后再脚本执行完成过后通过curl产生一个回调，来触发回调函数。</p>

<p>首先是 popen函数的使用，</p>

<pre><code class="php">$cmd="php /path/to/test.php $parameter1 $parameter2 &amp;";
pclose(popen($cmd,"r")); //只有r和w两种形式，具体没有深入了解。
</code></pre>

<p>很简单就实现了，首先如果你的PHP没有加入到环境变量，你需要将上面的PHP写到你的PHP安装目录，如<code>/usr/share/php/bin/php</code> 需要注意的是popen() 这样来使用并不能忽略它的输出，需要这样嵌套pclose(popen()),才能做到异步调用。</p>

<p>并且你也可以通过fread函数来读取popen的返回值。</p>

<p>通过上面我们已经实现了异步调用，下面我们就要通过一个curl来触发我们的回调函数，在这里就是把已经切好的图片信息存储到数据库中。</p>

<pre><code class="php">
    $url = $UPDATE_FIN_URL;
    $data = array( 'table_name'=&gt;$table_name,'txt_path'=&gt;$txtpath);
    $ch=curl_init();

    curl_setopt($ch, CURLOPT_POST, 1);  // 设置为post传递形式
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);  // 设置post传递的数据
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);  // 设置数据以文件流的形式返回

    curl_setopt($ch, CURLOPT_HEADER, false);  // 设置不显示头信息
    $result = curl_exec($ch);  //获取返回的结果
    $info = curl_getinfo($ch);   // 获取本次访问资源的相关信息
    curl_close($ch);
</code></pre>

<p>上面是以post方式想url地址发起请求，在这里我们就是在PHP脚本的最后，通过这个curl向我们项目的一个控制器发起请求，来执行回调函数实现数据入库。</p>

<p>最后，还想记录下cmd命令中调用PHP的一些方法。</p>

<pre><code class="php">
php /path/to/test.php $parameter1 $parameter2
</code></pre>

<p>其中两个参数在PHP脚本中被放到了$argv以数组的形式保存，$argc记录了参数的个数。</p>

<h1>exec</h1>

<p>最近也接触到了PHP 通过exec()函数调用外部命令。
```</p>

<p>exec(string command,string [array],int [return_var])
exec(&ldquo;mkdir test&rdquo;,$out,$return);</p>

<p>```</p>

<ul>
<li>command-需要执行的命令,如shell等</li>
<li>Array 输出值</li>
<li>return_var 返回值，0表示成功其他为失败</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP设计模式(九)-代理模式]]></title>
    <link href="http://ewanreton.github.io/blog/2016/06/07/php-design-9/"/>
    <updated>2016-06-07T23:30:32+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/06/07/php-design-9</id>
    <content type="html"><![CDATA[<h1>1、模式定义</h1>

<p>代理模式（Proxy）为其他对象提供一种代理以控制对这个对象的访问。使用代理模式创建代理对象，让代理对象控制目标对象的访问（目标对象可以是远程的对象、创建开销大的对象或需要安全控制的对象），并且可以在不改变目标对象的情况下添加一些额外的功能。</p>

<p>在某些情况下，一个客户不想或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用，并且可以通过代理对象去掉客户不能看到的内容和服务或者添加客户需要的额外服务。</p>

<p>经典例子就是网络代理，你想访问 Facebook 或者 Twitter ，如何绕过 GFW？找个代理网站。</p>

<h1>2、UML类图</h1>

<p><img src="http://laravelacademy.org/wp-content/uploads/2015/12/Proxy-Design-Pattern-UML.png" alt="" /></p>

<h1>3、示例代码</h1>

<pre><code class="php Record.php">    &lt;?php

    namespace DesignPatterns\Structural\Proxy;

    /**
     * Record类
     */
    class Record
    {
        /**
         * @var array|null
         */
        protected $data;

        /**
         * @param null $data
         */
        public function __construct($data = null)
        {
            $this-&gt;data = (array) $data;
        }

        /**
         * magic setter
         *
         * @param string $name
         * @param mixed  $value
         *
         * @return void
         */
        public function __set($name, $value)
        {
            $this-&gt;data[(string) $name] = $value;
        }

        /**
         * magic getter
         *
         * @param string $name
         *
         * @return mixed|null
         */
        public function __get($name)
        {
            if (array_key_exists($name, $this-&gt;data)) {
                return $this-&gt;data[(string) $name];
            } else {
                return null;
            }
        }
    }
</code></pre>

<pre><code class="php RecordProxy.php">    &lt;?php

    namespace DesignPatterns\Structural\Proxy;

    /**
     * RecordProxy类
     */
    class RecordProxy extends Record
    {
        /**
         * @var bool
         */
        protected $isDirty = false;

        /**
         * @var bool
         */
        protected $isInitialized = false;

        /**
         * @param array $data
         */
        public function __construct($data)
        {
            parent::__construct($data);

            // when the record has data, mark it as initialized
            // since Record will hold our business logic, we don't want to
            // implement this behaviour there, but instead in a new proxy class
            // that extends the Record class
            if (null !== $data) {
                $this-&gt;isInitialized = true;
                $this-&gt;isDirty = true;
            }
        }

        /**
         * magic setter
         *
         * @param string $name
         * @param mixed  $value
         *
         * @return void
         */
        public function __set($name, $value)
        {
            $this-&gt;isDirty = true;
            parent::__set($name, $value);
        }
    }
</code></pre>

<h1>4、测试代码</h1>

<pre><code class="php ProxyTest.php">
    &lt;?php

    namespace DesignPatterns\Structural\Proxy\Tests;

    use DesignPatterns\Structural\Proxy\Record;
    use DesignPatterns\Structural\Proxy\RecordProxy;

    class ProxyTest extends \PHPUnit_Framework_TestCase
    {
        public function testSetAttribute(){
            $data = [];
            $proxy = new RecordProxy($data);
            $proxy-&gt;xyz = false;
            $this-&gt;assertTrue($proxy-&gt;xyz===false);
        }
    }
</code></pre>

<h1>5、总结</h1>

<p>代理模式在很多情况下都非常有用，特别是你想强行控制一个对象的时候，比如延迟加载、监视状态变更的方法等等。</p>

<p>与类似接口的区别：</p>

<ul>
<li>适配器模式 —— 适配器模式为它所适配的对象提供了一个不同的接口，而代理提供了与它的实体相同的接口。</li>
<li>装饰器模式 —— 两者目的不同：装饰器为对象添加一个或多个功能，而代理则控制对对象的访问。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP设计模式(八)-迭代器模式]]></title>
    <link href="http://ewanreton.github.io/blog/2016/06/07/php-design-8/"/>
    <updated>2016-06-07T12:59:44+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/06/07/php-design-8</id>
    <content type="html"><![CDATA[<h1>1、模式定义</h1>

<p>迭代器模式（Iterator），又叫做游标（Cursor）模式。提供一种方法访问一个容器（Container）对象中各个元素，而又不需暴露该对象的内部细节。</p>

<p>当你需要访问一个聚合对象，而且不管这些对象是什么都需要遍历的时候，就应该考虑使用迭代器模式。另外，当需要对聚集有多种方式遍历时，可以考虑去使用迭代器模式。迭代器模式为遍历不同的聚集结构提供如开始、下一个、是否结束、当前哪一项等统一的接口。</p>

<p>PHP标准库（SPL）中提供了迭代器接口 Iterator，要实现迭代器模式，实现该接口即可。</p>

<h1>2、UML类图</h1>

<p><img src="http://laravelacademy.org/wp-content/uploads/2016/01/Iterator-Design-Pattern-UML.png" alt="" /></p>

<h1>3、实例代码</h1>

<pre><code class="php Book.php">    &lt;?php

    namespace DesignPatterns\Behavioral\Iterator;

    class Book
    {

        private $author;

        private $title;

        public function __construct($title, $author)
        {
            $this-&gt;author = $author;
            $this-&gt;title = $title;
        }

        public function getAuthor()
        {
            return $this-&gt;author;
        }

        public function getTitle()
        {
            return $this-&gt;title;
        }

        public function getAuthorAndTitle()
        {
            return $this-&gt;getTitle() . ' by ' . $this-&gt;getAuthor();
        }
    }
</code></pre>

<pre><code class="php BookList.php">    &lt;?php

    namespace DesignPatterns\Behavioral\Iterator;

    class BookList implements \Countable
    {

        private $books;

        public function getBook($bookNumberToGet)
        {
            if (isset($this-&gt;books[$bookNumberToGet])) {
                return $this-&gt;books[$bookNumberToGet];
            }

            return null;
        }

        public function addBook(Book $book)
        {
            $this-&gt;books[] = $book;
        }

        public function removeBook(Book $bookToRemove)
        {
            foreach ($this-&gt;books as $key =&gt; $book) {
                /** @var Book $book */
                if ($book-&gt;getAuthorAndTitle() === $bookToRemove-&gt;getAuthorAndTitle()) {
                    unset($this-&gt;books[$key]);
                }
            }
        }

        public function count()
        {
            return count($this-&gt;books);
        }
    }
</code></pre>

<pre><code class="php BookListIterator.php">    &lt;?php

    namespace DesignPatterns\Behavioral\Iterator;

    class BookListIterator implements \Iterator
    {

        /**
         * @var BookList
         */
        private $bookList;

        /**
         * @var int
         */
        protected $currentBook = 0;

        public function __construct(BookList $bookList)
        {
            $this-&gt;bookList = $bookList;
        }

        /**
         * Return the current book
         * @link http://php.net/manual/en/iterator.current.php
         * @return Book Can return any type.
         */
        public function current()
        {
            return $this-&gt;bookList-&gt;getBook($this-&gt;currentBook);
        }

        /**
         * (PHP 5 &gt;= 5.0.0)
         *
         * Move forward to next element
         * @link http://php.net/manual/en/iterator.next.php
         * @return void Any returned value is ignored.
         */
        public function next()
        {
            $this-&gt;currentBook++;
        }

        /**
         * (PHP 5 &gt;= 5.0.0)
         *
         * Return the key of the current element
         * @link http://php.net/manual/en/iterator.key.php
         * @return mixed scalar on success, or null on failure.
         */
        public function key()
        {
            return $this-&gt;currentBook;
        }

        /**
         * (PHP 5 &gt;= 5.0.0)
         *
         * Checks if current position is valid
         * @link http://php.net/manual/en/iterator.valid.php
         * @return boolean The return value will be casted to boolean and then evaluated.
         *       Returns true on success or false on failure.
         */
        public function valid()
        {
            return null !== $this-&gt;bookList-&gt;getBook($this-&gt;currentBook);
        }

        /**
         * (PHP 5 &gt;= 5.0.0)
         *
         * Rewind the Iterator to the first element
         * @link http://php.net/manual/en/iterator.rewind.php
         * @return void Any returned value is ignored.
         */
        public function rewind()
        {
            $this-&gt;currentBook = 0;
        }
    }
</code></pre>

<pre><code class="php BookListReverseIterator.php">
    &lt;?php

    namespace DesignPatterns\Behavioral\Iterator;

    class BookListReverseIterator implements \Iterator
    {

        /**
         * @var BookList
         */
        private $bookList;

        /**
         * @var int
         */
        protected $currentBook = 0;

        public function __construct(BookList $bookList)
        {
            $this-&gt;bookList = $bookList;
            $this-&gt;currentBook = $this-&gt;bookList-&gt;count() - 1;
        }

        /**
         * Return the current book
         * @link http://php.net/manual/en/iterator.current.php
         * @return Book Can return any type.
         */
        public function current()
        {
            return $this-&gt;bookList-&gt;getBook($this-&gt;currentBook);
        }

        /**
         * (PHP 5 &gt;= 5.0.0)
         *
         * Move forward to next element
         * @link http://php.net/manual/en/iterator.next.php
         * @return void Any returned value is ignored.
         */
        public function next()
        {
            $this-&gt;currentBook--;
        }

        /**
         * (PHP 5 &gt;= 5.0.0)
         *
         * Return the key of the current element
         * @link http://php.net/manual/en/iterator.key.php
         * @return mixed scalar on success, or null on failure.
         */
        public function key()
        {
            return $this-&gt;currentBook;
        }

        /**
         * (PHP 5 &gt;= 5.0.0)
         *
         * Checks if current position is valid
         * @link http://php.net/manual/en/iterator.valid.php
         * @return boolean The return value will be casted to boolean and then evaluated.
         *       Returns true on success or false on failure.
         */
        public function valid()
        {
            return null !== $this-&gt;bookList-&gt;getBook($this-&gt;currentBook);
        }

        /**
         * (PHP 5 &gt;= 5.0.0)
         *
         * Rewind the Iterator to the first element
         * @link http://php.net/manual/en/iterator.rewind.php
         * @return void Any returned value is ignored.
         */
        public function rewind()
        {
            $this-&gt;currentBook = $this-&gt;bookList-&gt;count() - 1;
        }
    }
</code></pre>

<h1>4、测试代码</h1>

<pre><code class="php Tests/IteratorTest.php">&lt;?php

namespace DesignPatterns\Behavioral\Iterator\Tests;

use DesignPatterns\Behavioral\Iterator\Book;
use DesignPatterns\Behavioral\Iterator\BookList;
use DesignPatterns\Behavioral\Iterator\BookListIterator;
use DesignPatterns\Behavioral\Iterator\BookListReverseIterator;

class IteratorTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var BookList
     */
    protected $bookList;

    protected function setUp()
    {
        $this-&gt;bookList = new BookList();
        $this-&gt;bookList-&gt;addBook(new Book('Learning PHP Design Patterns', 'William Sanders'));
        $this-&gt;bookList-&gt;addBook(new Book('Professional Php Design Patterns', 'Aaron Saray'));
        $this-&gt;bookList-&gt;addBook(new Book('Clean Code', 'Robert C. Martin'));
    }

    public function expectedAuthors()
    {
        return array(
            array(
                array(
                    'Learning PHP Design Patterns by William Sanders',
                    'Professional Php Design Patterns by Aaron Saray',
                    'Clean Code by Robert C. Martin'
                )
            ),
        );
    }

    /**
     * @dataProvider expectedAuthors
     */
    public function testUseAIteratorAndValidateAuthors($expected)
    {
        $iterator = new BookListIterator($this-&gt;bookList);

        while ($iterator-&gt;valid()) {
            $expectedBook = array_shift($expected);
            $this-&gt;assertEquals($expectedBook, $iterator-&gt;current()-&gt;getAuthorAndTitle());
            $iterator-&gt;next();
        }
    }

    /**
     * @dataProvider expectedAuthors
     */
    public function testUseAReverseIteratorAndValidateAuthors($expected)
    {
        $iterator = new BookListReverseIterator($this-&gt;bookList);

        while ($iterator-&gt;valid()) {
            $expectedBook = array_pop($expected);
            $this-&gt;assertEquals($expectedBook, $iterator-&gt;current()-&gt;getAuthorAndTitle());
            $iterator-&gt;next();
        }
    }

    /**
     * Test BookList Remove
     */
    public function testBookRemove()
    {
        $this-&gt;bookList-&gt;removeBook($this-&gt;bookList-&gt;getBook(0));
        $this-&gt;assertEquals($this-&gt;bookList-&gt;count(), 2);
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP设计模式(七)-装饰器模式]]></title>
    <link href="http://ewanreton.github.io/blog/2016/06/07/php-design-7/"/>
    <updated>2016-06-07T10:53:23+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/06/07/php-design-7</id>
    <content type="html"><![CDATA[<h1>1、模式定义</h1>

<p>装饰器模式能够从一个对象的外部动态地给对象添加功能。</p>

<p>通常给对象添加功能，要么直接修改对象添加相应的功能，要么派生对应的子类来扩展，抑或是使用对象组合的方式。显然，直接修改对应的类这种方式并不可取。在面向对象的设计中，我们也应该尽量使用对象组合，而不是对象继承来扩展和复用功能。装饰器模式就是基于对象组合的方式，可以很灵活的给对象添加所需要的功能。装饰器模式的本质就是动态组合。动态是手段，组合才是目的。</p>

<p>常见的使用示例：Web服务层 —— 为 REST 服务提供 JSON 和 XML 装饰器。</p>

<h1>2、UML类图</h1>

<p><img src="http://laravelacademy.org/wp-content/uploads/2015/12/decorator-design-pattern.png" alt="" /></p>

<h1>3、实例代码</h1>

<p>定义接口：</p>

<pre><code class="php RendererInterface.php">    &lt;?php

    namespace DesignPatterns\Structural\Decorator;

    /**
     * RendererInterface接口
     */
    interface RendererInterface
    {
        /**
         * render data
         *
         * @return mixed
         */
        public function renderData();
    }
</code></pre>

<pre><code class="php Webservice.php">    &lt;?php

    namespace DesignPatterns\Structural\Decorator;

    /**
     * Webservice类
     */
    class Webservice implements RendererInterface
    {
        /**
         * @var mixed
         */
        protected $data;

        /**
         * @param mixed $data
         */
        public function __construct($data)
        {
            $this-&gt;data = $data;
        }

        /**
         * @return string
         */
        public function renderData()
        {
            return $this-&gt;data;
        }
    }

个人感觉在这里没有必要实现RendererInterface接口，
实现这个接口过后就必须实现renderData方法，而这个方法仅仅是用来返回数据。
但是这个名字和后面装饰器的实现方法重名，很容易混乱。
这里如果不实现RendererInterface接口，将renderData()改为getData（）应该会好一些，至少程序没那么容易搞混。
</code></pre>

<p>装饰器抽象类：</p>

<pre><code class="php Decorator.php">    &lt;?php

    namespace DesignPatterns\Structural\Decorator;

    /**
     * 装饰器必须实现 RendererInterface 接口, 这是装饰器模式的主要特点，
     * 否则的话就不是装饰器而只是个包裹类
     */

    /**
     * Decorator类
     */
    abstract class Decorator implements RendererInterface
    {
        /**
         * @var RendererInterface
         */
        protected $wrapped;

        /**
         * 必须类型声明装饰组件以便在子类中可以调用renderData()方法
         *
         * @param RendererInterface $wrappable
         */
        public function __construct(RendererInterface $wrappable)
        {
            $this-&gt;wrapped = $wrappable;
        }
    }
</code></pre>

<pre><code class="php RenderInXml.php">    &lt;?php

    namespace DesignPatterns\Structural\Decorator;

    /**
     * RenderInXml类
     */
    class RenderInXml extends Decorator
    {
        /**
         * render data as XML
         *
         * @return mixed|string
         */
        public function renderData()
        {
            $output = $this-&gt;wrapped-&gt;renderData();

            // do some fancy conversion to xml from array ...

            $doc = new \DOMDocument();

            foreach ($output as $key =&gt; $val) {
                $doc-&gt;appendChild($doc-&gt;createElement($key, $val));
            }

            return $doc-&gt;saveXML();
        }
    }
</code></pre>

<pre><code class="php RenderInJson.php">    &lt;?php

    namespace DesignPatterns\Structural\Decorator;

    /**
     * RenderInJson类
     */
    class RenderInJson extends Decorator
    {
        /**
         * render data as JSON
         *
         * @return mixed|string
         */
        public function renderData()
        {
            $output = $this-&gt;wrapped-&gt;renderData();

            return json_encode($output);
        }
    }
</code></pre>

<h1>4、测试代码</h1>

<pre><code class="php">    &lt;?php

    namespace DesignPatterns\Structural\Decorator\Tests;

    use DesignPatterns\Structural\Decorator;

    /**
     * DecoratorTest 用于测试装饰器模式
     */
    class DecoratorTest extends \PHPUnit_Framework_TestCase
    {

        protected $service;

        protected function setUp()
        {
            $this-&gt;service = new Decorator\Webservice(array('foo' =&gt; 'bar'));//实例化 Webservice 类
        }

        public function testJsonDecorator()
        {
            // Wrap service with a JSON decorator for renderers
            $service = new Decorator\RenderInJson($this-&gt;service);//给实例化的类添加装饰器
            // Our Renderer will now output JSON instead of an array
            $this-&gt;assertEquals('{"foo":"bar"}', $service-&gt;renderData());
        }

        public function testXmlDecorator()
        {
            // Wrap service with a XML decorator for renderers
            $service = new Decorator\RenderInXml($this-&gt;service);
            // Our Renderer will now output XML instead of an array
            $xml = '&lt;?xml version="1.0"?&gt;&lt;foo&gt;bar&lt;/foo&gt;';
            $this-&gt;assertXmlStringEqualsXmlString($xml, $service-&gt;renderData());
        }

        /**
         * The first key-point of this pattern :
         */
        public function testDecoratorMustImplementsRenderer()
        {
            $className = 'DesignPatterns\Structural\Decorator\Decorator';
            $interfaceName = 'DesignPatterns\Structural\Decorator\RendererInterface';
            $this-&gt;assertTrue(is_subclass_of($className, $interfaceName));
        }

        /**
         * Second key-point of this pattern : the decorator is type-hinted
         *
         * @expectedException \PHPUnit_Framework_Error
         */
        public function testDecoratorTypeHinted()
        {
            if (version_compare(PHP_VERSION, '7', '&gt;=')) {
                throw new \PHPUnit_Framework_Error('Skip test for PHP 7', 0, __FILE__, __LINE__);
            }

            $this-&gt;getMockForAbstractClass('DesignPatterns\Structural\Decorator\Decorator', array(new \stdClass()));
        }

        /**
         * Second key-point of this pattern : the decorator is type-hinted
         *
         * @requires PHP 7
         * @expectedException TypeError
         */
        public function testDecoratorTypeHintedForPhp7()
        {
            $this-&gt;getMockForAbstractClass('DesignPatterns\Structural\Decorator\Decorator', array(new \stdClass()));
        }

        /**
         * The decorator implements and wraps the same interface
         */
        public function testDecoratorOnlyAcceptRenderer()
        {
            $mock = $this-&gt;getMock('DesignPatterns\Structural\Decorator\RendererInterface');
            $dec = $this-&gt;getMockForAbstractClass('DesignPatterns\Structural\Decorator\Decorator', array($mock));
            $this-&gt;assertNotNull($dec);
        }
    } 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP设计模式(六)-原型模式]]></title>
    <link href="http://ewanreton.github.io/blog/2016/06/07/php-design-6/"/>
    <updated>2016-06-07T10:22:51+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/06/07/php-design-6</id>
    <content type="html"><![CDATA[<h1>1、模式定义</h1>

<p>通过创建原型使用克隆方法实现对象创建而不是使用标准的<code>new</code> 方式。</p>

<h1>2、UML类图</h1>

<p><img src="http://laravelacademy.org/wp-content/uploads/2015/12/120b8c2b-9cad-44e8-a286-3347d32d57dd.png" alt="" /></p>

<h1>3、示例代码</h1>

<pre><code class="php BookPrototype.php">&lt;?php

    namespace DesignPatterns\Creational\Prototype;

    /**
     * BookPrototype类
     */
    abstract class BookPrototype
    {
        /**
         * @var string
         */
        protected $title;

        /**
         * @var string
         */
        protected $category;

        /**
         * @abstract
         * @return void
         */
        abstract public function __clone();

        /**
         * @return string
         */
        public function getTitle()
        {
            return $this-&gt;title;
        }

        /**
         * @param string $title
         */
        public function setTitle($title)
        {
            $this-&gt;title = $title;
        }
    }
</code></pre>

<pre><code class="php BarBookPrototype.php">    &lt;?php

    namespace DesignPatterns\Creational\Prototype;

    /**
     * BarBookPrototype类
     */
    class BarBookPrototype extends BookPrototype
    {
        /**
         * @var string
         */
        protected $category = 'Bar';

        /**
         * empty clone
         */
        public function __clone()
        {
        }
    }
</code></pre>

<pre><code class="php FooBookPrototype.php">    &lt;?php

    namespace DesignPatterns\Creational\Prototype;

    /**
     * FooBookPrototype类
     */
    class FooBookPrototype extends BookPrototype
    {
        protected $category = 'Foo';

        /**
         * empty clone
         */
        public function __clone()
        {
        }
    }
</code></pre>

<h1>4、测试代码</h1>

<pre><code class="php">    &lt;?php

    namespace DesignPatterns\Creational\Prototype\Tests;

    use DesignPatterns\Creational\Prototype\BookPrototype;
    use DesignPatterns\Creational\Prototype\FooBookPrototype;
    use DesignPatterns\Creational\Prototype\BarBookPrototype;

    /**
     * PrototypeTest tests the prototype pattern
     */
    class PrototypeTest extends \PHPUnit_Framework_TestCase
    {
        //实例化得到类的原型
         public function getPrototype(){
             return array(
                 array(new FooBookPrototype()),
                 array(new BarBookPrototype())
             );
         }

         /**
          * 克隆类
          * @dataProvider getPrototype
          */
         public function testCreation(BookPrototype $prototype)
         {
             $book = clone $prototype;
             $book-&gt;setTitle($book-&gt;getCategory().' Book');
             $this-&gt;assertInstanceOf('DesignPatterns\Creational\Prototype\BookPrototype', $book);
         }
    } 
</code></pre>

<h1>5、总结</h1>

<p>原型模式的主要思想是基于现有的对象克隆一个新的对象出来，一般是用对象内部提供的克隆方法，通过该方法返回一个对象的副本，这种创建对象的方式，相比我们之前说的几类创建型模式还是有区别的，之前的讲述的工厂方法模式与抽象工厂都是通过工厂封装具体的 new 操作的过程，返回一个新的对象，有的时候我们通过这样的创建工厂创建对象不值得，特别是以下的几个场景，可能使用原型模式更简单、效率更高：</p>

<ul>
<li>如果说我们的对象类型不是刚开始就能确定，而是在运行时确定的话，那么我们通过这个类型的对象克隆出一个新的类型更容易。</li>
<li>有的时候我们可能在实际的项目中需要一个对象在某个状态下的副本，这个前提很重要，这点怎么理解呢，例如有的时候我们需要对比一个对象经过处理后的状态和处理前的状态是否发生过改变，可能我们就需要在执行某段处理之前，克隆这个对象此时状态的副本，然后等执行后的状态进行相应的对比，这样的应用在项目中也是经常会出现的。</li>
<li>当我们处理的对象比较简单，并且对象之间的区别很小，可能只是很固定的几个属性不同的时候，使用原型模式更合适。</li>
</ul>

]]></content>
  </entry>
  
</feed>
