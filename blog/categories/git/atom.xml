<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Ewan Reton]]></title>
  <link href="http://ewanreton.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://ewanreton.github.io/"/>
  <updated>2016-06-02T21:40:21+08:00</updated>
  <id>http://ewanreton.github.io/</id>
  <author>
    <name><![CDATA[Ewan Reton]]></name>
    <email><![CDATA[liukedi001@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GIT分支]]></title>
    <link href="http://ewanreton.github.io/blog/2016/06/02/git-branch/"/>
    <updated>2016-06-02T21:29:24+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/06/02/git-branch</id>
    <content type="html"><![CDATA[<blockquote><p>今天在学习git的远程操作的时候发现了一篇关于分支(branch)的文章，讲得非常好。让我对分支的理解更深了一步.</p></blockquote>

<p>先贴上原地址<a href="http://www.tuicool.com/articles/U73q63V">http://www.tuicool.com/articles/U73q63V</a></p>

<p>然后就照搬了0 0</p>

<h1>git的分支是什么</h1>

<p>顾名思义，分支就是从主线上分离出来进行另外的操作，而又不影响线，主线又可以继续干它的事，是不是有点像线程，最后分支做完事后合并到主线上而分支的任务完成可以删掉了。这样是不是很方便，主线继续做它的事，分支用来解决临时需求，二者互不相干。</p>

<p> git的分支功能特别的强大，它不需要将所有数据进行复制，只要重新创建一个分支的指针指向你需要从哪里开始创建分支的提交对象(commit)，然后进行修改再提交，那么新分支的指针就会指向你最新提交的这个commit对象，而原来分支的指针则指向你原来开发的位置，当你在哪个分支开发，HEAD就指向那个分支的最新提交对象commt。没弄清楚没关系，先有这么一个概念，后面慢慢就会弄清的。</p>

<h1>分支的新建与合并</h1>

<p>我们可以用命令git branch来查看我们的git仓库有几个分支，而我们目前工作处于那个分支，前面有个*号的就为我们目前所处的分支。我们可以通过命令git branch name来创建分支，而这个分支的指针就指向最新的commit对象，也就和HEAD指向同一对象。我们可以通过命令git checkout name来切换到目的分支，我们默认的主分支为master。在分支的创建和切换，其实只是简单的创建指针找指针而已，而根据找到的指针找到所指向的commit对象，然后将工作空间恢复成该commit对象所指的文件快照让我们来工作。当提交一次，指针就重新指向这个最新提交的对象，特别的简单。</p>

<p><img src="http://img2.tuicool.com/UBBV3m.jpg!web" alt="" /></p>

<p><img src="http://img1.tuicool.com/6zEZRr.jpg!web" alt="" /></p>

<p>当我们建立分支teset之前，只有master一个主分支，如图一，我们所有的开发都是在这个分支上，而且HEAD是指向最近一次提交的commit对象c3，c3以前还有两次提交c1和c2，这时我们通过git branch test创建test分支，如图二，这时HEAD还是指向master分支最近一次提交的c3，当git checkout test切换到test分支后，HEAD就指向test分支的最近一次提交c3，这个时候其实在.git里面都是指向同样一份数据c3。</p>

<p><img src="http://img2.tuicool.com/iuAN3y.jpg!web" alt="" /></p>

<p>这个时候，当我们在test分支上进行了几次开发提交了c4和c5两个版本后，那么test和HEAD都指向test分支的最近一次提交c5，如图三，而master此时还没有变化，任然指向的是c3，如果这个时候将test分支合并到master分支，那么git根本不用做什么，只要将master移动，指向c5就可以了，这个过程称之为Fast-forward快进。如果此时test的任务完成，我们就可以通过git branch -d test将它删除掉，继续在主分支master上进行开发。如果是这样的话，那么test分支就白建了。</p>

<p><img src="http://img1.tuicool.com/YFBnqi.jpg!web" alt="" /></p>

<p>那么如果此时master分支上又进行另外的开发，提交了两个版本c6和c7，那么此时的master和HEAD指针都指向的是c7，如图四，可以看出在哪个分支上开发，那么HEAD就指向的是哪个分支上的commit，这个时候合并两个分支的话，就如下。</p>

<p><img src="http://img2.tuicool.com/Vzmemqm.jpg!web" alt="" /></p>

<p>如图五，我们先切换到master分支，然后通过git merge test将test分支合并到master分支，这个时候，git就不是简单的移动指针了，因为两边都有开发，所以git就要对于两个分支的最新提交c5和c7还有两个分支共同的祖先commit对象c3来进行一次简单的三方合并，产生新的文件快照并用新的commit对象c8记录，这个合并的过程不需要太在意，如果产生了冲突，也就是两个分支对同一个文件进行了修改，那么git就会停下合并操作，让你处理好冲突后，再提交(c8)，然后再进行合并。这时master和HEAD都指向c8，但是test是没有移动的，此时还可以在test上继续开发，再合并到master，如果test已经没有利用价值了就可以删掉了。</p>

<h1>本地分支，追踪分支和远程分支</h1>

<p>这里有三个概念，本地分支就是我们可以通过git branch查看到的分支，也就是我们自己git仓库所拥有的分支，我们都可以利用。远程分支是对远程仓库的分支的索引，它其实也是本地分支，只是我们无法移动它，必须要在和中心服务器交互根据服务器更新到本地来的代码移动的，远程分支的作用就是我们上次和中心服务器交互更新得到的最新版本，它也是个指针。追踪分支比较难理解，它也是一个本地分支，只是它对应了一个远程分支，如果我们本地的某个分支对应了一个特定的远程分支，那么它就是追踪分支，比如我们最初的master分支就是一个追踪分支，它对应远程分支origin/master，这里origin是远程仓库名，当我们在master分支里执行更新(fetch，pull)或是推送(push)，在不指定分支的情况下，默认就是从origin/master分支更新来或者提交到origin/mster分支。</p>

<p><img src="http://img2.tuicool.com/MJZb6f.jpg!web" alt="" /></p>

<p><img src="http://img.blog.csdn.net/20140417173323859" alt="" /></p>

<p>从图七和图八很容易看出来，和我们本地创建分支很相似，只是origin/master远程分支只有在连接服务器并更新服务器代码到本地后才会移动，如下图九：</p>

<p><img src="http://img0.tuicool.com/zERfum.jpg!web" alt="" /></p>

<p>更新远程代码到本地有两个命令，fetch和pull，fetch是将远程代码更新到本地，但是不会执行合并操作，需要自己查看，解决冲突什么的，然后自己再执行merge将更新来的代码合并到我们自己制定的分支，但是pull就将这两个操作合成了一步，直接更新服务器代码更新并合并到到本地指定分支，当然遇到冲突也必须要自己解决。所以我们一般都使用fetch来实现更新，虽然麻烦了点，但是不容易出问题。</p>

<p>将本地代码推送到远程仓库，也就是中心服务器，一般我们推送数据都是git push origin master:master，这里指定远程仓库名，本地分支名和远端分支，也就是将我们本地master分支的数据推送到远程仓库origin的master分支。如果本地的master分支是追踪分支，那么在不指定的情况下，它会自己找到远程仓库中对应的分支来推送数据。或者我们直接进行git push origin操作，只指定远程仓库名，那么git会根据我们目前所在分支和它所对应的远程仓库的分支来实现数据推送，前提是我们目前所在分支必须是追踪分支。当然如果是git push origin :master，这里本地分支名是空的，这个操作就是将空分支推送到远程仓库的master分支，结果就是将master分支删除。</p>

<p>既然追踪分支这么好用，那么我们怎么建立追踪分支呢，有两种方式，第一种方式就是不指定该追踪分支的名字，默认和远程仓库的分支名字一样：git checkout &ndash;track 远程仓库名/test，这样我们就建立了一个名为test的追踪分支，第二种方式是重新指定追踪分支的名字：git checkout -b name 远程仓库名/test，这样我们就创建了一个名为name的追踪分支，它对应远程仓库的test分支。</p>

<h1>git分支管理</h1>

<p>git创建分支于合并分支是如此简单快捷，那么在我们的开发过程中可以疯狂的使用分支，而且git的核心玩法之一就是分支，非常提倡使用分支，但是是不是我们可以肆无忌惮的使用分支呢，创建这么多的分支我们要如何来管理呢，分支不在多而在恰到好处，如果分支创建多了，管理起来就麻烦了，所以推荐一种分支的管理策略，git-flow，同时推荐一篇文章来了解这种策略： <a href="http://nvie.com/posts/a-successful-git-branching-model/">http://nvie.com/posts/a-successful-git-branching-model/</a> ，让你的git使用更加顺手。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIT远程操作]]></title>
    <link href="http://ewanreton.github.io/blog/2016/06/02/git-remote/"/>
    <updated>2016-06-02T20:37:22+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/06/02/git-remote</id>
    <content type="html"><![CDATA[<blockquote><p>很早以前就接触GIT了，但是一直是很简单的应用，只是把项目网上面挂，并没有用到git的好处。这次想把实习的项目挂到GIT上去，多方应用。</p></blockquote>

<h1>一、 git remote</h1>

<p>为了便于管理，Git要求每个远程主机都必须指定一个主机名。<code>git remote</code>命令就用于管理主机名。</p>

<p>不带选项的时候，<code>git remote</code>命令列出所有远程主机。</p>

<p>使用 <strong>-v</strong> 选项，可以查看远程主机的网址。
<code>php
$ git remote -v
origin  git@github.com:jquery/jquery.git (fetch)
origin  git@github.com:jquery/jquery.git (push)
</code>
上面便是，当前有一台远程主机叫做 origin 以及他的网址。</p>

<p>克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。</p>

<pre><code class="php">$ git clone -o jQuery https://github.com/jquery/jquery.git
$ git remote
jQuery
</code></pre>

<p>上面命令表示，克隆的时候，指定远程主机叫做jQuery。</p>

<pre><code>git remote add
</code></pre>

<p>命令用于添加远程主机。
<code>php
$ git remote add &lt;主机名&gt; &lt;网址&gt;
</code>
<code>
git remote rm
</code>
命令用于删除远程主机。
<code>
git remote rename
</code>
命令用于远程主机的改名。
<code>php
$ git remote rename &lt;原主机名&gt; &lt;新主机名&gt;
</code></p>

<h1>二、git fetch</h1>

<p>一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到
<code>
git fetch
</code>
命令。</p>

<pre><code class="php">$ git fetch &lt;远程主机名&gt;
//上面命令将某个远程主机的更新，全部取回本地。
//git fetch命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。
//默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。
$ git fetch &lt;远程主机名&gt; &lt;分支名&gt;
$ git fetch origin master
</code></pre>

<p>所取回的更新，在本地主机上要用"远程主机名/分支名"的形式读取。比如origin主机的master，就要用<code>origin/master</code>读取。</p>

<pre><code>git branch
</code></pre>

<p>命令的<code>-r</code>选项，可以用来查看远程分支，<code>-a</code>选项查看所有分支。
<code>php
$ git branch -r
origin/master
$ git branch -a
* master
  remotes/origin/master
</code>
上面命令表示，本地主机的当前分支是<code>master</code>，远程分支是<code>origin/master</code>。</p>

<p>取回远程主机的更新以后，可以在它的基础上，使用
<code>
git checkout
</code>
命令创建一个新的分支。</p>

<pre><code class="php">$ git checkout -b newBrach origin/master
</code></pre>

<p>上面命令表示，在<code>origin/master</code>的基础上，创建一个新分支。</p>

<p>此外，也可以使用
<code>
git merge
</code>
命令或者
<code>
git rebase
</code>
命令，在本地分支上合并远程分支。</p>

<pre><code class="php">$ git merge origin/master
 或者
$ git rebase origin/master
</code></pre>

<p>上面命令表示在当前分支上，合并<code>origin/master</code>。</p>

<h1>三、 git pull</h1>

<p>git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p>

<pre><code class="php">$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;
比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。
$ git pull origin next:master
</code></pre>

<p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p>

<p>上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。</p>

<pre><code class="php">$ git fetch origin
$ git merge origin/next
</code></pre>

<p>如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。</p>

<p>但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="err">$</span> <span class="nx">git</span> <span class="nx">pull</span> <span class="o">-</span><span class="nx">p</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">等同于下面的命令</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="err">$</span> <span class="nx">git</span> <span class="nx">fetch</span> <span class="o">&amp;</span><span class="nx">ndash</span><span class="p">;</span><span class="nx">prune</span> <span class="nx">origin</span>
</span><span class='line'><span class="err">$</span> <span class="nx">git</span> <span class="nx">fetch</span> <span class="o">-</span><span class="nx">p</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1>四、git push</h1>

<p>git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。
<code>php
$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;
</code></p>

<p>注意，分支推送顺序的写法是&lt;来源地>:&lt;目的地>，所以git pull是&lt;远程分支>:&lt;本地分支>，而git push是&lt;本地分支>:&lt;远程分支>。</p>

<p>如果省略远程分支名，则表示将本地分支推送与之存在"追踪关系"的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</p>

<h1>五、分支</h1>

<p><strong> 创建分支</strong></p>

<pre><code class="php">$ git branch test 
切换到分支
$ git checkout test  
删除本地分支
$ git branch -d xxxxx
创建分支并切换
$git checkout -b xxx
</code></pre>

<p><strong>分支的合并</strong></p>

<p>假设有两个分支 develop 和 master</p>

<ul>
<li><p>快速合并</p>

<p>  我们把develop分支合并到master分支上，来到master分支后，键入下述命令：</p>

<p>  git merge develop</p></li>
<li><p>普通合并</p>

<p>  &ndash;no-ff参数表示禁用快速合并！</p>

<p>  git merge &ndash;no-ff -m &ldquo;合并的信息(TAG)&rdquo; develop</p></li>
</ul>


<p><strong>解决合并冲突</strong></p>

<pre><code class="php">$ git merge issue3
Auto-merging myfile.txt
CONFLICT (content): Merge conflict in myfile.txt
Automatic merge failed; fix conflicts and then commit the result
</code></pre>

<p>自动合并失败。由于在同一行进行了修改，所以产生了冲突。这时myfile.txt的内容如下：
<code>php
    连猴子都懂的Git命令
    add 把变更录入到索引中
    &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
    commit 记录索引的状态
    =======
    pull 取得远端数据库的内容
    &gt;&gt;&gt;&gt;&gt;&gt;&gt; issue3
</code>
在发生冲突的地方，Git生成了内容的差异。请做以下修改</p>

<pre><code class="php">    连猴子都懂的Git命令
    add 把变更录入到索引中
    commit 记录索引的状态
    pull 取得远端数据库的内容 
</code></pre>

<p>修改冲突的部分，重新提交
<code>php
    $ git add myfile.txt
    $ git commit -m "合并issue3分支"
    # On branch master
    nothing to commit (working directory clean)
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIT+Octopress搭建个人博客]]></title>
    <link href="http://ewanreton.github.io/blog/2016/04/18/git-plus-octopressda-jian-ge-ren-bo-ke/"/>
    <updated>2016-04-18T23:13:10+08:00</updated>
    <id>http://ewanreton.github.io/blog/2016/04/18/git-plus-octopressda-jian-ge-ren-bo-ke</id>
    <content type="html"><![CDATA[<h1>GIT+Octopress搭建个人博客</h1>

<!--more-->


<blockquote><p>新博客的第一篇博客</p></blockquote>

<p>很久以前就想自己搭个博客，今天终于开工了。在网上找了很多的教程和各种各样的框架，wordpress，jekyll等，最后选择了Octopress+Git搭建。</p>

<h2>一、环境搭建</h2>

<h3><a href="https://git-scm.com/download/">GIT</a>:版本管理工具，将代码托管到GIT。</h3>

<h3><a href="http://rubyinstaller.org/">Ruby+DevKit</a> ：生成静态页面</h3>

<h3><a href="http://jingyan.baidu.com/article/ca41422fe209271eaf99ed7c.html">MarkDownPad</a>：Windows下MarkDown语法编辑器</h3>

<h4>安装与配置</h4>

<pre><code>GIT和Markdown安装直接点击下一步就可以了。
在安装好git过后，桌面或其他位置点击右键GIT Bash 来配置Github账号（需要先注册GITHUB账号）
</code></pre>

<hr />

<p>1.1配置GITHUB</p>

<pre><code>```
git config --global user_name "XXXX"//你的github账号
git config --global user_email "XXXX"//你的邮箱
ssh-keygen -t rsa -C "YOUR_EMAIL"
```
</code></pre>

<p>下面回车默认为空即可</p>

<p>然后在将你系统盘（大多为C盘）->用户->当前用户（就是你装系统的时候给电脑取的名字）->.ssh文件夹下有id_rsa和id_rsa.pub两个文件打开后者全选复制。
添加到你的GITHUB的SSH KEYs （GITHUB登录后的setting里面）</p>

<p>回到你的bash
<code>
ssh -T git@github.com
</code></p>

<p>来测试SSH keYS,提示HI XXX! 则成功</p>

<hr />

<p>1.2配置RUBY</p>

<pre><code>一直下一步在选择安装路径的时候记得勾选第二个选项添加到你的系统路径。  
安装完成后继续安装DevKit，一直下一步即可，记得选择安装目录。
</code></pre>

<p>进到DevKit安装目录，打开Bash</p>

<pre><code>ruby dk.rb init
ruby dk.rb install
</code></pre>

<hr />

<p>1.3安装Octopress</p>

<pre><code>去到你要保存Octopress的位置打开Bash
git clone git：//github.com/imathis/octopress.git octopress//获取Octopress
cd octopress
gem sources -a https://ruby.taobao.org//添加国内RUBY软件源。在WINDOWS系统下有可能会失败 提示SSL错误。
</code></pre>

<p>建议使用
$ bundle config mirror.<a href="https://rubygems.org">https://rubygems.org</a> <a href="https://gems.ruby-china.org">https://gems.ruby-china.org</a>
<a href="https://gems.ruby-china.org/">参考网址</a></p>

<hr />

<pre><code>gem install bundler
bundler install
rake install
</code></pre>

<p>以上步奏完成并无ERROR则环境搭建成功</p>

<p>rake genreate //生成静态页面</p>

<p>rake preview //这行代码会在本地打开4000端口作为测试</p>

<p>你可以打开浏览器 输入 localhost：4000 来访问你的站点。</p>

<h4>生成博客与单页面</h4>

<hr />

<p>1.新建博客</p>

<pre><code>rake new_post["title"] //生成名为title的博客
</code></pre>

<hr />

<p>2.新建单页面</p>

<pre><code> rake new_page[test]//会生成source/test/index.markdown
 rake new_page[test/page.html]//会生成source/test/page.html
</code></pre>

<p>需要使用markdown语法来书写博客</p>

<hr />

<p>3.生成并本地预览</p>

<pre><code>rake generate
rake preview //http://localhost:4000
</code></pre>

<h4>部署网站到GITHUB</h4>

<hr />

<p>1.新建仓库</p>

<pre><code>username.github.io
</code></pre>

<hr />

<p>2.与本地Octopress 目录绑定</p>

<pre><code>rake setup_github_pages//这里会需要你输入你的GITHUB地址，请输入：git@github.com:yourname/yourname.github.com.git (将yourname替换成你的github登录名)
</code></pre>

<p>注意:这一步不要输入提示中提示的以io结束的地址。
    rake deploy</p>

<p>成功过后就可以通过访问
username.github.io 来访问你的个人博客了</p>

<hr />

<p>PS： 第一次用自己搭的博客写博客，markdown语法用起来也不太熟悉。</p>
]]></content>
  </entry>
  
</feed>
